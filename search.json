[
{
    
    "title":"Blog Tags",
    "excerpt": " Explore a comprehensive list of topics and tags related to the Stride game engine, covering features, tutorials, updates, and more. Alternatively, you can view the [Blog Archive](/archive/) for a...",
    "author": "",
    "date": "February 28, 2024",
    "category": "",
    "tags": "search",
    "url":"https://www.stride3d.net/tags/",
    "content":"Explore a comprehensive list of topics and tags related to the Stride game engine, covering features, tutorials, updates, and more. Alternatively, you can view the Blog Archive for a chronological list of posts. .NET A closer look: Diagnostic Analyzers with RoslynA closer look: Setting private members in the editorCommunity Meeting October 2023Investigating SPIR-V for the shader system - Part 1Unity's Licensing Changes: Discovering Stride, a Community-Driven Open Source Engine 4.2 Announcing Stride 4.2 Announcement Announcing Refreshed Stride WebsiteVL.Stride Released by vvvvXenko Has Been Renamed to StrideXenko meets vvvvWelcome TurboPlay as Gold SponsorOpensourcing Done! What's Next?Xenko 3.0 is Now Free and Open-Source!Changes to the Xenko LicenseHuge Update! Paradox Name Change!Xenko is Going Open SourceStride Blog is Online Archetypes Feature Spotlight: Archetypes, Prefabs, and Nested Prefabs Avalonia Community Meeting October 2023 Education A closer look: Setting private members in the editorBack to NormalsFeature Spotlight: Archetypes, Prefabs, and Nested PrefabsXenko 1.9 Beta Released Graphics Recap December 2019Stride 4.1 is Now Live Live Taking .NET Game Development in Stride Meeting Community Meeting October 2023Community Meeting February 2022Community Meeting November 2021Community Meeting October 2021Community Meeting May 2020Recap January 2020Recap December 2019Community Meeting December 2019Recap October 2019Contributor Meeting October 2019Recap September 2019Community Meeting July 2019Developer Meeting January 2019 NuGet Feature Spotlight: Xenko 3.1 + NuGet Particles Feature Spotlight: Particle Effects Physics Stride 4.1 is Now Live Prefabs Feature Spotlight: Archetypes, Prefabs, and Nested Prefabs Release Announcing Stride 4.2Stride 4.1 is Now LiveStride 4.0 is Now LiveXenko 3.1 ReleasedXenko 3.1 Beta ReleasedXenko 2.1 ReleasedXenko 2.0 ReleasedXenko 1.9 Beta ReleasedXenko 1.8 Beta ReleasedXenko 1.7 Beta ReleasedXenko 1.6 Beta ReleasedXenko 1.5 Beta ReleasedXenko 1.3 Beta ReleasedXenko 1.1 Beta ReleasedXenko 1.0 Alpha Released Shaders Investigating SPIR-V for the shader system - Part 1 Sponsor Open Collective Templates Newly Added Game Templates Tutorials Stride 4.0 is Now LiveStride 4.1 is Now LiveXenko 3.1 Released"
  },{
    
    "title":"Support the Future of Stride",
    "excerpt": "",
    "author": "",
    "date": "February 28, 2024",
    "category": "",
    "tags": "search",
    "url":"https://www.stride3d.net/sponsor/",
    "content":" Support the Future of Stride Why Sponsor Stride? Stride is a community-driven, free, and open-source project. We're dedicated to pushing the boundaries of game development, but we can't do it alone. That's where sponsors come in. The Impact of Your Sponsorship Sponsors play a crucial role in empowering developers and creators by supporting the tools and resources they need to bring their visions to life. Your sponsorship helps maintain and improve the quality of our game engine, enhance our documentation, provide vital resources to our community, and much more. Join Our Community of Sponsors We want to extend a big shout out to all those who already sponsor the Stride Game Engine. Your dedication and backing are what make Stride's ongoing development possible. If you're not a sponsor yet, consider joining this community of visionaries who are investing in the future of game development. Featured Sponsors A visual live-programming environment that takes you from rapid prototyping to final production. An indie game studio with a primary focus on virtual reality (VR) experiences. Gold Striders Silver Striders Bronze Striders All Stride Sponsors Additional Sponsors Thank you to all our additional sponsors who have contributed to the Stride project. David Jeske "
  },{
    
    "title":"FAQ",
    "excerpt": "",
    "author": "",
    "date": "February 28, 2024",
    "category": "",
    "tags": "search",
    "url":"https://www.stride3d.net/faq/",
    "content":" General What are the Stride system requirements? You can find the Stride system requirements on the Requirements page in the Stride manual. What platforms can I make applications for using Stride? Stride currently supports Windows, Android, iOS, Xbox One and Universal Windows Platforms (UWP). Stride also supports most popular VR devices and has experimental support for Linux. What features does Stride support? You can find information about Stride features on the Stride features page, in the Stride documentation, on the Stride blog, and in the Stride release notes. If you can't find what you're looking for, ask us on the Stride GitHub Discussions. What kind of applications can I make with Stride? Stride is open-source, highly modular, and super-versatile. You can use it to create mobile, PC and VR games, or as a high-end rendering engine for non-gaming applications such as architecture, medical, and engineering visualization software, training simulations, and so on. Is Stride free? Yes. Stride is free. If you want, you can support the project through the Open Collective. Can I sell applications made with Stride? Yes. You can sell applications made with Stride without restriction. Can I use assets and code from the Stride samples or templates in my application? Yes, you can use Stride sample assets and code in your games. Do I have to upgrade to new versions of Stride? Will this break my application? No, you don't have to upgrade Stride if you don't want to. However, we recommend you upgrade to benefit from new features and bug fixes. Stride automatically upgrades your code and assets when you open a project in a new version. In the case of important API changes, upgrading Stride might break your application. We recommend you make a backup of your project before upgrading it. Where can I get support for Stride? You can get support on the Stride community platforms or in the documentation troubleshooting section. Can you help promote a game I made with Stride? Maybe! Let us know when you're about to release your game. We'll be happy to discuss how we can help. Licensing Do I own the content I make with Stride? Yes. You own all the content you make with Stride. Does Stride charge royalties? No. You can build and distribute applications made with Stride with zero royalty fees. Can I modify the Stride source code for my game? Yes. You can modify Stride as you need without restrictions. Do I have to open the code of my game if I modify Xenko/Stride? No. Xenko 3.x and Stride 4+ are covered by MIT license. Can I share a modified version of Stride in source code or binary form? Yes, as long as you comply with the terms of the MIT license. Can I include parts of Stride in my own application or engine? Yes, as long as you comply with the terms of the MIT license. Disclaimer The information on this page is provided \"as is\" and has no legal value. Stride makes no guarantees about the accuracy or completeness of the information on this page. "
  },{
    
    "title":"Download Stride",
    "excerpt": "",
    "author": "",
    "date": "February 28, 2024",
    "category": "",
    "tags": "search",
    "url":"https://www.stride3d.net/download/",
    "content":" Your Next Game Engine Stride is a powerful, open-source 2D and 3D cross-platform game engine. It's free to use, modify, and distribute under the permissive MIT license. Whether you're creating a simple mobile game or the next big console hit, Stride has the features and flexibility you need. Your Freedom with Stride Use Stride for any purpose Distribute Stride however you like Dive into Stride's workings and modify it to suit your needs Share or distribute your modified versions of Stride Installer Download Source Code Note: The installer download is approximately 55 MB. This file will be downloaded directly from our GitHub main repository. Get Started with Stride Before you download, make sure to check the system requirements for Stride. Ready to dive in? View the most recent changes in our release notes. Frequently asked questions What platforms can I make applications for using Stride? Stride currently supports Windows, Android, iOS, Xbox One and Universal Windows Platforms (UWP). Stride also supports most popular VR devices and has experimental support for Linux. Where can I learn about the Stride features? See the Stride features page, the Stride documentation, the Stride blog, and the Stride release notes. If you can't find what you're looking for, ask on the Stride GitHub discussions. Do I have to open the code of my game if I modify Stride/Xenko? No. Xenko 3.x and Stride 4+ are covered by MIT license. What kinds of application can I make with Stride? Stride is open-source, highly modular, and super-versatile. You can use it to create mobile, PC and VR games, or as a high-end rendering engine for applications such as training simulations or architecture and engineering software. Do I own the content I make with Stride? Yes. You own all the content you make with Stride. For more answers, see our dedicated FAQ page. "
  },{
    
    "title":"Community",
    "excerpt": "",
    "author": "",
    "date": "February 28, 2024",
    "category": "",
    "tags": "search",
    "url":"https://www.stride3d.net/community/",
    "content":" Join us on Discord Join our Discord community to engage with Stride users and developers, share your experiences, and seek advice on various topics. Join the Conversation on Discord Become a Stride Sponsor Support the Stride project by donating to help cover server costs, fund development efforts, and reward the dedicated team working behind the scenes. Support Stride by Becoming a Sponsor Collaborate on GitHub Collaborate on the Stride project with fellow developers, contribute your unique skills, and share your ideas to enhance the platform's capabilities. Help Improve Stride on GitHub GitHub Discussions Actively participate in GitHub discussions to connect with other users, learn valuable insights from developers, and proudly showcase your work to the community. Join a Discussion Twitter Follow us on Twitter at @stridedotnet to stay updated with the latest announcements, exciting news, and essential updates from the Stride team. Follow us YouTube Subscribe to our YouTube channel for access to a wide range of video content, including tutorials, demos, and insights into Stride's features. Follow us Facebook Keep up to date with recent developments and engage with our growing community by following Stride on Facebook. Follow us Q&A Game Dev Explore the Stack Exchange platform for Stride-related help, ask questions, share your expertise, and discover top-voted answers from the community. Ask a Question Contact Have a particular request or need advanced support? Want to offer us feedback? Feel free to contact us directly through any channels listed on this page. "
  },{
    
    "title":"Blog Archive",
    "excerpt": " Welcome to the Stride Blog Archive page. Explore the blog's archive of .NET and C# posts, organized by year. Catch up on past content and discover new insights, tips,...",
    "author": "",
    "date": "February 28, 2024",
    "category": "",
    "tags": "search",
    "url":"https://www.stride3d.net/archive/",
    "content":"Welcome to the Stride Blog Archive page. Explore the blog's archive of .NET and C# posts, organized by year. Catch up on past content and discover new insights, tips, and inspiration.Looking for articles by topic? Check out our Blog Tags page for a categorized list of posts.2024Feb 06 Announcing Stride 4.22023Jun 14 Announcing Refreshed Stride WebsiteJun 15 Taking .NET Game Development in StrideSep 14 Unity's Licensing Changes: Discovering Stride, a Community-Driven Open Source EngineSep 21 A closer look: Setting private members in the editorOct 07 Community Meeting October 2023Oct 23 A closer look: Diagnostic Analyzers with RoslynNov 10 Investigating SPIR-V for the shader system - Part 12022Feb 16 Community Meeting February 2022Jul 16 Stride 4.1 is Now Live2021Feb 01 Stride 4.0 is Now LiveOct 01 Community Meeting October 2021Oct 31 Open CollectiveNov 29 Community Meeting November 20212020Feb 03 Recap January 2020Apr 20 Xenko Has Been Renamed to StrideMay 08 Community Meeting May 2020Oct 02 VL.Stride Released by vvvv2019Jan 19 Developer Meeting January 2019Feb 12 Welcome TurboPlay as Gold SponsorMay 31 Starbreach DemoJul 19 Community Meeting July 2019Sep 23 Recap September 2019Oct 01 Contributor Meeting October 2019Oct 04 Xenko meets vvvvOct 31 Recap October 2019Nov 11 Xenko 3.1 ReleasedDec 18 Community Meeting December 2019Dec 31 Recap December 20192018Mar 30 Changes to the Xenko LicenseAug 02 Xenko 3.0 is Now Free and Open-Source!Aug 22 Opensourcing Done! What's Next?Nov 13 Feature Spotlight: Xenko 3.1 + NuGetDec 24 Xenko 3.1 Beta Released2017Jan 18 Feature Spotlight: Particle EffectsFeb 03 Some Basic Xenko FactsFeb 09 Real-Time Local Reflections PreviewFeb 22 Xenko Exhibits and Official Release NewsMar 03 Release and Pricing InformationMar 09 Add Xbox Live Service to Your Xenko ProjectApr 25 Xenko 2.0 ReleasedMay 11 Game Spotlight: Children of the GalaxySep 14 Xenko 2.1 ReleasedSep 24 Xenko and 3dRudderDec 21 Xenko Pro Free until April 20182016Jan 15 First Fix Update of 2016!Mar 17 Xenko 1.6 Beta ReleasedJul 01 Xenko 1.7 Beta ReleasedJul 25 Help Improve Xenko By Taking Short Survey! (Closed Now)Aug 31 Xenko 1.8 Beta ReleasedOct 21 Run, Don't WalkOct 27 Copy-Paste Improvements Coming SoonNov 02 Toward a Better .NET!Nov 11 Navigation Mesh PreviewNov 18 Script Editor PreviewNov 24 Xenko 1.9 Beta ReleasedDec 01 Newly Added Game TemplatesDec 07 Feature Spotlight: Archetypes, Prefabs, and Nested PrefabsDec 13 Back to NormalsDec 22 Happy Holidays 20162015Mar 05 Scene Editor and Advanced Rendering presented at GDCApr 28 Xenko 1.1 Beta ReleasedJul 30 History and Daily Commits on GitHubAug 13 Roadmap and SurveySep 10 Rescue Drone: Tech DemoSep 17 Xenko 1.3 Beta ReleasedDec 01 Huge Update! Paradox Name Change!Dec 17 Xenko 1.5 Beta Released2014Sep 05 Stride Blog is OnlineSep 06 Xenko 1.0 Alpha ReleasedOct 17 Xenko is Going Open SourceNov 11 Forums Opened, New Release With Image-Based Lighting"
  },{
    
    "title":"Announcing Stride 4.2",
    "excerpt": " Stride contributors are thrilled to announce the release of Stride 4.2, now fully compatible with .NET 8 and leveraging the latest enhancements in C# 12. This release brings significant...",
    "author": "Vaclav Elias",
    "date": "February 06, 2024",
    "category": "",
    "tags": "blog, search, 4.2, Release",
    "url":"https://www.stride3d.net/blog/announcing-stride-4-2-in-dotnet-8/",
    "content":"Stride contributors are thrilled to announce the release of Stride 4.2, now fully compatible with .NET 8 and leveraging the latest enhancements in C# 12. This release brings significant improvements in performance, stability, and developer experience.Table of Contents:Download and Upgrade Unity Licensing Model Impact: A Catalyst for Change Stride's Rising Popularity The Heartbeat of Stride: Our Community Addressing the Pace of Updates in Stride The People Behind Stride Facing the Realities: Funding and Resources Funding and Resource Allocation Challenges in Distribution Call for Skilled Developers Join Us on This Journey The Impact of Your Support Looking Ahead What's New in Stride 4.2 Fixes Exciting Development in Stride Physics Introducing Bepu Physics in Stride Future Prospects and Disclaimer Also good to know Cross-Platform Evolution: The Stride Editor and Avalonia Links Acknowledgements Long time Stride supporters Platinum Striders Gold Striders A massive thank you to the open-source Stride community for your dedicated contributions. This release saw over 75 contributions from more than 22 amazing contributors, each playing a crucial role in making Stride 4.2 a reality.Download and Upgrade 🔗You can download the Stride 4.2 Installer today. Release notes are available here.Make sure you read the guide to update Stride and projects properly.Unity Licensing Model Impact: A Catalyst for Change 🔗The game development world has seen quite a stir with recent changes in Unity's licensing model. These shifts have led many in our community to rethink their choice of development tools. Stride 4.2 steps up in this scenario as a solid, C#-based alternative, offering a familiar yet distinct approach for game developers.Stride's Rising Popularity 🔗It's been an exciting time for us. We've noticed more and more developers giving Stride a try, a trend clearly reflected in our growing user numbers. During the crazy Unity days, we were number 3 in the popularity rankings, just after Godot and Bevy. Also a big shoutout to gamefromscratch for his video &quot;Stride For Unity Developers&quot;, which definitely helped.The Heartbeat of Stride: Our Community 🔗What really makes Stride tick is you – the community. Your feedback, contributions, and ideas have been the driving force behind Stride 4.2. It’s your hands-on experience and insights that have helped shape this release, making Stride not just a tool but a community achievement.Addressing the Pace of Updates in Stride 🔗Let's talk about how often Stride gets updated. We know it's something on your mind, and that is why we want to explain the dynamics that influence it.The People Behind Stride 🔗Stride is maintained by a group of passionate developers, much like yourself, who contribute in their free time. This means our pace might not match that of other engines backed by full-time teams. Luckily we still have the original creator and lead of Stride among us to tackle tricky issues and infrastructure.Facing the Realities: Funding and Resources 🔗Here’s the deal: our funding levels shape how much we can do. We’re grateful for every bit of support we receive, but we’re still on our way to having a full-time development force. This financial reality does affect how fast we can roll out updates. Although we might not be the fastest out there, we focus on making each update meaningful.Funding and Resource Allocation 🔗Challenges in Distribution 🔗The pace at which we distribute funds is often perceived as slow. However, this is not from a lack of willingness but rather the challenge of finding the right talent for the tasks. Nonetheless, we are actively funding projects at this moment, focusing on enhancements in XR, introducing morph target capabilities for 3D models (aka Blendshapes), and updating the bindings for the Assimp 3D importer to Silk.NET.Call for Skilled Developers 🔗We are actively seeking skilled developers with experience in C#, the .NET ecosystem, mobile, XR, rendering, and game development. If you have these skills or know someone who does, we encourage you to get involved. There are opportunities to contribute to critical areas of Stride's development, supported by available funds.Join Us on This Journey 🔗We’re always excited to welcome new contributors to the Stride family. Whether it’s through code contributions, spreading the word, or donations, every bit helps us grow stronger. If you’ve got skills in .NET, Android, and iOS development, there’s a special place for you here. Support us on OpenCollective.The Impact of Your Support 🔗We believe that every donation has a substantial impact, perhaps more so than in some other projects. Why? Because C# as a language offers high productivity, and the Stride codebase has a great architecture. This means that every dime you contribute goes a long way.Imagine how much we could do if Stride got as much financial support as other big engines. With C#'s easy productivity and Stride's well-organized code, your donations could help us improve much faster. It's not just about keeping the lights on; your support can take Stride to new heights!Looking Ahead 🔗With your support, we’re optimistic about picking up the pace. Our goal is to bring you new features and improvements more regularly, making Stride even better with each release.What's New in Stride 4.2 🔗Stride 4.2 includes numerous enhancements and improvements. Here’s what to expect:.NET 8 Integration: Stride 4.2 is now fully aligned with .NET 8, harnessing its performance improvements and efficiency gains for game development. This means faster execution times, reduced memory footprint, and access to the latest C# features, making your development smoother and more efficient. Learn moreC# 12 Features: With C# 12, Stride users can write cleaner, more concise code thanks to new language features. These improvements reduce boilerplate and enhance readability. Discover C# 12Changed Assimp Binding to Silk.Net.Assimp: This update transitions the asset compiler's binding from C++/CLR to Silk.Net.Assimp, a move that not only simplifies the codebase but also paves the way for asset compilation on non-Windows systems, broadening Stride's accessibility. See the pull requestMigration NET6+ and More gettextnet#2: Stride's commitment to staying current with .NET versions continues, ensuring compatibility and leveraging the stability and features of the latest .NET environment across all aspects of the engine. Check out the updateEnable Multiple Profiler Consumers and Add a Timeline/Tracing Profiler: This enhancement introduces a profiler with chrome://tracing output format, significantly improving the debugging and performance tuning process by allowing for a more granular analysis of game performance. Explore the featureFeature: Add Support for F# and VB Project Types: Stride now welcomes developers using F# and Visual Basic, offering support for code-only projects in these languages. This opens up Stride to a broader audience. Learn about F# and VB supportStride Diagnostics Analyzer: This new tool provides immediate feedback within your IDE, identifying potential compatibility issues with Stride's serialization system. It's about making your development process smoother and helping you catch and resolve issues faster. Discover how it works, the docs page and here is the pull request.OpenVR Handle Custom Resolution Specified by the User Through VR Settings: Enhancing VR development, this update allows developers to specify custom resolutions for VR projects, optimizing performance and visual quality for various VR devices. See the detailsEditor Enhancements:Dynamic Snapping for Selected Objects: This feature introduces dynamic snapping while transforming objects, improving precision and workflow efficiency within the Stride Editor. Dynamic snapping PRAnimation Stack Selection for FBX Imports: Stride now allows you to select specific animations from a stack when importing FBX files, giving you more control over the assets you bring into your projects. Learn moreAutomatic Asset Copying to Resources Directory: To streamline asset management, the editor can now automatically copy imported assets to the project's Resources directory, ensuring your assets are always where they need to be. See how it worksFixes 🔗Although there have been many fixes, we'd like to point some of them out:Runtime rasterized fonts are broken #1750Game Studio doesn't reload sub projects after changes #1703Changing the comparison project related and not UPath related #1704Translations fix #1717C# Beginner Tutorial Build Errors #1652Can not create &quot;C# Beginner&quot; project #1650See the full list in the Release Notes.Exciting Development in Stride Physics 🔗Stride 4.2's release isn't just about what's in the box; it's also about what it enables for the future. A standout development in this context is the integration of a new physics package in Stride.Introducing Bepu Physics in Stride 🔗Our Discord community is buzzing with the news of Bepu physics, a project initiated by our user Nicogo1705.BepuPhysics v2 is a high-performance, multi-threaded physics library, written entirely in C#. Its compatibility with Stride's C# ecosystem offers the perfect alternative to the Bullet 3D physics engine, which relies on C++ Interop.With additional support from Doprez and Eideren, the efforts in integrating Bepu physics have already shown impressive results, especially in editor compatibility and performance. As you can see in this video, running on almost 10 year old hardware (yes, cube fountain included):Nicogo's YouTube channel features some more demo videos.GitHub: Nicogo1705/Stride.BepuPhysicsFuture Prospects and Disclaimer 🔗Currently an independent package, Bepu physics is charting a course towards deeper integration within Stride. While it stands as a potential future replacement for Bullet physics, the package is still evolving. Future updates may necessitate adjustments to projects using its current version. We encourage users to stay updated and adaptable as we continue refining Bepu physics with the community's support. The pull request can be found here: [Physics] Bepu integrationAlso good to know 🔗Although not directly tied to Release 4.2, we have some more big things going on.For instance to our website and documentation. We also had another community meeting to address all those new members.Website and documentation revamped and build process updatedContributor section moved to docsCommunity meeting October 2023And last but not least:Cross-Platform Evolution: The Stride Editor and Avalonia 🔗One of the most ambitious projects for Stride to date has started: The porting of the entire Stride Editor from WPF to Avalonia, a cross-platform C# UI library. This significant endeavor, undertaken by Kryptos-FR, a former Stride developer.Currently, the project is in the early stages but it not only anticipates making the editor compatible with Linux and MacOS but also aligns with the long-standing community desire for broader platform support and enhanced editor functionality, including a robust plugin system.More details in this pull request: Cross-platform editor rewrite - prototypeLinks 🔗GitHub: https://github.com/stride3d/strideWebsite: https://stride3d.net/Documentation: https://doc.stride3d.net/latest/en/manual/Twitter: https://twitter.com/stridedotnetYouTube: https://www.youtube.com/@Stride3DAcknowledgements 🔗We extend our heartfelt gratitude for all the hard work and donations we have received. Your generous contributions significantly aid in the continuous development and enhancement of the Stride community and projects. Thank you for your support and belief in our collective efforts.In particular we want to thank these donors:Long time Stride supporters 🔗VVVV🥇Platinum Striders 🔗Happenstance Games🏆Gold Striders 🔗Vašo ( Vaclav )🥇Lucid Silence Games🥇Skid Vis🥇This article was co-authored by Aggror Jorn and Tebjan Halm."
  },{
    
    "title":"Investigating SPIR-V for the shader system - Part 1",
    "excerpt": " In this first part of a new series of blog posts, we will learn more about Stride's shader system, its limitations and how to make it better thanks to...",
    "author": "Youness KAFIA",
    "date": "November 10, 2023",
    "category": "",
    "tags": "blog, search, .NET, Shaders",
    "url":"https://www.stride3d.net/blog/investigating-spirv-for-the-shader-system/",
    "content":"In this first part of a new series of blog posts, we will learn more about Stride's shader system, its limitations and how to make it better thanks to a very useful shader language called SPIR-V. This will be the first step in implementing a new and better shader system.Table of Contents:What are shaders? Rendering in game engines How does it work in Stride? The many problems shader systems are facing GPUs are all different Drivers are not all the same Performance Cost Why investigating SPIR-V? Summary The Stride engine has a powerful shader system, helping users build very complex shaders thanks to its language features like composition and inheritance, and its C# integration through the very powerful material system.What are shaders? 🔗Simply put, they are typically snippets of code that are run on the GPU, mostly written in C-like languages like GLSL and HLSL.When a game has to render on the screen, it starts by preparing the data on the GPU and then sends shaders with commands. The GPU then executes those commands and if everything goes well, the game ends with a lovely picture drawn on the screen. This single call of a GPU is called a draw call.It can be simplified to this view. There is a first stage called Vertex stage which is meant to compute vertices and make sure they are transformed into data that can be rasterized by your GPU, and a final stage called Pixel stage or Fragment stage that takes the rasterized output of the rasterizer and computes color for each pixel on the screen based on which triangles they belong to.In both stages, you can provide textures/images and data through buffers, this can help give more details to your rendering, or help you compute more complicated things.Rendering in game engines 🔗Drawing a single mesh is simple, one buffer of vertices, maybe some textures, do a draw call and ✨ marvel at the screen ✨. Repeat it many times and you get a video, very useful to make video games 👾.In game engines, objects being drawn the same ways are grouped into materials. A material can be seen as a recipe for drawing a mesh with ingredients like shader code, textures, vertices and other informations.Having many different materials implies creating many shader source code, and depending if you use forward or deferred shading, you might need to reuse code from one file to another leading to lots of duplicate code 👩‍💻👨‍💻.To solve this problem, all game engines have developed shader systems that help create permutations of shader code depending on the material you're using. It helps reuse code you've already written, which speeds up development and gives you the power to organize your code in more manageable ways.A good example of that are shader graphs from Unity or the material editor in Unreal, whenever you add a block/function to the graph, it reuses shader code already written, to create a new permutation.How does it work in Stride? 🔗Stride has its own shader language called SDSL which stands for StriDe Shader Language.SDSL uses a very smart system of composition and inheritance, similar to object oriented programming. You can learn more about it through the manual.The many problems shader systems are facing 🔗To create permutations you need to be aware of the many limitations you will face while writing code for GPU.GPUs are all different 🔗As obvious as it sounds, it needs to be reminded. Whenever you write code for your GPU you have to be aware that it will not work for all other GPUs.10 years ago, two languages were the most used for writing shader code: HLSL and GLSL. In the case of OpenGL, GPU vendors would provide you with their own GLSL compilers to work for their GPUs through different drivers. A valid code for one compiler would be a syntax error for another. It was a big mess 💩, but a manageable one!Stride was created during this period and it was designed to run on a wide variety of devices 🎮 🕹️ 💻 🖥️.The solution chosen for creating code permutations that could work on many different machine was transpilation. Text would be parsed in abstract syntax trees and the text would be translated from one language to another by manipulating those trees. To have a better idea of how abstract syntax tree work, this playlist of videos will definitely help.Drivers are not all the same 🔗Drivers can be seen as a front-end API to use the GPU. They have different paradigm and logic which may result in your shader code needing to be different across different drivers.Here's a table of which language is supported by which machine depending on the driver used. I chose the most used machines for gaming.Note that some APIs are tied to the machine you're developing for, adding more complexity to the shader system, needing to handle GPUs that have very specific features. Vulkan and OpenGL can be used on Mac and iOS but OpenGL is deprecated and Vulkan run on MoltenVK, a Vulkan implementation on top of Metal. Direct3D Vulkan OpenGL Metal PSGL NVN Windows/XBox HLSL HLSL/GLSL GLSL Linux HLSL/GLSL GLSL Mac/iOS HLSL/GLSL GLSL MSL Android HLSL/GLSL GLSL Playstation 4/5 PSSL Nintendo Switch HLSL/GLSL GLSL ? Performance Cost 🔗Managed languages like C# are well known to be slower with string objects since they treat them as immutable. On top of that, tree structures, especially the one used for shader compilation in Stride, tend to perform very slowly and are prone to be slow and work against the GC.Why investigating SPIR-V? 🔗Three things happened in the past 10 years:Vulkan was released with a new kind of bytecode shader language called SPIR-V.NET Core introduced a new high-performance feature for operating on slices of array (something that C# is way better at than processing string objects), namely Span&lt;T&gt;Most importantly, tools like SPIRV-Cross and Naga were created as a means to translate shaders through SPIR-VIt was clear for everyone that we had to investigate how we could compile SDSL to SPIR-V and use all those very performant tools to transpile SDSL to other languages.SDSL is a very peculiar language and shifting from processing tree structures to processing segments of byte code is a great endeavor, especially for an engine.The following parts of this series of blog posts will focus on how such a system can be created, thanks to the many new C# and .NET features that came out since the release of .NET Core.Summary 🔗Embracing SPIR-V for Stride's shader system will hopefully empower us with a better control over the shader language but also improve performance for shader compilation 💪💪.Thank you for reading!"
  },{
    
    "title":"A closer look: Diagnostic Analyzers with Roslyn",
    "excerpt": " Let's take a closer look at the `DiagnosticAnalyzer` feature added in `Stride.Core.CompilerServices`. This feature offers real-time code analysis in your IDE, enhancing your workflow. ",
    "author": "Martin",
    "date": "October 23, 2023",
    "category": "",
    "tags": "blog, search, .NET",
    "url":"https://www.stride3d.net/blog/new-diagnostic-analyzers-feature/",
    "content":"Let's take a closer look at the DiagnosticAnalyzer feature added in Stride.Core.CompilerServices. This feature offers real-time code analysis in your IDE, enhancing your workflow.Table of Contents:What is a DiagnosticAnalyzer? What does it do? Example Why use it? Current State For Engine Developers Summary Stride continues to evolve, adding new utilities and features every week. This blog post will cover the newly added DiagnosticAnalyzer feature in Stride.Core.CompilerServices.What is a DiagnosticAnalyzer? 🔗A DiagnosticAnalyzer is a feature from Roslyn that scans your code while you are typing in your IDE. C# also utilizes this feature; every time you see a warning or red squiggly lines in your IDE, a DiagnosticAnalyzer gets triggered. Analyzers are offline tools used by the compiler to assist programmers. They are not used to collect telemetry on how Stride is being used.What does it do? 🔗The new Diagnostics primarily focus on Serialization. These analyzers generate warnings for code that is incompatible with Stride's Serialization Rules of Thumb.Each error code follows this format: STRDIAGXXX, where 'X' represents a numerical digit. Clicking on these error codes will open a help page that explains in depth why the DiagnosticAnalyzer was triggered and how to resolve the warning. You can find these error code pages here.Example 🔗In this example, we'll delve into a common scenario where the DiagnosticAnalyzer spots issues related to Stride's serialization rules. We have a Dictionary property named Name within a class Example. We've also adorned the Name property with [DataMember] and [DataMemberIgnore] attributes which are contradictory, and this is where the DiagnosticAnalyzer steps in to provide valuable feedback.public class Example{ [DataMember] [DataMemberIgnore] public Dictionary&lt;Example, int> Name { private get; set; }}Upon compiling, the DiagnosticAnalyzer flags three diagnostic warnings related to the attributes and the property's accessibility:STRDIAG000: There is an Attribute Contradiction on 'Name' Member. [DataMemberIgnore] Attribute on a [DataMember] is not supported. Except if it has also [DataMemberUpdatable] Attribute.STRDIAG009: The member 'Name' implements IDictionary&lt;T,K> with an unsupported type for the key. Only primitive types ( like int,float,.. ) are supported or string or enums as the Dictionary Key in asset serialization. When used in other contexts the warning may not apply and can be suppressed.STRDIAG004: The property 'Name' with [DataMember] does not have an accessible getter which is required for serialization. A public/internal/internal protected getter is expected.The following image demonstrates how these warnings are displayed in Visual Studio:These warnings provide immediate feedback, aiding the developer in adhering to Stride's serialization rules. The DiagnosticAnalyzer not only pinpoints the issues but also suggests the necessary adjustments to align the code with Stride's standards. For instance, it suggests the removal of the [DataMemberIgnore] attribute or the addition of a [DataMemberUpdatable] attribute to resolve the attribute contradiction on the Name member. It also highlights the requirement for an accessible getter for serialization, and informs about the supported types for the Dictionary key in asset serialization.Why use it? 🔗This real-time feedback is invaluable, making the coding process smoother and less error-prone, and ensuring that the codebase remains compliant with Stride's serialization standards.This feature aims to minimize those &quot;Why is my property not showing up in the Game Studio?&quot; moments. It's often unclear why certain properties don't appear in the editor. These analyzers are designed to clarify such situations, aiding your development process in Stride.Current State 🔗The pull request (PR) to introduce these analyzers has been merged. However, there hasn't been a release that includes them yet. If you're eager to test them out, you can build the engine from the source. Otherwise, you'll have to wait for the next release of Stride's NuGet packages.For Engine Developers 🔗Adding new analyzers to the Stride engine is straightforward. However, be aware that Visual Studio (VS) has a bug caused by .NET, which makes VS load Roslyn only once at startup. To work around this, compile Stride.Core.CompilerServices and restart VS after adding a new analyzer.Summary 🔗This is a new quality-of-life feature that simplifies development in Stride by providing immediate feedback on coding issues.Thank you for reading 📖, and happy coding 💻👩‍💻👨‍💻!"
  },{
    
    "title":"Community Meeting October 2023",
    "excerpt": " On October 7th, a community meeting was held addressing new user influx, planning the release of Stride 4.2, contingent on the .NET 8 launch. ",
    "author": "Aggror Jorn",
    "date": "October 07, 2023",
    "category": "",
    "tags": "blog, search, .NET, Meeting, Avalonia",
    "url":"https://www.stride3d.net/blog/community-meeting-october-2023/",
    "content":"On October 7th, a community meeting was held addressing new user influx, planning the release of Stride 4.2, contingent on the .NET 8 launch.Summary 🔗During this almost 3 hour long session we talked about the following: improving domain knowledge, access rights, and documentation, transferring the Stride Community Toolkit to the official repository, and community-driven initiatives like a new demo project and extending tutorials. Significant attention was given to a substantial editor rewrite from WPF to Avalonia for enhanced cross-platform support, opening it up for community contributions.Table of Contents:Summary Short summary of Contributor meeting Release of 4.2 Open Collective New projects New Demo project Community Toolkit Stride Plugins Stride UI Rewrite Acknowledgements Long time Stride supporters Platinum Striders Gold Striders Short summary of Contributor meeting 🔗A few weeks prior to the community meeting, we held a contributor meeting. This was mostly to address the recent instream of many new users. Since we suddenly got an abundance of user feedback we took and planned some steps.Inventorizing domain knowledge and access rights.This overview will be posted soon on GitHub.Moving the Stride Community Toolkit to the official Stride repositories.Investigating nightly/weekly/monthly builds and releases.The idea of having more frequent releases was discussed to provide users with the latest PRs and fixes, whilst also having more publicity.Concerns were raised about the potential impact on development velocity and the need for stabilization phases. As soon as the new build system (arranged by Xen) is up and running, we can decide on how often we make an official (minor) release. More on this later this year.Updating contributors' documentation.Next to the official documentation/tutorials, we also have various wiki pages per repository. Especially the documentation for Contributors and building from source, needs some love. Aggror is going to make an initial pull request for this.Planning and creating videos for contributors.Adjusting the strategy with OpenCollective Projects: here we came to the consensus that we required more feedback which we would gather during the community meeting.Release of 4.2 🔗Stride 4.2 is around the corner, but when exactly?For 4.2 we are waiting for the official release of .NET 8 which is to be release on November 14, 2023.Since we want to release a version for .NET 6 and .NET 8, our goal is to release within a few days after the release of .NET 8.Prior to the official release we will have a release candidate. This will be announced when it is available.At the moment there is 1 open bug and 1 open pull request for a feature. Other than that, the build is locked for features. Only bug fixes would be allowed inThe open pull request for Silk.NET. will be moved to 4.3 to ensure stability.For more info on the final items.Open Collective 🔗Next we discussed the use of Open Collective for donations and funding specific projects.Although not mentioned in the meeting, our current funding is 12,992.34 USD.Up until this point it has been quite a challenge finding the right developers for existing Projects. The most recent successfully funded Project was the Bug bounty for Vulkan fullscreen.There have been several suggestions to make funding more attractive, such as increasing compensation and investing in areas like documentation, marketing, and design next to coding Projects.Every project should have a referencing GitHub ticket that contains as much detail as possible for the deliverables.There are currently two talks ongoing for specific development. Once we have confirmation we will communicate this with the community.New projects 🔗We will add several new Projects to the Open Collective. This will give members a clear view on 'targets' that we like to see funded.Extending tutorials. Both written and video tutorialsNew tutorial set for a small 3D (platformer) gameContributor tutorialsDemo scene 2024 (more on this below)Stride editor Avalonia (more on this below)New Demo project 🔗We want to have a new demo sample project that demonstrates Strides capabilities. Members who want to help out, can add to the discussion here.Community Toolkit 🔗There is a new initiative called the Stride Community Toolkit, aimed at aggregating common features, helpers, and extensions to streamline Stride development. It allows community members to test and enhance tools and propose their integration into the engine. This project has come to fruition with the combined effort of several users, and specifically the repositories off dfkeenan and VaclavElias.Stride Plugins 🔗A topic talked about for several years now and it's quite an important one. Plugins allow you, for one, extend the editor with new functionality without having to build the engine from source. Ideally you want to go to some (NuGet) store and click -&gt; install this awesome extension/plugin for Stride.If you want to contribute to the discussion on how to do this technically.We can divide plugin support into 2 categories:Asset plugins: these would be purely models, textures, prefabs, componentsFor this Manio143 is taking the lead.Editor plugins: this category currently is not viable because of the dependency to another large topic: the need to rewrite the editor to a new library, replacing WPF.Since we are short on development time here, we need to take into account that it will be a while before we can see the first results of this.Stride UI Rewrite 🔗The Stride editor is built with WPF and therefore only works on Windows. WPF isn’t really being developed anymore and on top of that we want to start supporting the editor on Linux. We can only do so by rewriting the editor to another UI framework.Just like the Plugin topic, the Editor rewrite is a big topic. Probably the biggest topic of them all. The editor rewrite has been discussed in great lengths on both Discord and GitHub in the past few years. People have shared their ideas on which framework to use (Avalonia, MAUI, Uno etc), made some prototypes, even ported the Stride launcher. But we never really ‘actively’ made this an official item since it would take a full time developer many months to work on this task.Members have been asking if they can help out with the rewrite, but up until this point, there wasn't really an official starting point. We also don’t want to waste the prototype/knowledge already collected. That is why we will soon have an official GitHub branch in the Stride repository where all Editor UI rewrites are taking place. We are fully aware that this might take a long time and a lot of effort from multiple people, but we have to start somewhere. We also anticipate that we can use some of the OpenCollective funding for this.So regardless of time/developer power: we have landed on using the Avalonia UI framework to rewrite the editor. Aggror will set up a GitHub topic summarizing how people can contribute to this UI rewrite branch and inventorize how we can split this massive task into subtasks.. More details on this will follow later this year.Acknowledgements 🔗We extend our heartfelt gratitude for all the recent donations that have been made. Your generous contributions significantly aid in the continuous development and enhancement of the Stride community and projects. Thank you for your support and belief in our collective efforts.In particular we want to thanks these donors:Long time Stride supporters 🔗VVVV🥇Platinum Striders 🔗Happenstance Games🏆Gold Striders 🔗Vašo ( Vaclav )🥇Lucid Silence Games🥇Skid Vis🥇"
  },{
    
    "title":"A closer look: Setting private members in the editor",
    "excerpt": " Let's take a closer look at why currently you can't set private members of scripts and components in the Stride Editor and explore the options to change that in...",
    "author": "Marian Dziubiak",
    "date": "September 21, 2023",
    "category": "",
    "tags": "blog, search, .NET, Education",
    "url":"https://www.stride3d.net/blog/closer-look-private-members/",
    "content":"Let's take a closer look at why currently you can't set private members of scripts and components in the Stride Editor and explore the options to change that in the future.Table of Contents:What is public and what is private Design vs runtime access Editor runs your code directly Serialization What about constructors? What about init properties? UnsafeAccessor in .NET 8 Summary It has been an amazing week for Stride and our Discord is booming with new people who want to learn more about the engine and maybe port some games from Unity. One of the questions that has been asked a few times was why we can't set private members on scripts in the editor. I thought it's a good opportunity to dive a little deeper into the technical reasons and engine architecture to explain the current limitation and explore the options to change it in the future.What is public and what is private 🔗Let's run through a quick reminder. In C# members are annotated with access modifierssuch as public, protected or private. The modifier describes the access objects of other classes will have when accessing the members. It allows us to control the API surface of an object by hiding away certain aspects of its state to allow the inner implementation to be changed without affecting other parts of code that would only interact with the publicly visible members.To understand it better read this analogy.When designing systems we will often decide to make certain things public (maybe even use an interface to further describe the public API regardless of the class holding the methods) and keep most things private. This allows us to prevent accidental mistakes when another part of the systems makes changes to some delicate state.However, with a more Data Oriented approach we can find ourselves creating classes which hold mainly data. In many Entity Component System implementations the components are just data bags that systems read and update. With this kind of approach there's rarely need for private members, although sometimes the internal visibility is used for data on a component that is exclusively managed by its default system.Moreover, component's public properties are often not just modified at design time, but also at runtime. Think about the Transform component and how it's public properties are modified to move the entities around, or how changing the velocity on a Physics component affects how quickly the simulation will move it around on the next step.Design vs runtime access 🔗We can talk about components in two contexts: setting the properties during level design in the editor and setting them at runtime while the game is running. We would generally expect in both cases that we can modify the properties of the component and they will be picked up by the processing system.With the introduction of Scripts, however, which are components containing logic, we get into a bit of a pickle. Yes, the script should be able to have private state and a public API for other components to interact with it. What if we want to restrict some data so that it can only be set once during initialization? Ideally the editor would not be constrained to modify the property during design, but once we hit the runtime it should be allowed to change.Editor runs your code directly 🔗In Stride when you create a script in your project and open the project in the editor, the project will be compiled, the DLL loaded into memory of the editor, and when you add the script to an entity it will actually create a new instance of your script class. Same as at runtime.It won't run the script Update method, but if you have any logic in your property getters and setters those will be invoked at design time. This can give you enormous flexibility. But it also means that however you want your script to behave at runtime when it comes to properties the same will be enforced at design time.The editor uses reflection to access properties and fields on your script. It technically could modify private fields on the object instance it holds during design. But this needs to survive saving the project to disk.Serialization 🔗Stride uses YAML for design time serialization of Assets. The assets can have a different form from the actual Content they are compiled to by the AssetCompiler. This is used for example by Audio or Model assets which at design time just hold a reference to your media files, but once compiled actually hold the bits of your media in a format that's easy to consume by Stride's runtime.For components and scripts rather than having a second class for each component and doing compilation from design to runtime representation, those classes are the same in both scenarios. This simplifies things but it means that serialization constraints need to be applied equally.While YAML is very flexible and the serializer currently uses reflection to set the properties, the runtime serialization is done using a custom binary serializer system. When you compile your game project, after C# compiler has done its job, the build system runs the AssemblyProcessor over your code to generate efficient serializer classes that do not use reflection to access members on the objects they deserialize.Access modifiers are enforced by the CLR, which means it's not possible to generate code that accesses private members of another class directly.What about constructors? 🔗If we have a private field that we want to set once, why don't we use a constructor to accept a value for it? It's certainly an option and there are serialization systems which look at constructors to provide deserialization in this way. They may be a bit more complicated but it's possible to implement them.However, in a generic environment that Stride provides it's a bit difficult. How would the editor create a new instance of your class if it requires data to be passed in the constructor? Will it provide default values, will it look for a private parameterless constructor?What about init properties? 🔗C# 9 has introduced init properties which are only allowed to be set at object construction. Reflection is able to bypass that of course, while at the CLR level a special marker modreq is placed on the property which asks the compiler to provide modreq marker on the callsite as well (see thread). Compilers which don't know about init properties would still prevent you from assigning them. And the CLR is not actually enforcing anything here - only compiler - thus the generated serializers are still able to use those properties.But in your code the constraint will be enforced and no runtime modification will occur after the object is initialized.public string MyProperty { get; init; }UnsafeAccessor in .NET 8 🔗As we're trying to squeeze out more performance and improve the Stride codebase we're looking at rewriting the AssemblyProcessor from Mono.Cecil and manually emitting IL into a Roslyn C# source generator. This will also mean being restricted to whatever the compiler enforces, such as not setting init properties outside of object construction.Luckily in .NET 8 there's a new performance hack which allows you to access private fields on other classes. You can read about it more in the proposal and on the performance blog.[UnsafeAccessor(UnsafeAccessorKind.Field, Name = \"_myField\")]extern static ref string _myField(MyClass c);Summary 🔗There might be some extra work needed to implement the changes to allow setting private members in the editor. At the moment using init properties is nice a middle ground.While in my opinion designing clear public APIs for components in a data driven approach is the way and it doesn't need access to private members, there's many users who see value in being able to use private members to their advantage and it's on the editor and engine to provide flexibility of choice in how you structure your code.Thank you for reading 📖, and happy coding 💻👩‍💻👨‍💻!"
  },{
    
    "title":"Unity's Licensing Changes: Discovering Stride, a Community-Driven Open Source Engine",
    "excerpt": " Explore the key differences between Unity and Stride, a C#-based, open-source game engine powered by .NET 6 (soon .NET 8). Learn how Stride's flexibility and native .NET support offer...",
    "author": "Vaclav Elias",
    "date": "September 14, 2023",
    "category": "",
    "tags": "blog, search, .NET",
    "url":"https://www.stride3d.net/blog/embracing-open-source-stride-as-an-alternative-to-unity/",
    "content":"Explore the key differences between Unity and Stride, a C#-based, open-source game engine powered by .NET 6 (soon .NET 8). Learn how Stride's flexibility and native .NET support offer a unique development experience.Table of Contents:Introduction to Stride Difference Between Unity and Stride Licensing What games were made using Stride? Operating System Support IDE Support .NET Hot Reload Support Multiplayer Support Unity Assets Screen Capture Shaders Available Build Automation Add-ons and Extensions Transformations Rendering Gamepads Other Q&amp;A What is the Equivalent of a Coroutine in Stride? What is a StartupScript? Using Other Assemblies/Projects in Stride Is There an Asset Store for Stride? Null Checking in Stride vs Unity Where to Start How to Find Answers 🤝 Join Us: Stride Bug Bounties and Feature Funding 🛠️ Flappy Bird - Stride Engine Demo Closing Thoughts 🙂 Introduction to Stride 🔗Stride is not just another game engine; it's written entirely in C# and serves as a powerful platform in the .NET ecosystem. This unique focus on C# offers developers the native .NET tooling and functionalities they are already comfortable with. What sets Stride apart is its project structure; Stride projects are standard csproj files, allowing them to integrate effortlessly into your existing .NET solutions.Difference Between Unity and Stride 🔗Unity is developed by a large team and offers a feature-rich experience. On the other hand, Stride is open-source and built by community contributors.This means that Stride might not have all the features that Unity has, simply because there aren't as many people working on it. However, the open-source nature of Stride allows you to customize it according to your needs and provides a solid foundation for any rendering project.Additionally, Stride allows you to utilize any NuGet package and even provides access to the Main function of your game. You can also find useful resources such as documentation, community toolkits, and guides for migrating from Unity to Stride.Stride for Unity DevelopersLicensing 🔗Stride is released under the MIT license, which is important because it grants you significant freedoms to use, modify, and distribute the engine.What games were made using Stride? 🔗For examples of games developed using Stride, check out Made with Stride section.Operating System Support 🔗Editor: WindowsRuntime: Windows, Linux, macOS, Android, iOSIDE Support 🔗Stride games are &quot;standard&quot; C# projects, meaning you can use a variety of IDEs:VS CodeVisual Studio 2022RiderBlocknote + MsBuildVVVVNote: There's a Visual Studio extension for syntax highlighting, shader build keys and error checking.Note: Another extension offers syntax highlighting only..NET Hot Reload Support 🔗Stride has the capability of using .NET Hot Reload for C# scripts, allowing real-time code modifications as your game runs. Importantly, this feature is also available when editing the engine side, giving you even more flexibility. Standard .NET hot reload rules are in effect.This feature streamlines development by minimizing the delay between coding and observing results, enhancing both efficiency and ease of use. If you're familiar with .NET and C#, you'll find that Hot Reload in Stride feels intuitively familiar.Multiplayer Support 🔗Stride does not offer built-in multiplayer or Server/Client architecture. However, you can easily integrate any .NET networking library to implement these features. You have the freedom to choose from a variety of libraries and resources. For a curated list, you can check out Awesome-Stride's Networking section.Unity Assets 🔗You can import some 3D models from the Unity store into Stride. However, scripts will need modification since the two engines differ.These are the basic Scripting Differences:StartupScript is a MonoBehaviour without the Update methodSyncScript is a MonoBehaviour with an Update method that runs every frameAsyncScript is unique and runs asynchronouslyScreen Capture 🔗To capture a frame, you can use the following code snippet:var commandList = GraphicsContext.CommandList;commandList.RenderTarget.Save(commandList, stream, ImageFileType.Png);Shaders Available 🔗SDSL is a shader language written on top of HLSL.Shading languageShaderExplorerBuild Automation 🔗Yes, since Stride uses .NET, automating the build process works out-of-the-box.Add-ons and Extensions 🔗You cannot extend the editor in the same way as Unity, but you can create custom code extensions as seen in the following:Terrain add-onLevel editor add-onTransformations 🔗The TransformComponent class in Stride is a fundamental component for representing an entity's position, rotation, and scale within a 3D scene.Important Features:LocalMatrix and WorldMatrix: These matrices manage the transformations of the entity.Position, Rotation, and Scale: These properties represent the entity's position, rotation, and scale in the local coordinate system. The Position property is a Vector3, defining the entity's position. The Rotation property uses a Quaternion to represent the entity's rotation, and the Scale property is a Vector3 that sets the scale. You can modify these properties to transform the entity.UpdateLocalMatrix() and UpdateWorldMatrix(): These methods update the local and world matrices, respectively.Parent and Children: These properties allow you to establish parent-child relationships between entities, affecting their transformations accordingly.Rendering 🔗Stride primarily uses clustered forward rendering, with some additional features. Read more in the docs.Stride Rendering PipelineStride Graphics CompositorGamepads 🔗GamepadsOther Q&amp;A 🔗What is the Equivalent of a Coroutine in Stride? 🔗Unlike Unity, which uses IEnumerator for asynchronous code execution, Stride leverages C#'s built-in await and async features. This can be accomplished using AsyncScript, which essentially acts as a SyncScript (the Stride equivalent of Unity's MonoBehaviour) but with asynchronous methods. You can use async methods within sync scripts, the same as standard C#.What is a StartupScript? 🔗A StartupScript in Stride includes a Start method that is invoked when it's added to the scene tree. This is similar to Unity's Start or Awake methods. However, StartupScript does not contain Update methods and therefore doesn't execute code every frame.Using Other Assemblies/Projects in Stride 🔗In Unity, the packaging system is built on top of a csproj file, which allows Unity to protect its proprietary source code. Stride, however, grants you full access to your csproj and sln (Solution) files. This enables you to include any NuGet packages or other C# projects in the usual way, by adding project references. If you add a new subproject to your main project through the Stride editor, it will be correctly configured by default, including folder location and references to the Stride engine.Is There an Asset Store for Stride? 🔗No, Stride does not have a dedicated Asset Store. However, most additional libraries specially designed for Stride can be found on GitHub or NuGet. For easier discovery, a summary has been made available at Awesome-Stride.Null Checking in Stride vs Unity 🔗Does is null and == null work? Unlike Unity, which has overridden the Equals operator to be compatible with its C++ engine, Stride allows you to use is null and == null to compare the existence of an Entity or Component directly.Where to Start 🔗Getting started with Stride is easy, thanks to a wealth of resources available. Here are some you shouldn't miss:Stride's Manual: A comprehensive guide that covers everything from basic setup to advanced features.Stride's Tutorials: Step-by-step tutorials to help you get your first project off the ground.Discord: Join the community on Discord for real-time discussions and the latest updates.How to Find Answers 🔗Consider checking these platforms where your query may have already been addressed or where you can gain more context:Discord: Use the search functionality in our Discord channel to see if your topic has been discussed before.GitHub Issues: Navigate to Stride's GitHub Issues to see if your question is related to a known issue or feature request.GitHub Discussion: Participate in Stride's GitHub Discussions to engage with the community and explore various topics.This proactive approach not only helps you get immediate answers but also makes it easier for the community to focus on unresolved or unique queries.🤝 Join Us: Stride Bug Bounties and Feature Funding 🛠️ 🔗We invite talented developers to collaborate with us through our Bug and Feature Bounties. With tasks ranging from Vulkan support to decals and morph targets, there's something for everyone! Reach out via the specific GitHub Bounty tickets to get involved.📬 For suggestions on new bounties, don't hesitate to connect with us on our Discord server or directly through GitHub.Participating in our bug bounties is a win-win! Not only will you be able to hone your skills, but you'll also contribute to the expansion and enrichment of the Stride community—and get compensated for your efforts! 💰Stride's Open Collective ProjectsFlappy Bird - Stride Engine Demo 🔗Ned Reid, a new member of the Stride community, has created a Flappy Bird demo, while exploring Stride as an alternative to Unity. He shared the following thoughts on his experience: I decided a couple of days ago that I would explore engines outside of Unity (for obvious reasons), and wanted to start with something simple. Over a fairly relaxed weekend, I've managed to put together a neat little Flappy Bird clone!A screenshot of the Flappy Bird demo created by Ned ReidClosing Thoughts 🙂 🔗If you've made it this far, congratulations 🎉! You now have a comprehensive understanding of Stride, its capabilities, and how it compares to Unity. The world of game development is vast and ever-changing 🌍, but the emergence of community-driven, open-source engines like Stride showcases the exciting directions the industry is taking. With its C# focus 🎯, extensive .NET support 💻, and flexible licensing 📜, Stride is a formidable option for both new and experienced developers.As the saying goes, the best way to learn is by doing 🛠️. So dive in 🏊, start a project 🚀, and don't hesitate to participate in the community discussions on Discord or GitHub 👨‍💻👩‍💻. Your journey with Stride is what you make of it, and the resources and community are here to support you every step of the way 🤗.Thank you for reading 📖, and happy coding 💻👩‍💻👨‍💻!"
  },{
    
    "title":"Taking .NET Game Development in Stride",
    "excerpt": " Just a little reminder that Stride has been presented in a .NET Live! 🎥🎥🎥 [Vaclav](https://github.com/VaclavElias), [Tebjan](https://github.com/tebjan) and I participated in a .NET live session to showcase the Stride engine,...",
    "author": "Youness KAFIA",
    "date": "June 15, 2023",
    "category": "",
    "tags": "blog, search, Live",
    "url":"https://www.stride3d.net/blog/game-development-in-stride/",
    "content":"Just a little reminder that Stride has been presented in a .NET Live! 🎥🎥🎥Vaclav, Tebjan and I participated in a .NET live session to showcase the Stride engine, as well as some work done by users. Many questions were asked, and Manio answered many of them in the chat.Watch the .NET Live right here 🔗ContentHistory of the ProjectRoadmapWhat are some of the big game titles that folks would recognizeThe UIAdd Scripts to EntitiesIntegrating Stride into your projectsAdd InteractionShader System of StrideShader CodeShader LanguageThe most important questions answered 🔗In this live session, we answered the most important questions about the project, including how to use Stride and what it aims to be!Tebjan presented a bit about what contributors have done and what users (professionals/hobbyists, artists/developers) have done so far to show off the capabilities of the engine. He also gave a small presentation on how Stride is used with VVVV for 3D rendering!A fun experimentation 🔗Vaclav, having dived into Stride with a desire to use Stride without an editor, created an API to experiment and create games using just a NuGet package. He presents his NuGet package, explains how to use it, and how to make games leveraging the power of .NET and hot reloading!Shaders 🔗I've personally become interested in the shader system of Stride and found it refreshingly easy to use. I decided to show more about how to use shaders, update them, and extend the rendering engine of Stride.Closing 🔗We strongly recommend watching this live session, as it will help you gain a better understanding of Stride. .NET is becoming more and more relevant for a game engine, as evident with Stride. Don't hesitate to reach out to our community through the Discord server!"
  },{
    
    "title":"Announcing Refreshed Stride Website",
    "excerpt": " The Stride team is happy 🙌 to announce the release of our refreshed Stride website. We have been working on this for a while, and we are excited to...",
    "author": "Vaclav Elias",
    "date": "June 14, 2023",
    "category": "",
    "tags": "blog, search, Announcement",
    "url":"https://www.stride3d.net/blog/announcing-website-update/",
    "content":"The Stride team is happy 🙌 to announce the release of our refreshed Stride website. We have been working on this for a while, and we are excited to share these updates with you and hope you enjoy the enhanced browsing experience.The Motivation for the Update 🔗The Stride website has been around for some time ⌛. It was originally created using Jekyll. Over the years, we have added more content, but the website has not been updated for quite a while.Our main goal was to make the website future-proof and easy to maintain. We also wanted to improve the overall user experience and give it a more modern feel.What's New or Updated 🔗Improved consistency across pages, posts, and styling, offering an excellent reading experienceEnhanced content readabilityModern and simplified designUpdated static page generator: Eleventy 2.0 (previously Jekyll)Bootstrap 5.3 (previously Bootstrap 3)Font Awesome 6 (previously 4.4)Removal of old, unnecessary code, such as AddThis, Disqus, JQuery, and JavaScript librariesImproved website responsiveness (mobile, tablet, desktop)Content review and minor correctionsTags pageArchive pageEvery single page was reviewed and updated 🤯Dark Theme (Experimental)Search functionality now includes our documentation websiteGitHub Wiki was enabled for content contributors, containing information about the website structure, how to add new content, and how to contribute.This new update will enable us to share more content with you faster and more easily. We will also be able to add more features and enhance the overall experience. The Disqus comment widget has been removed from the blog posts, as we would like to encourage our readers to use GitHub Discussion or Discord. We are considering integrating the GitHub Discussions with the blog posts.What's next 🔗We will continue to improve the website and add more content. Additionally, we will be adding more features and further refining the overall experience.Our Stride website GitHub issue tracker is open for any suggestions or feedback. We encourage you to collaborate, create issues, and submit pull requests.Closing 🔗We hope you like the updated website.With this new release, we would like to encourage our community to contribute as well. Your experiences, insights, and knowledge are invaluable, and we would love to showcase them on our blog.If you have a topic, tutorial, or success story you'd like to share, we invite you to get in touch. By contributing, you'll not only help others in the community but also gain visibility for your work and expertise.Let's work together to make the Stride community even more vibrant and enriching."
  },{
    
    "title":"Stride 4.1 is Now Live",
    "excerpt": " Stride contributors are proud to announce a new release now running on .NET 6 supporting the latest C# 10. That means you can now head to the download page...",
    "author": "Aggror Jorn",
    "date": "July 16, 2022",
    "category": "",
    "tags": "blog, search, Physics, Tutorials, Release, Graphics",
    "url":"https://www.stride3d.net/blog/release-stride-4-1/",
    "content":"Stride contributors are proud to announce a new release now running on .NET 6 supporting the latest C# 10. That means you can now head to the download page and start developing your games using the latest .NET technologies.Stride On .NET Live Improvements Summary Improvement Details Dithered shadows for semi-transparent materials Physics constraints Physics optimizations Improved editor gizmos Intermediate tutorials Known Issues Integrated C# Editor A Little Help Contributors Financial contributors Stride On .NET Live 🔗We had the pleasure to be on a live stream with the .NET team! We gave an introduction, overview and some live demos:Improvements Summary 🔗Here's a non-exhaustive list of new improvements:.NET 6 support and VS 2022 pluginStride 4.1 leverages the power of .NET 6Support for C# 10Dithered shadows for semi-transparent materialsPhysics constraintsBullet constraints wrapped around in easy to use functionalityEditor gizmos for physics constraintsPhysics performance optimizationACES tonemapingFog image effectOutline image effectImproved editor gizmosC# Intermediate tutorials projectThis Open Collective sub-project was successfully funded by the community. All related video recordings are available on Stride's Youtube channel and the tutorials page in the documentation will also be update to reflect the new project.Many more minor fixes and quality of life improvementsFixed sample gameSimpler Procedural Model creationNew math signatures (1122, 1121, 1090)Dispatcher/threadpool improvementsAmbient Occlusion quality improvementAnd many other fixesImprovement Details 🔗Dithered shadows for semi-transparent materials 🔗Produces semi-transparent shadows by poking more and more holes in the shadow map based on the transparency of the object, shadow map filtering will blur those holes with their neighbor which will result in those partially opaque pixels.Physics constraints 🔗Stride's physics system Bullet comes with a set of constraints for you to use in your projects. These constraints are now all visible inside the editor, previewing the constraints using various editor gizmo.For more information on all the types of constraints, you can read up about them in the Stride documentation or watch the video below.Physics optimizations 🔗Retrieving collision and contact information was previously done by re-testing all components for collisions, which, as one might expect, led to awful performance for physics heavy scenes (could take up to and above 90% of the frame).Contacts are now lazily evaluated to reduce overhead when nothing ends up reading them. Users can now read and iterate over all collisions through Simulation.CurrentCollisions.Improved editor gizmos 🔗The old gizmos weren't very nice to look at, so this feature makes them look better and more user-friendly. It also changes how the rotation gizmo works and adds scale planes to the scale gizmo.This feature also updates the text on the CameraOrientationGizmo to be XYZ instead of right/left. Still prefer the old text instead of the XYZ coordinate? Don't worry, there's a setting under the viewport settings that swaps it back to the old text.Intermediate tutorials 🔗One of the first Open Collective sub-projects is the intermediate C# tutorials project. After discussion in community meetings and with various contributors donating directly to this project, the amount for this project to be included in Stride quickly became a realization.With Stride 4.1, you will be able to select the C# intermediate tutorials project as a new template project. The template project contains (at the moment of writing) 11 topics that every developer will want to have a look at.UI basicsCollision triggersRaycastingProjecting and UnprojectingAsync(hronous) scriptsScene loadingAnimation basicsAudioFirst person cameraThird person cameraNavigationEach tutorial has a video tutorial accompanying it, which can be found on Stride's Youtube channel. Below you can find the full playlist.Known Issues 🔗Integrated C# Editor 🔗The transition to .NET6 unfortunately broke the help tooltips and the code completion of the integrated C# code editor. But we decided to accept it for now, as everyone is using a proper C# editor anyways, such as Visual Studio, Rider or Visual Studio Code.The reason for the error is that RoslynPad, the underlaying library, also needs an update or fix. We'll address this in one of the upcoming minor version releases.A Little Help 🔗We, contributors, believe that Stride can help .NET game developers make the games they want with ease using their favorite languages. We want to make sure Stride offers the most comfortable environment for developing games, and this takes time and effort.Since the free and open-source release of Stride, the community has been growing slowly, so we have decided to open a fund to reward developers for any contribution they make to Stride. We set up an Open Collective page to manage our funds and allocate money for features that the community would like to see implemented.We have various bounties for bug fixes and features (Vulkan support, decals, morph targets, and many others). If you have or know someone with the skills to tackle those bounties, please reach out to us through the respective GitHub tickets. You can also contact us through our discord server or on GitHub to propose new bounties.Contributors 🔗Many thanks to all the contributors who have donated their time and skill by adding features, fixing bugs, managing the build pipelines, adding documentation, and reviewing PRs.Financial contributors 🔗Also, a huge thanks to the individuals and companies who contributed financially to our Open Collective!ORE System with a diamond sponsorshipxen2 Core contributor that donated a large portion of the previous Patreon back through Open collectivevvvv A visual live-programming environment for easy prototyping and development. It is designed to facilitate the handling of large media environments with physical interfaces, real-time motion graphics, audio and video that can interact with many users simultaneously. vvvv uses StrideVašoMitchel AlbertzBillIdeonellaSoul Ridernajak3dEiderenJorn AggrorMarian DziubiakYouness KAFIADavid ThunderclownChristian ClavetMarko ViitanenAaron Disibioz16IncognitoWalter HulsebosTheKeybladerJames RinkerztlBruno GarciaBanditRevolverEmmXSeleDreamsVignetteLongplay GamesRedberd36"
  },{
    
    "title":"Community Meeting February 2022",
    "excerpt": " The Striders discussed allocating their $4,220.48 USD budget for bug bounties and new features. Funding proposals include fullscreen Vulkan support, UI slowness bug research, Linux runtime support, decal support,...",
    "author": "Aggror Jorn",
    "date": "February 16, 2022",
    "category": "",
    "tags": "blog, search, Meeting",
    "url":"https://www.stride3d.net/blog/community-meeting-february-2022/",
    "content":"The Striders discussed allocating their $4,220.48 USD budget for bug bounties and new features. Funding proposals include fullscreen Vulkan support, UI slowness bug research, Linux runtime support, decal support, morphing target animation support, and embedding Stride into UI frameworks. Release 4.1 is in progress, and an Epic grant proposal is being prepared.Summary 🔗On February 16th, we held a whopping 2.5-hour community meeting covering various subjects.Summary Current Funding Funding for bug bounties Funding for features Release 4.1 Additional task for Xen2 Work in progress Epic grant Current Funding 🔗With a budget of $4,220.48 USD at the moment of the community meeting happening, we wanted to decide on whether to allocate money for bugs and new features. So a big thanks to all those who are donating to this project. In particular:ORE system💎VVVV🥇Vašo ( Vaclav )🥇Funding for bug bounties 🔗Fullscreen Vulkan supportGitHub ticketBounty: $200,- USDAggrorJorn will provide the texts for the bounty and once approved by other contributors/developers in the team, this will be updated on the Open Collective project for Bug bounties.UI slowness bugGitHub ticketA smaller $50,- USD bounty for more research on this bug. If it can be pinpointed what exactly is causing this, we can also estimate better whether it is worth spending more money on it.Depending on the outcome we might skip this bug and spend time researching/implementing a replacement UI.AggrorJorn will provide the texts for the bounty and once approved by other contributors/developers in the team, this will be updated on the Open Collective project for Bug bountiesFunding for features 🔗Linux runtime supportGitHub ticketRequires mores fleshed out details and deliverablesOnce that is done, we can decide on fundingEither fixed amount or use xx,xx amount per hour with a certain limit.New Open collective project Linux runtimeDecal supportGitHub discussion requires more deliverablesNew Open collective project Decals added and will be updated once deliverables are clear:]Morphing target animation supportGitHub discussion requires more deliverablesNew Open collective project Morhping Target added and will be updated once deliverables are clear:Embed stride into UI frameworksThere already is a work in progress PR that allows developers to specify a custom render context.New Open collective Project for Embedding Stride into UI frameworksSilk.NETNew Open collective project Silk.NETRelease 4.1 🔗Release notes wip are prepared by Eideren/Vaso/Yka.Final checks by Xen2: VS pluginAdditional task for Xen2 🔗Documentation needs to auto-release when Release branch is updatedAsk previous implementer of SPIR-V shader system if he is interested in new work for StrideWork in progress 🔗Code only project: will enter beta phaseWhen merged into Stride 4.2 beta, we will add an Open collective page for additional examples.C# Pong game example: finishing touches (sound)The following C# intermediate tutorials are written but not yet recorded:UI basicsBoth via the editor as well as entirely through codeScene loadingLoading/UnloadingReloading scenesChild scenesCollision triggersRaycastingAnimation basicsAudioSmall tutorial reallyNavigation meshes and pathfindingBoth editor as well as code only approachesSync vs AsyncDifference and 2 examplesEpic grant 🔗Yka and AggrorJorn have a look at Epic grant and make final proposal in the 3rd week of February"
  },{
    
    "title":"Community Meeting November 2021",
    "excerpt": " After a month on Open Collective, the Stride collective reached $1,984.31 USD and discussed funding for various projects. Plans for requesting an Epic grant are in progress. Ongoing development...",
    "author": "Jorn Theunissen",
    "date": "November 29, 2021",
    "category": "",
    "tags": "blog, search, Meeting",
    "url":"https://www.stride3d.net/blog/community-meeting-november-2021/",
    "content":"After a month on Open Collective, the Stride collective reached $1,984.31 USD and discussed funding for various projects. Plans for requesting an Epic grant are in progress. Ongoing development includes physics constraints, splines, and the upcoming release of version 4.1.Summary 🔗November 29th we had another commmunity meeting. This blog post summarizes the topics we talked about.Summary Sponsors A Month of Open Collective Preparing Request Epic Grant Other Action Items Ongoing Development Sponsors 🔗Started of with a thank you to all those who donated on the new sponsor platform: Open collective. In particular a big thanks to:Xen2, who decided that he wanted to contribute some of the Patreon money back in to the community.ORE system💎VVVV🥇Vašo ( Vaclav )🥇A Month of Open Collective 🔗After a month using the new sponsor platform, the Stride collective has reached a balance of $1,984.31 USD. We started discussing how and where the money should be distributed to. We want to do this with the help of Open collective 'Projects'. These projects are listed on Stride's Open collective page, and have their own tiers, targets and description. Users can sponsor projects directly instead of the main Stride collective if they want to.We have come up with several projects that need to be written out in more detail before we will add them to the Open collective page. All tickets below have a Github disscusion for more details.OC project: Bug bounties projectBefore starting on an issue, make it known on Github and Discord that your are willing to tackle the issue. It would be a shame if multiple people try to solve the same issue.Any PR to the Stride repo must be reviewed by a contributor and discussed if needed.Once a PR is reviewed and merged to the Stride repo, the submitter 60% of the bounty.The submitter receives the remaining 40% when stride release happens.Github DiscussionOC project: .NET 6 platforms supportIn order for proper support for macOs, we need hardware to test this on. Xen2 will look in to the hardware requirements for this.Github DiscussionOC project: Shader systemXen2 will gather info and budget requirementsGithub DiscussionOC project: Linux/macOS support'A rather large topic that require a lot of work is the the support for Linux and/or macOs. When worked out in more detail, it can be used in the plan for requesting an Epic grant. Subtopics to resolve:Runtime/3dBuild tools (able to msbuild a Stride project and have the asset compiler work on it) requirement: FBX/AssimpEditorGithub DiscussionPreparing Request Epic Grant 🔗For a while now we have been wanting to pursue the option of requesting an Epig grant. In order to do so however, we need to come up with a proper plan. The endgoal is to have a proper document explaining what we want to do, and how we plan to spend any given budget.AggrorJorn starts a github ticket where we gather info on the request to Epic. He will contact others for proof read and further info. Github DiscussionSome of the topics mentioned:Shader systemEditor rewriteMegascan IntegrationECS rewrite/Run Update() and Render() in parallelOther Action Items 🔗We close forum in December as there is almost no activity there. We want to utilize Discord and Github discussion for this. The forum will be read only but we will no longer refer to it from the website and Github.Use a Github project for remaining tasks: OverviewGithub ticket on a simple free community marketplaceGithub DiscussionA lot of people have made usefull components/utilities/art and other usefull assets for in Stride projects. Right now we don't have a quick and easy to import such assets in to an existing (editor) project.What we can do it is utilise the existing Nuget (tagging) system so that users can quickly add a component to their ongoing project in the editor.Documentation on the stride source/new comers tutorialYKA, Manio143 and Tebjan collect some info for a tutorial: Github DiscussionOngoing Development 🔗Manio143: finishing touches/documentation for Physics constraintsAggrorJorn: SplinesTrying to finish the base splines which could be integrated in to the Stride source. Other Spline based components should be added later, so that we can have a milestone finished.Some tricky stuff with custom translation gizmo's for controlling tangents in the editor are currently holding me back. If this isn't resolved quickly I will make a PR without this (nice to have) featureRelease of 4.1 only held back by final .NET 6 related fixes. After that Xen2 will prepare release. AggrorJorn will aid in blogpost release notes"
  },{
    
    "title":"Open Collective",
    "excerpt": " Stride has been using Patreon and Github sponsors for a while now. However, in the recent community meeting of october 1st it became apparent that these donation platforms don't...",
    "author": "Aggror Jorn",
    "date": "October 31, 2021",
    "category": "",
    "tags": "blog, search, Sponsor",
    "url":"https://www.stride3d.net/blog/open-collective/",
    "content":"Stride has been using Patreon and Github sponsors for a while now. However, in the recent community meeting of october 1st it became apparent that these donation platforms don't really suit all of our needs. Both Github sponsors and Patreon don't really show where the money is going.To solve this we have been looking at a different platform that allows us to communicate more openly on our expenses and where money will be spent. After some investigation and various registration and other formalities, we can now say goodbye to Patreon, as Stride will from now use the Open Collective platform.Summary 🔗Summary Open (Source) Collective Payments and Expenses Projects What's Next? Open (Source) Collective 🔗Open collective is similar to other sponsor platforms, but sticks out in the way it openly displays payments and expenses. Everything about it is open for everyone to see. Through various Tiers, people can sponsor the Stride game engine. Each tier will have its own reward(s). Some tiers for instance will have the reward that users are shown on the stride website as a thank you. This is being worked on.We also needed a good way to deal with payments towards contributors and any tax related activities that come with it. Open collective allows the Stride collective to join a so-called 'Fiscal host' which takes care of all of that for us, for a percentage of the money contributed. After some communication and verification on the Stride github repository we are now also officially connected with the Open Source Collective. The Open Source Collective has various open source projects under its wing: WebPack, VueJs, OBS, Babel, Bootstrap and many more.Payments and Expenses 🔗Every payment made to a contributor will always show up on the Stride's open collective. A Stride contributor can submit an invoice: for instance the cost of Google accounts or domain names. These invoices can be approved by the Stride contributors team. These are the same people that are active members of the Stride Contributors team on Github. Submitted invoices can be approved at any given time but allocating money for specific projects is done at the end of each month (or beginning).Projects 🔗The Stride contributors have the final call where all the collected money will be allocated too. This will be done with the help of Projects. This Open Collective feature acts as a sort of 'Ledger' where money can be stored until the time comes to pay the contributor(s) of a project. A project can have its own tiers and goals. Those projects could be all sorts of things: new engine features, research on new technology, high priority bugs or documentation. These kinds of projects will be discussed at community meetings to get the input of the Stride community. Here is an example project.People can also choose to donate to a specific project rather than the Stride collective in general if they want to. So if you only want to see your money being used for a specific cause, you are completely free to do so. You are more than welcome to do both of course. In the image below you can see an example of how money that has been donated to the Stride collective, has been partially allocated to a specific project.What's Next? 🔗We first want to see how this first month of the new platform goes. At the end of November/beginning December we will hold a new community meeting and we will discuss how things went and how we plan on distributing the donations.There are also some remaining tasks regarding the Open Collective that will be taken care of in the weeks to come:Setup webhook to DiscordSetup webhook to TwitterFully automate the website to show sponsorsFully automate the Github backers.md file with sponsorsWrite up blog on the entire process on how we spend moneyAdd open collective to sponsors.yaml on github"
  },{
    
    "title":"Community Meeting October 2021",
    "excerpt": " It has been quite a while since we had a community meeting with the Stride community. On the 1st of October 2021 we had a good 2 hour chat...",
    "author": "Jorn Theunissen",
    "date": "October 01, 2021",
    "category": "",
    "tags": "blog, search, Meeting",
    "url":"https://www.stride3d.net/blog/community-meeting-october-2021/",
    "content":"It has been quite a while since we had a community meeting with the Stride community. On the 1st of October 2021 we had a good 2 hour chat about various topics on the Stride game engine.Summary 🔗Summary Access Rights Roadmap Funding Stride 4.1 Remaining Topics Access Rights 🔗First topic was about clearing up access rights of the Stride source contributors and how this can be displayed better to the rest of the world.Github features a teams option, which is now free for open source projects. Xen2 made sure that those contributing to the engine are now part of the team on Github: https://github.com/orgs/stride3d/teams/stride-contributors. These contributors can review and approve pull requests in to the various stride projects (engine, website, documentation).When changes are merged into the website project and specifically the 'release' branch, an automated process will trigger the website deployment.Documentation is updated as well, although this is a manual process that needs to be triggered. Xen2 and Aggror will do some knowledge sharing in private, so that this process does not lie solely with xen2.Social media accessYoutube: xen2 and AggrorFacebook: xen2 and M0THTwitter: xen2 and AggrorRoadmap 🔗The roadmap on Github hasn't received an update in quite a while. The reason for this is that there simply is no capacity to pick up these kind of features like terrain editor, visual programming etc.What we see in the community is that various contributors work on useful features for their own games, and as a result these kind of features and bug fixes and up being merged in to the Stride repository.As a result it has now been decided that we no longer will use the roadmap on Github. At the moment of writing this blog, the roadmap has already been removed. If, in the future, we have more funding and capacity, we can re-introduce it again.Aggror will try to put out a blogpost once a month keeping the community up to date on features that community members are working on. This also requires some initiative from the community. So if you have something that you are working on, feel free to send a message to Aggror on Discord. That we can feature your screenshots, videos, PR's in a blogpost on the stride website.Funding 🔗There were 2 ways to contribute to Stride financially: Patreon and Xen2 sponsorship on his Github account.Both these donation services didn’t really give a clear overview where the money was being spent on.Sponsoring Xen2 on Github would specifically and only go to Xen2. On top of that there is no easy way to use this as a marketing tool.Only Xen2 had access to Patreon, making it another responsibility for him to:Post something interesting on Patreon (for which he has no time)Do tax related activities and payments.Because of the above, Stride's Patreon page will soon close (or already might be at the time of posting blog)Aggror will look into setting up a more open way of viewing where money from donations is being spent on. The idea here is to have a look at Open CollectiveAggror will present his findings to xen2. Once a decision has been made, the community will be informed..NET foundationStride has joined the .NET foundation. The .NET foundation offers to host various services on their Azure subscriptions. That means that a majority of the costs when it comes to hosting is taken care of for us.As a result of this, Xen will move various services from Digital ocean to Azure. This will reduce costs. Money that is gained from donations can be spent on bug bounties, features and documentation. Once we have a new donation mechanism in place, we will have another community meeting on how to distribute money.Aggror will also be included in the communication with .Net foundation.Xen2 gave a nice summary on the operating costs for various (web related)servicesAzure: used to be $50~$100 per month but now paid by .NET FoundationStackPath (CDN): $10 per month, can be moved to AzureGoogle Cloud Service: $5 per monthDigitalOcean: $30 per month (teamcity and forums server), can be moved to AzureGitHub: $40 per monthSome demo's use LFS. If .NET foundation were to cover those costs too, we could add additional demo's.SSL: used to be expensive but now free (auto renew let's encrypt or Azure)Domains: cheap, $10 per yearApplying for a grant with Epic, Microsoft etc.Although this is something that we want to pursue, we first want to have a new donation service in place. The next community meeting will cover this topic again.Stride 4.1 🔗Stride 4.1 is on its way, but when exactly and what can we expect this year?Stride 4.1 BETA will include the upgrade to .NET 6Stride 4.1 targeted around november/december 2021Although full Linux support is not possible right now, we will look at having the Linux runtime working again with Stride 4.1Aggror will start collect info for the release notesRemaining Topics 🔗For the remaining topics, we ran out of time, so these will be picked up at another community meeting."
  },{
    
    "title":"Stride 4.0 is Now Live",
    "excerpt": " Stride 4.0 is now out of beta, and the Xenko game engine has been renamed to Stride. This release brings Voxel Cone Tracing GI, .NET 5 support, flexible GPU...",
    "author": "Virgile Bello",
    "date": "February 01, 2021",
    "category": "",
    "tags": "blog, search, Release, Tutorials",
    "url":"https://www.stride3d.net/blog/release-stride-4-0/",
    "content":"Stride 4.0 is now out of beta, and the Xenko game engine has been renamed to Stride. This release brings Voxel Cone Tracing GI, .NET 5 support, flexible GPU instancing, Vulkan improvements, and new documentation and tutorials. The Stride team is also welcoming new developers to contribute to the engine's development.Stride 4.0 has been around for a while, but it's now time to remove the -beta tag!Many thanks to the community and all the contributors who made this release possible!Summary 🔗Summary Xenko is now Stride! Voxel Cone Tracing GI .NET 5 Flexible GPU Instancing Graphics API: Different Selection Mechanism + Vulkan Improvements Documentation &amp; Tutorials New Developers are Welcome! Xenko is now Stride! 🔗The Xenko game engine has been renamed to Stride. From now on, all source code, blogs, and tutorials will use the name ‘Stride’ instead of ‘Xenko’.Here is the new logo:More details available on the dedicated blog post.Voxel Cone Tracing GI 🔗Thanks to a substantial contribution from Sean Boettger and sponsored by David Jeske, Stride now supports Voxel Cone Tracing GI!Here it is in action:As you can see, there are many customizations and settings available in the editor:There's a documentation page explaining how to set up the project with Voxel Cone Tracing GI.Here's the original forum post and pull request. Thanks again for this great contribution!.NET 5 🔗Stride editor and toolchain is now running with .NET 5! Runtime has been working with .NET Core for a few versions already.This allows us to have scripts and custom assets in a project targetting .NET Standard 2.1 or .NET 5.If you have scripts or custom assets in a .NET Framework project rather than a .NET Standard project, you can still choose between .NET 5 and .NET Framework within the launcher:The framework will also be displayed in the Game Studio toolbar for easier identification while both coexist..NET Framework version can be considered deprecated and will likely be removed in a future release (likely 4.1) to allow us to take full advantage of C# 8.0 and soon-to-come C# 9.0.We also expect dropping .NET Framework and supporting only .NET 5 will greatly simplify our installation process since we won't depend on specific workloads or packages of Visual Studio being installed anymore. This was a recurring issue with our users.Flexible GPU Instancing 🔗Aka geometry instancing. Thanks to another big community contribution sponsored by vvvv, Stride now supports GPU instancing per model.The nice thing about it is, that it plays together with the entity-component system: Simply add an Instancing component to an entity with a model. Then you can choose between 3 ways of how you generate the instances:EntityTransform, uses the transformation of other entities with an Instance component. This allows you to add components like physics, audio, etc. to each instance.UserArray, for providing an array of matrices via scriptUserBuffer, for providing a structured buffer (GPU resource) of matrices via scriptUserArray and UserBuffer even allow you to specify how the matrix is multiplied with the parent transformation.It even works with skinning:Picking individual instances in Game Studio works as well and selects the entity with the respective Instance component.There are also two new entity templates for easy setup:An example project that shows the new features can be found here: StrideTransformationInstancingGraphics API: Different Selection Mechanism + Vulkan Improvements 🔗There's been a big overhaul on Stride build system to make Graphics API selection work in a more future-proof way.It was previously relying on the custom RuntimeIdentifier being set in the solution. This didn't work very well because it was completely orthogonal to the existing RuntimeIdentifier, and sometimes not having good fallbacks.From now on, the user project will use StrideGraphicsApi in the .csproj project file to specify the graphics API. We hope to expose this in the editor later.We also took the opportunity to improve the state of Vulkan renderer (thanks to a switch to Vortice.Vulkan bindings from Amer Koleci) and automatize graphics unit tests, currently running for D3D11 and Vulkan.It's still a work in progress so expect more in future releases.Documentation &amp; Tutorials 🔗The first 10 C# beginner tutorials are recorded and uploaded to the official Stride Youtube channel. You check out the playlist here.These videos are the video equivalent of the existing online documentation for the C# beginner template tutorials and the 'new project' template when creating a new project from the Stride launcher.The C# beginner series should be fully recorded by the end of July 2020.After those videos are done, Jorn will put his focus on the C# Intermediate project template. Here a is work in progress screenshot on the raycasting tutorial:New Developers are Welcome! 🔗The Stride GitHub repository has more closed pull requests than open issues. This is a good sign! But in order to move faster and adapt to new technologies, we would be very happy to see more new talents in our friendly and professional developer community.There are several good reasons to join us:Writing engine code in C# is fun and quite productiveStride users will work with what you createWe are happy to help, should you get stuckYou can learn a lot, the Stride code base is very professional and has high-quality standardsAn open-source contribution is a great addition to your portfolioNo matter whether you (or someone you know) can contribute documentation updates, UI improvements, bug fixes, or new rendering technologies, we welcome everyone!"
  },{
    
    "title":"VL.Stride Released by vvvv",
    "excerpt": " We're excited to announce that vvvv has released a new 3D engine for vvvv, our visual live-programming environment for .NET. Named \"VL.Stride,\" it is essentially a wrapper around the...",
    "author": "vvvv",
    "date": "October 02, 2020",
    "category": "",
    "tags": "blog, search, Announcement",
    "url":"https://www.stride3d.net/blog/vvvv-releases-VL.Stride/",
    "content":"We're excited to announce that vvvv has released a new 3D engine for vvvv, our visual live-programming environment for .NET. Named &quot;VL.Stride,&quot; it is essentially a wrapper around the Stride engine and can be used independently from the Stride Game Studio.Read more about the release and its details in this release blog post.Note that vvvv's focus is not on creating games but rather on creative coding and interaction design style of applications. But due to its live-programming nature, using a state hot-reload approach, it may still be interesting for you to quickly prototype some functionality for your games. Also vvvv can help you explore all the different parts of the Stride engine and understand how they work together. Being able to touch all parts while they are running, allows to get an overview faster than just going through Stride's documentation.We'd like to invite you to play with it and hear your feedback. vvvv is free for non-commercial use, no strings attached. So please just go ahead, download vvvv gamma 2020.3-preview and let us know what you think!NODE20 🔗If you're already convinced and want to learn more about vvvv, join us for 30 online workshops covering various topics, we're running during the NODE20 - Forum for Digital Arts from October 3rd to 8th.To give you an idea, the following workshops will be using VL.Stride:Introduction to vvvv, VideoFX &amp; CompositingRealtime graphics with Stride 3D – The FundamentalsPatching MaterialsBeyond Sound and VisualVL.Stride DeepdiveA preview to ShaderFXWorking with the Stride GameStudioAs you can see, with vvvv we're quite invested in Stride. We bow before everyone who helped to make it what it is today and want to do our best to contribute our share to give it a bright future.Yours, vvvv."
  },{
    
    "title":"Community Meeting May 2020",
    "excerpt": " On May the 8th we held another community meeting in the Discord. Its main goal was to talk about the ongoing work on Stride and its first official release...",
    "author": "Jorn Theunissen",
    "date": "May 08, 2020",
    "category": "",
    "tags": "blog, search, Meeting",
    "url":"https://www.stride3d.net/blog/community-meeting-3/",
    "content":"On May the 8th we held another community meeting in the Discord. Its main goal was to talk about the ongoing work on Stride and its first official release after the rename to Stride.Summary VVVV and VL.Stride Sponsoring and gold members Links Summary 🔗Official Stride 4.0 release. The plan is to release Stride 4.0 officially within the next 2 weeks. It depends a little on whether .Net 3.1 is going to be part of it. If this can be done within reasonable time than we rather incorporate this into the official release of 4.0The release notes will be written in a more friendly way.Aggror will look into making a video regarding the release as well as some of the new key features like VXGI cone tracing.Xen2 has filled in the application for joining the .NET Foundation, a non-profit organization (NPO). At the moment of writing this blog, no response to this yet.Roadmap The GitHub roadmap will be updated. From now on it will only contain features that Xen2 or others will actively work on. This means some epics will be removed from the roadmap, and some new ones will be added. The epics that are removed will still be visible as requests in Github issues.There is now a stride tag on gamedev.stackexchange (tag might be changed to stride-engine soon btw). We can use this site for Q&amp;A and additional &quot;How to? questions. https://gamedev.stackexchange.com/questions/tagged/strideDocumentationRecording of C# beginner video tutorials is ongoing. Videos are listed on the official Stride Youtube account. Basically, every page will have an accompanying video. The playlist is being updated on the go.Started making the C# intermediate tutorial section.Continuation of the editor video tutorials once the programming tutorials are up to speed again.Some people showed interest in working on a community showcase demo for Stride. A new discord channel #showcasing-team was created.VVVV and VL.Stride 🔗User Tebjan explained some more about VVVV and VL.Stride.Here is a short overview of what we at vvvv are doing and will release somewhen this year:What is vvvv gamma?vvvv gamma is a live programming environment for .NETVL is our visual programming language that works with every .NET assemblyDevelopment, compilation and state hot-reload at runtime, we believe this is the future of software developmentYou can see the data while you developCan export .NET executablesMore info and download at: visualprogramming.netWhat is VL.Stride?Stride will be our 3d rendering library of choiceWe are working on making the Stride features available as convenient nodes in vvvv gammaHigh-Level nodes for: Mainloop, Windowing, Scene Graph, Materials, Models, Textures, etc.Low-Level nodes for: Drawing API, Visual Shaders, Vector Math, etc.Load a Stride project at runtime and use all content of itYou can see dev captures at: vl-xenko-3d-engine-update-3We actively support the Stride open-source community and financially support the Stride development: vvvv-meets-xenkoSponsoring and gold members 🔗We welcome our new gold sponsor David Jeske. We would also like to thank him for contributing the work on VXGI last year. He is using Stride for one of his projects.OUTDATED: As off November 2021, we will use Open collective.Also, a friendly reminder, that if you sponsor Stride through Github, the reward is doubled by Github.You can also still sponsor through Patreon.Links 🔗In case you missed them, here are the new links that you should be using:Github: https://github.com/stride3d/strideWebsite: https://stride3d.net/Documentation: https://doc.stride3d.net/latest/en/manual/Twitter: https://twitter.com/stridedotnetYoutube: https://www.youtube.com/@Stride3DIf you have any further questions, feel free to reach out on Discord or the forum."
  },{
    
    "title":"Xenko Has Been Renamed to Stride",
    "excerpt": " The Xenko game engine has been renamed to Stride. From now on, all source code, blogs and tutorials will use the name 'Stride' instead of 'Xenko'. ",
    "author": "Jorn Theunissen",
    "date": "April 20, 2020",
    "category": "",
    "tags": "blog, search, Announcement",
    "url":"https://www.stride3d.net/blog/xenko-has-been-renamed-to-stride/",
    "content":"The Xenko game engine has been renamed to Stride. From now on, all source code, blogs and tutorials will use the name 'Stride' instead of 'Xenko'.Why the name change? New Stride Logo What does this mean for you? What's next? Final Notes Why the name change? 🔗Changing product names always is a lot of work and comes with some downsides. However, we would not do this if there weren't any good reasons for us to do so. Since 2019, xen2, has been trying to affiliate Xenko with the .NET Foundation, a non-profit organization (NPO).There are various reasons for this:We wanted to let the community know that Xenko is completely and 100% free and open in its development. This also means that any donations should always be made 100% visible to the public. This also includes what and where the donation money is spent on. Joining the .NET Foundation would aid in visualizing how this money would be spent.Being able to tell possible investors/backers/companies that Xenko/Stride can be trusted. This can help with publicity and more funding.They also provide help for opensource projects in various areas.This sounded great, but unfortunately, there was a massive drawback to this: as long as the project kept the name 'Xenko' (trademarked by Silicon Studio), it would be difficult to transfer to the .NET Foundation. After a lot of back and forth between Silicon Studio legal department, xen2 and the .NET Foundation, we didn't get any step closer to achieving our goals.After several months without progress, we started to suggest the idea of a rename to the community. In the Discord server, we opened up the name change and logo suggestions to see how people would react and what their suggestions would be.About 6 months later, several polls, logo proposal and a lot of brainstorming, we settled for the name: Stride.New Stride Logo 🔗The new Stride logo, designed by sebl (from schnellebuntebilder), was chosen after a process managed by Eideren consisting of several community votes. Also, tebjan is the one that came up with the name Stride. Many thanks to them, as well as to all the other people involved!Without further ado, here it is:Game Studio will use a red variant:What does this mean for you? 🔗The Xenko launcher will ask to install Stride launcher.Stride will be available starting from version 4.0 (available shortly). This rename also applies to all websites, social media and documentation. It is possible that the name Xenko or its logo might still be drifting around somewhere in a screenshot here and there, but those will eventually be removed.Stride 4.0 can opens Xenko 3.1 projects and convert them automatically. Please don't forget to properly backup your projects, and report any issues you have during the automatic upgrade process.What's next? 🔗Release Stride 4.0 within the next few daysA new application to join the .NET FoundationA new effort to find new backersThe new Youtube channel will be the new hub for video tutorials. We will start with recording videos for the C# beginner section. After that, we will look at new editor video tutorials and extend the C# tutorials.Here are the new links that you should be using:Github: https://github.com/stride3d/strideWebsite: https://stride3d.net/Documentation: https://doc.stride3d.net/latest/en/manual/Twitter: https://twitter.com/stridedotnetYoutube: https://www.youtube.com/@Stride3DFinal Notes 🔗We would like to thank each and everyone involved in the long process of picking a new name, a new logo and other related media/art. A huge shoutout to xen2 for doing the renaming process."
  },{
    
    "title":"Recap January 2020",
    "excerpt": " Stride is changing its logo due to similarity concerns with substance/adobe's logo. The community is invited to submit new designs for the Stride logo. Meanwhile, the 3.2 release is...",
    "author": "Jorn Theunissen",
    "date": "February 03, 2020",
    "category": "",
    "tags": "blog, search, Meeting",
    "url":"https://www.stride3d.net/blog/january-2020-recap/",
    "content":"Stride is changing its logo due to similarity concerns with substance/adobe's logo. The community is invited to submit new designs for the Stride logo. Meanwhile, the 3.2 release is approaching, and the engine's rename to Stride will follow. Check out the community projects BanditRevolver and AggrorJorn for inspiration.A New Logo for Stride 3.2 Release Community Picks Project Draco from BanditRevolver Rollerghoaster from AggrorJorn A New Logo for Stride 🔗We decided to contact substance/adobe at the start of January after seeing that many people felt that the most voted community logo for Stride was too close to theirs. We received a reply from their legal team which, of course, told us that we would need to change it. It's the legal team, playing it safe is part of their job. They also told us that we could get in touch with their design team, we took that opportunity and sent multiple emails but they never got back to us.Proposals are open again so if you think you have a logo that would fit with our new name (Stride), please fill in the picture attached below with your design. There’s also the Figma project 6 if you would rather work on that. For more information see the forum post.3.2 Release 🔗We are getting close to the 3.2 release. We hope to share some info on that soon. In the mean time we are also getting ready for the rename to Stride. This will happen after the 3.2 release.Community Picks 🔗Check out these community projects that people are working on: BanditRevolver and AggrorJorn.Project Draco from BanditRevolver 🔗Rollerghoaster from AggrorJorn 🔗"
  },{
    
    "title":"Recap December 2019",
    "excerpt": " Happy new year everybody. In this blog we do a quick recap of the final developments of Xenko in 2019 and what the community has been up to. ...",
    "author": "Jorn Theunissen",
    "date": "December 31, 2019",
    "category": "",
    "tags": "blog, search, Meeting, Graphics",
    "url":"https://www.stride3d.net/blog/december-2019/",
    "content":"Happy new year everybody. In this blog we do a quick recap of the final developments of Xenko in 2019 and what the community has been up to.What is being worked on? 🔗The latest new features are being finished for the release of 3.2. This version should be released near the end of January.Community Meeting 3 🔗On December 18th we held another community meeting. Check here for the summary. The most important thing here is that we are getting ready for the rename.Stride Logo 🔗With 'Stride' being the new name for Xenko in the near future, the #logo-change Discord channel has been seeing a lot of suggestions and even a voting on some of the ideas from the community.Community Picks 🔗Check out these awesome projects that community members have been working on:Testing Xenko by MentalArray 🔗Testing the Xenko game engine took only a week to do this that included learning the scripting system and all model building and texturing was really trying to figure out animations and happy with resultFog of war from Jarmo 🔗This is a fog of war system written for Xenko.Github project"
  },{
    
    "title":"Community Meeting December 2019",
    "excerpt": " On December the 18th we held a community meeting in the Discord. Its main goal was to talk about the logo, roadmap and ongoing work on Stride. ",
    "author": "Jorn Theunissen",
    "date": "December 18, 2019",
    "category": "",
    "tags": "blog, search, Meeting",
    "url":"https://www.stride3d.net/blog/community-meeting-december-2019/",
    "content":"On December the 18th we held a community meeting in the Discord. Its main goal was to talk about the logo, roadmap and ongoing work on Stride.Final Stride logo deadline: 22 december 2019With the current amount of developers and resources, larger features like features are simply not possible. Features like cross-platform support, Visual studio Code, rebuilding the editor for Linux, Terrain and vegetation.If you have any programming skills and want to help out, have a look at the issues on github.Roadmap 3.2 - Estimated by end of January 2020New feature: Url ReferenceNew feature: HeightField property(optional) Debug Drawing(optional) LOD scriptRoadmap 4.0This version will cover the rename of Xenko to Stride.Activating the first social media accounts.Joining the .NET foundation to become an NPO.Git/Patreon donations will have to be evaluated depending on NPO requirements.Contacting Microsoft/Partners for support/sponsorship."
  },{
    
    "title":"Xenko 3.1 Released",
    "excerpt": " It took some time to stabilize everything with the new Xenko packages, but we now feel confident enough to release Xenko 3.1! ",
    "author": "Virgile Bello",
    "date": "November 11, 2019",
    "category": "",
    "tags": "blog, search, Release, Tutorials",
    "url":"https://www.stride3d.net/blog/release-xenko-3-1-0/",
    "content":"It took some time to stabilize everything with the new Xenko packages, but we now feel confident enough to release Xenko 3.1!Highlights Community Xenko 3.1 Loves NuGet! Package layout: following best NuGet practices Xenko assets are also distributed as part of package Xenko Packages are now distributed on nuget.org Xenko tooling resolves assemblies dynamically using NuGet API Future: plugin support for editor Full switch to .NET Standard Tutorials BulletSharp update Changelog Highlights 🔗One of the major change is turning the engine into modular NuGet packages, published on NuGet.org.Please note that Visual Studio 2017 is not supported anymore, please upgrade to 2019.Community 🔗Many thanks to the community and all the contributors who made this release possible: aggror, Eideren, alexb910, comradekingu, flabbie, CharlesWoodhill, Artaki, indigozero, dfkeenan, dominikjancik, erictuvesson, Hyperpred, louies0623, Lucifer2031, Ethereal77, mostafa901, Kryptos-FR, shinkitsunemaru, phr00t, Polymo, profan, xendez, Scorp-121, SleepyMode, tebjan, xen2, WhyPenguins, OoElectron, joreg, meriaizen86, rgawry, SantosSi, xwellingtonx, SilentCLD, HoSeCoin, Swann Martinet, WaldiS and pansan.Xenko 3.1 Loves NuGet! 🔗Xenko was always a big proponent of NuGet: since first version, Xenko was distributed as a NuGet package.However, due to limitations (hello packages.config and project.json!), we were leveraging NuGet more as a distribution medium than proper NuGet packages: Xenko 3.0 is still a monolithic single package and it would not work out of the box when referenced from Visual Studio without using Xenko Launcher and Game Studio.Xenko 3.0 paved the way by making Xenko compatible with the new project system (game projects were referencing Xenko using a PackageReference).Today, Xenko 3.1 brings Xenko as a set of smaller NuGet package, each containing one assembly, with proper dependencies:As a result, it is now possible to create a game project that references only the packages you want. Here are a few examples of &quot;core&quot; packages:Xenko.Engine: allows you to use core engine runtime (including its dependencies)Xenko.Core.Assets.CompilerApp: compile assets at build timeXenko.Core.Mathematics or Xenko.Graphics: yes, if you want to make a custom project only using Xenko mathematics or graphics API without the full Xenko engine, you can!Xenko.Core.Assets, Xenko.Presentation or Xenko.Quantum: all those piece of tech being used to build Xenko tooling are also available for reuse in other projects. Nothing prevents you from generating assets on the fly too!Then, various parts of the engine are distributed as optional packages:Xenko.PhysicsXenko.ParticlesXenko.UIXenko.SpriteStudioXenko.VideoIf you don't reference those packages, they won't be packaged with your game either. In many situations, it will result in a smaller packaged game and improved startup time.Also, you will be free to replace those functionalities with alternative libraries.Package layout: following best NuGet practices 🔗Previously Xenko references were added to the project using custom targets.New packages are now be layout as NuGet/Visual Studio expects them, in folders like lib/net45 and lib/monodroid10.We still have a few custom MSBuild targets but reduced them to minimum.Xenko assets are also distributed as part of package 🔗NuGet packages have a xenko folder containing Xenko assets. As a result, user are able to generate nuget package containing Xenko assets out of the box from Visual Studio and publish them on NuGet for general consumption.Xenko Packages are now distributed on nuget.org 🔗With all those changes, it makes sense to stop distributing Xenko on our custom nuget server and use nuget.org instead.This will greatly reduce friction to try Xenko (any project would work out of the box in Visual Studio). This might also make our launcher completely optional in the long run.Xenko tooling resolves assemblies dynamically using NuGet API 🔗Tools such as GameStudio or Asset Compiler are distributed as NuGet packages. However, it won't bundle Xenko Runtime, which will simply be encoded as dependency.When running those tools, they are resolving Xenko runtime assemblies directly in the NuGet cache.This allows for distributing those tools as very small and easy-to-upgrade packages, avoiding file duplications. This is similar to what dotnet-cli is doing with deps file.This brings lot of technical challenges but should allow us in the future to be more flexible in the future to load the exact runtime and plugins that the user project reference rather than the one hardcoded with the tool.Future: plugin support for editor 🔗Xenko 3.1 editor will still be monolithic: editor support for UI, SpriteStudio, Video and other optional modules will be hardcoded.However, the target is to get rid of them as soon as possible, and treat them as what they are: plugins.Full switch to .NET Standard 🔗Xenko supports .NET Standard for most of its runtime assemblies.Xenko games can run on .NET Core for both Windows and Linux.Tutorials 🔗Xenko now has a tutorial section in the documentation!The first project “C# Beginner”, demonstrates 12 beginner programming concepts.Users will be able to select the tutorial template when creating a new Xenko project to practice and experiment with the code.Additionally, the code used in the project is directly referenced by the new documentation section which explains each individual tutorial level.The amount of tutorials, as well as intermediate and advanced tutorials, will be extended/added from now on.BulletSharp update 🔗Eideren worked on updating our old custom modified version of BulletSharp (the wrapper library we use for our physics engine).Things should be much easier to maintain from now on.Changelog 🔗This release also contains numerous improvements, bugfixes and new translations.Here is the full changelog in all its glory:Alex (1):Fixed spelling error in Quaternion.cs view commitAllan Nordhøy (9):Added translation using Weblate (Norwegian Bokmål) view commitAdded translation using Weblate (Norwegian Bokmål) view commitAdded translation using Weblate (Norwegian Bokmål) view commitAdded translation using Weblate (Norwegian Bokmål) view commitTranslated using Weblate (Norwegian Bokmål) view commitTranslated using Weblate (Norwegian Bokmål) view commitTranslated using Weblate (Norwegian Bokmål) view commitTranslated using Weblate (Norwegian Bokmål) view commitTranslated using Weblate (Norwegian Bokmål) view commitAndrea Aruta (6):Added translation using Weblate (Italian) view commitAdded translation using Weblate (Italian) view commitAdded translation using Weblate (Italian) view commitTranslated using Weblate (Italian) view commitTranslated using Weblate (Italian) view commitTranslated using Weblate (Italian) view commitCharles Woodhill (1):[UI/INPUT] Expose mouseOverElement view commitChristian Georgiev (2):Added translation using Weblate (Macedonian) view commitTranslated using Weblate (Macedonian) view commitCody Lee (4):Added issue templates for bugs and feature requests (#327) view commitMoved pull_request_template.md to correct location view commitRemoved any pluralization of the word question in the question_request.md for consistency view commitUpdated CONTRIBUTING.md and added a 'submitting changes' section view commitDaniel Keenan (2):Change the ObjectToTypeName value converter to give prettier C# names. (#400) view commit[GameStudio] Improve &quot;Add component&quot; button usability. (#411) view commitDominik Jančík (6):Initial SDL Finger Multitouch support view commitRemoved lastCtrl field view commitFingerSDL GUID view commitFingerSDL PointerID generator view commitRenamed FingerSDL to PointerSDL view commitSDL Touch&gt;Mouse synth. disabled when PointerSDL is used view commitEideren (55):Include nuget to proj view commitStraightforward changes view commitPotentially harmful changes view commitMinor proj update view commitMatrix conversion fix view commitMain conversion done, next up the rest of the CharacterComponent view commitCharacter component, waiting on bullet wrapper for the rest view commitStatic mesh base view commitStatic Mesh: Update shape factories view commit[Core] ThreadPool: shutdown idle threads (#302) view commit[Samples] Misc camera controller fixes (#359) view commitFix for #422 view commitRevert nugget view commit[Bullet] Update libs view commit[Bullet] Update projects mapping view commit[Bullet] Remove bullet refs within mathematics view commitMerge branch 'master' into bulletsharp_nuget view commit[Bullet] Rely on our bullet for math conversions view commit[Bullet] Finish height field mappings view commit[Physics] Remove unused enum and previous namespace import for inlining view commit[Bullet] Update all platforms to latest libs view commit[Physics] Reduced physics test allocations (#443), cleaned up Simulation view commit[Physics] Implement ignore collision between two specific components view commit[Physics] In-editor static mesh collider view commit[Physics] Avoid duplicate allocations for colliders based on models view commit[Physics] Fix initial collider scaling view commit[Misc] Exception prone basic functions view commit[Transform] Deal with ChildrenCollection todo view commitMerge branch 'master' into bulletsharp_nuget view commit[Physics] Use asset cloner for shape desc view commitMerge remote-tracking branch 'origin/master' into bulletsharp_nuget view commit[Physics] Replace ColliderShapes' TrackingCollection view commit[Physics] Replace Rigidbody's hacky delegate usage view commit[Physics] Rollback unused serialization workaround view commit[Physics] Cleanup RigidbodyComponent view commit[Physics] Clarify comments in StaticMeshColliderShape view commit[Physics] Fix #463 view commit[Physics] Fix very large meshes throwing view commit[Physics] Expose Capsule's readonly data view commit[Physics] Provide read access to collider shape's data view commit[Physics] Split static mesh collider into new PR view commit[Physics] Fix ShapeSweeps output view commit[Physics] Provide public access to callbacks' recycle and buffer view commit[Physics] Clarify bullet lib's usage and sources view commit[Editor] Fix orbit editor camera stutter view commit[Editor] Re-order code execution view commit[SceneManagement] Assign Entity.sceneValue before firing events view commit[Camera] Fix processor's cameraSlotsDirty not being reset after process view commit[SceneManagement] Fix loop skipping items when collection is modified view commitAvoid unnecessary alloc view commitDeal with Add(), sub-optimal implementation view commit[Threading] ThreadPool refactor, reduce allocation, fix wrong argument view commitMove PooledDelegateHelper outside lock view commitSwap task factory view commit[GameSystems] Fix removing systems not clearing it from update and draw view commitEric Tuvesson (1):Assets Compiler Support MSBuild Toolset Version 16.0 (#421) (fixes #420) view commitFélix Dion-Robidoux (1):Update BACKERS.md view commitHyperpred (1):Remove cast to Game in AudioSystem (#472) view commitJarrett Robertson (1):Fixed issue with scene instance using the wrong collection in for loop count view commitLouies (10):Added translation using Weblate (Chinese (Traditional)) view commitAdded translation using Weblate (Chinese (Traditional)) view commitAdded translation using Weblate (Chinese (Traditional)) view commitAdded translation using Weblate (Chinese (Traditional)) view commitTranslated using Weblate (Chinese (Traditional)) view commitTranslated using Weblate (Chinese (Traditional)) view commitTranslated using Weblate (Chinese (Traditional)) view commitTranslated using Weblate (Chinese (Traditional)) view commitTranslated using Weblate (Chinese (Traditional)) view commitTranslated using Weblate (Chinese (Traditional)) view commitLucifer (8):Added translation using Weblate (Chinese (Simplified)) view commitAdded translation using Weblate (Chinese (Simplified)) view commitAdded translation using Weblate (Chinese (Simplified)) view commitAdded translation using Weblate (Chinese (Simplified)) view commitTranslated using Weblate (Chinese (Simplified)) view commitTranslated using Weblate (Chinese (Simplified)) view commitTranslated using Weblate (Chinese (Simplified)) view commitTranslated using Weblate (Chinese (Simplified)) view commitMario Guerra (10):Translated using Weblate (Spanish) view commitTranslated using Weblate (Spanish) view commitTranslated using Weblate (Spanish) view commitTranslated using Weblate (Spanish) view commitTranslated using Weblate (Spanish) view commitTranslated using Weblate (Spanish) view commitTranslated using Weblate (Spanish) view commitTranslated using Weblate (Spanish) view commitTranslated using Weblate (Spanish) view commitTranslated using Weblate (Spanish) view commitMoustafa khalil (1):Update README.md view commitNicolas Musset (10):[Localization] Update extraction script view commit[Localization] Update extracted strings view commit[Localization] Update Japanese view commit[Localization] Add French view commit[Build] Update solution and project view commit[Localization] Fix build for path containing spaces (#381) view commit[Presentation] Bugfix/int3 editor (#387) (fixes #383) view commit[General] Simplify editor and presentation project files view commit[General] Fixup rule for .xaml.cs files view commitUpdate .gitattributes view commitOscar Sanchez (9):Translated using Weblate (Spanish) view commitTranslated using Weblate (Spanish) view commitTranslated using Weblate (Spanish) view commitTranslated using Weblate (Spanish) view commitTranslated using Weblate (Spanish) view commitTranslated using Weblate (Spanish) view commitTranslated using Weblate (Spanish) view commitTranslated using Weblate (Spanish) view commitTranslated using Weblate (Spanish) view commitPhr00t (2):[Graphics] Vulkan: add support for R10G10B10A2_UNorm and R11G11B10_Float view commit[Input] Fix mouse VirtualButtons view commitPolymo (1):Translated using Weblate (German) view commitRobin Hübner (2):[Physics] correct userdoc for convex hull collider parameters. (#382) (fixes #372) view commitMake SDL window user resizable. view commitRui Mendes (3):Added translation using Weblate (Portuguese) view commitAdded translation using Weblate (Portuguese (Brazil)) view commitTranslated using Weblate (Portuguese) view commitScorp-121 (4):Added translation using Weblate (Russian) view commitAdded translation using Weblate (Russian) view commitAdded translation using Weblate (Russian) view commitAdded translation using Weblate (Russian) view commitScorp121 (10):Translated using Weblate (Russian) view commitTranslated using Weblate (Russian) view commitTranslated using Weblate (Russian) view commitTranslated using Weblate (Russian) view commitTranslated using Weblate (Russian) view commitTranslated using Weblate (Russian) view commitTranslated using Weblate (Russian) view commitTranslated using Weblate (Russian) view commitTranslated using Weblate (Russian) view commitTranslated using Weblate (Russian) view commitSleepyMode (1):[Mathematics] Fixes for Color/ColorRGBA float/byte mismatches (#258) (fixes #251) view commitSwann Martinet (2):Translated using Weblate (French) view commitTranslated using Weblate (French) view commitTebjan Halm (6):Quick fix as suggested by @xen2 in chat to avoid crash in shader compiler (#343) view commitAdded translation using Weblate (German) view commitTranslated using Weblate (German) view commitResetting shader key scope for multi pass materials (#456) view commitadded xenko-community-project to README.md (#514) view commitFix DataBaseFileProvider cast (#538) view commitVirgile Bello (510):[Design] VisualStudio.Project doesn't need a reference to Solution anymore view commit[Assets] Package can now also represent a csproj + package (only new game creation is working) view commit[Assets] Removed AssetItem.SourceProject view commit[Assets] Move assets to Assets folder for now view commit[Assets] Fix project loading view commit[Assets] Simplified Package.Profiles into Package.Profile view commit[Assets] Removed PackageProfile.ProjectReferences view commit[Assets] Removed PackageProfile.Name view commit[Assets] Allow creation of samples (as long as they don't use external packages) view commit[Assets] Added the concept of Package container (project or standalone) view commit[Assets] Turned Session.Packages into a readonly collection view commit[Assets] Properly process dependency graph using remote info to perform package upgrades before downloading nuget packages view commit[Assets] Removed LocalDependencies and fixed TemplateSampleGenerator view commit[Assets] Fix platform update view commit[Assets] AssetCompiler now works against .csproj view commit[Assets] Fixed asset compiler get-graphics-platform view commit[Assets] Fix view models to allow selection as current project view commit[Assets] Properly regenerate platforms for sample templates view commit[Assets] Ignore assets from executable projects (computed automatically) view commit[Templates] Moved template packs assets from Assets/Shared to Assets view commit[Assets] NewGameTemplateGenerator: assets were loaded twice, resulting in issues later with cloned AssetItem (fix asset packs) view commit[Templates] Simplify platform projects view commit[Templates] Moved templates packges asset folders from Assets/Shared to Assets and removed intermediate solution folders view commit[Assets] Adjust PackageProfile.ResourceFolders during package upgrade view commit[Templates] Sample Templates now works (asset packs are now ProjectReference and their assets are properly copied during template generation) view commit[Assets] Properly get namespace from project view commit[Assets] Fix CodeViewModel to use ProjectCodeViewModel view commit[Assets] Fix platform updates view commit[Assets] Rearranged templates for the new xkpkg = csproj change (note: project delete is broken) view commit[Assets] Package.Profile is now properly deserialized by discarding default value view commit[Assets] Removed PackageProfile.Platform view commit[Build] Make sure Package.Id stays is in sync with .sln one view commit[Assets] Removed Package.Id view commit[Assets] Removed PackageProfile view commit[Assets] Stop adding default folders in Package ctor view commit[Assets] Reunified ProjectState and PackageState view commit[Assets] Moved Package.Save() to PackageContainer.Save() view commit[Assets] Avoid creating .xkpkg for projects without one in the first place (use implicit one instead) view commit[Assets] Rework package dependencies view commit[Assets] Also support loading sln with new csproj Guid view commit[Assets] Support Packing and consuming simple NuGet packages with Xenko assets view commit[Assets] New game template: set current project to Windows view commit[Assets] Simplified NuGet package restore (only happens during PreLoadPackageDependencies) view commit[Assets] Update Code library template to match others view commit[Targets] Stop using XenkoDir.cache file during build view commit[Build] Bump to 3.1.0.1 view commit[Assets] Store pendingPackageUpgrades in PackageSession view commitMerge remote-tracking branch 'origin/master' into onecsproj_onexkpkg2 view commitMerge branch 'master' into onecsproj_onexkpkg2 view commit[Assets] Process dependencies for RootAssets in view model view commit[Assets] Made !file and !directory tags mandatory in Yaml for easier dependency analysis view commit[Assets] Temporary fixes for root assets and default scene opening view commit[Assets] Pack assets using actual package data rather than hardcoded rules view commit[Build] Reorganize build system (WIP) view commit[Build] NuGetAssemblyResolver WIP view commit[Engine] Move default assets to individual assemblies rather than global Xenko.xkpkg view commit[Assets] Compiler: can now properly compile existing projects view commit[Launcher] Fix launcher build view commit[Editor] Temporarily moved game studio shaders to Engine, until we have proper design-time package references view commitMerge branch 'master-3.0' into onecsproj_onexkpkg2 view commit[Build] Use RuntimeIdentifier to separate graphics API runtimes view commit[Build] Improved cross compilation view commit[Build] Renamed XenkoRuntime into XenkoNETRuntime view commit[Build] Added XenkoRuntime flag view commit[Assets] project.Type evaluation needs to be done after package are restored view commit[Assets] Reorganized templates view commit[Assets] Fix package upgrader view commit[SpriteStudio] Added templates view commit[Assets] Properly find ffmpeg.exe and msdfgen.exe view commit[Assets] Move VHACD to Assets assembly and properly bundle C# wrapper view commit[Assets] Compiler: use thread-safe version of NuGet (when writing lock file) view commit[Deps] Switched to NuGet version of Xceed.Wpf.Toolkit/Datagrid/AvalonDock view commit[Build] Bump to .NET 4.7.2 view commit[Build] Adjust bindings for System libraries with 4.7.2 changes view commit[Deps] Xenko.Metrics and Xenko.CrashReport are now packaged with NuGet view commit[Build] Lot of adjustments for new NuGet resolver system (incl ConnectionRouter, VS Package, etc...) view commit[Samples] Moved samples from Xenko.Assets.Presentation to a dedicated project to have faster rebuild view commit[Assets] Some improvements so that unit tests can compile view commit[Assets] Some improvements so that unit tests can compile view commit[Build] Removed XenkoDir environment variable view commit[Assets] Fixed templates to have proper assembly names and namespaces view commit[Build] Readded support for UWP view commit[Build] Readded support for Android view commit[Build] Readded support for iOS view commit[Build] Optimized ProjectReferences view commit[Build] Check Visual C++ Runtime is properly installed as part of build targets view commit[Build] Added Xenko.PackageInstaller to Xenko.GameStudio view commit[Build] Use &quot;XenkoPlatforms&quot; to specify which platforms to build view commit[NuGet] Upgrade to 4.9 and use RestoreRunner to have faster noop restore on second run view commit[Tests] Fix build of some test projects view commit[Build] Also deletes .nupkg.metadata on package auto deploy (https://github.com/NuGet/Home/wiki/Nupkg-Metadata-File) view commit[Build] Make sure user projects are always built so that compiler app is checking assets again (until we feed &quot;fast up to date&quot; with proper inputs/outputs) view commit[Assets] Make sure to explicitly include Xenko.Core for its targets until VS2019 enables it by default (https://github.com/NuGet/Home/issues/6091[#](https://github.com/xenko3d/xenko/issues/)issuecomment-438073285) view commit[Assets] Don't include package targets when evaluating project files view commit[Assets] Order windows executable project first in solution files (sln) so that VS uses them as startup project by default view commit[Build] Added some docs related to new build system view commitMerge remote-tracking branch 'origin/master' into onecsproj_onexkpkg2 view commit[Build] Fix iOS solution view commit[Build] Moved PackAssets task in Xenko.Core.Tasks view commit[Build] Use PackAssets as an exe rather than a Tasks so that MSBuild doesn't lock the files (annoying when rebuilding) view commit[NuGet] Log everything view commit[NuGet] Restore inside assembly resolver to avoid deadlock and rewrote logging code view commit[Build] Only build default graphics platform when opeining sln unless we explicitly set XenkoGraphicsApiDependentBuildAll view commit[NuGet] Perform nuget resolve only for entry assembly view commit[Assets] Better resolution of project platform (needed so that windows project is auto selected) view commit[Build] Fix build when choosing a single graphics API view commit[NuGet] Add dev store before trying to restore packets view commit[Build] Removed Xenko.xkpkg view commit[Build] Moved PackageUpdateVersionTask to a separate assembly to simplify build view commit[Build] Unify version management in a single file (except for samples which will be versioned separately) view commitMerge remote-tracking branch 'origin/master-3.0' view commit[Build] Added package details view commit[Build] Output nupkg in bin\\packages view commit[Build] Xenko.Samples.Templates: add missing dependency view commit[NuGet] If restore failed, try to kill known blocking processes (Connection Router, CompilerApp, etc...) view commit[NuGet] Improve logging if restore failed view commit[Build] Remove non-existing files from Xenko.sln view commit[NuGet] Use SourceCacheContext to avoid ArgumentException view commit[Build] Sign dll/exe when building package view commit[Build] Also sign Launcher executables view commit[Build] Escape/Unescape XenkoPlatforms for properly passing info from Xenko.build to targets view commit[Build] Package build improvements view commit[Build] Package build improvements (part 2) view commit[Build] Signing tool was mistakently always enabled view commit[Build] Package build improvements (part 3) view commit[Setup] Update to Advanced Installer 15.5.1 view commit[Build] Remove invalid character from Xenko.build view commit[Build] Fix Linux Vulkan build view commit[Build] Added bin/packages/.gitignore file view commit[Build] Fix restore phase in Xenko.build view commit[Build] Removed Xenko.SamplesBootstrapper and fixed Xenko.Samples.Tests view commit[Samples] Fixed Xenko.Shaders.Tests view commit[Build] Use active build configuration rather than forcing Debug view commit[Build] Stop using Bin\\Windows for unit tests view commit[NuGet] Couldn't resolve EnvDTE.dll view commit[Assets] Don't try to load vcxproj as package view commit[Samples] PhysicsSample: Update for Vector3 Gravity view commit[Tests] Xenko.Assets.Tests: Don't compile assets view commit[Tests] Fixed some unit tests view commit[Tests] Fixed folder for gold image view commit[Launcher] Ignore server-side dev packages view commit[Assets] Fixed TestBasicPackageCreateSaveLoad view commit[Assets] Package upgrade is now working for 3.0 projects view commit[NuGet] Update to NuGet 4.9.1 view commit[Launcher] Ignore invalid NuGet sources (404, 401, etc...) view commit[VSPackage] Fix build of test project view commit[Launcher] Bump to 3.0.1 view commit[Assets] User can now create GameSettings freely (need to display warning if nothing matching expected name?) view commit[CompilerApp] Removed unused GetGraphicsPlatform code view commit[Build] Removed obsolete target files view commit[Build] Xenko.build now properly build Launcher view commit[Build] Switching unit tests to new targets view commit[VSPackage] Fix Xenko.build targets view commit[Build] Clean packages before full package build view commit[GameStudio] Asset editors close button is back view commit[Graphics] Removed PreferredGraphicsPlatform from RenderingSettings view commit[VSPackage] Fix build when using multiple XenkoPlatforms view commit[Build] Adjust package versioning so that NuGetVersion doesn't contain build metadata view commit[Native] Explicitly require related Assembly when loading native library (we can't use GetCallingAssembly as it might be wrong due to optimizations) view commit[Native] PreloadLibrary: Use type rather than assembly (to avoid use of GetTypeInfo() everywhere) view commit[GameStudio] About page: added markdown files to package view commit[Launcher] Few fixes so that launcher properly separate view commit[GameStudio] About page: display version with build metadata view commit[Build] Force cross-targeting if there is multiple RuntimeIdentifiers view commit[Launcher] Stay compatible with Xenko 1.x/2.x view commit[Build] Properly fix how RuntimeIdentifier is used for multi graphics API per platform view commit[Assets] Solution file was generated with empty DefaultVisualStudioVersion view commit[OpenTK] Use win7 runtime rather than win view commit[Assets] Made DefaultVisualStudioVersion public again view commit[Build] Properly forward XenkoGraphicsApiDependentBuildAll view commit[Build] Workaround: Remove RuntimeIdentifier from Solution references (https://github.com/onovotny/MSBuildSdkExtras/issues/139) view commit[Assets] Make sure solution/project path use backslashes view commit[Particles] Remove ambiguities in data member order view commit[Assets] Keep solution folders, just remove package info view commit[Assets] Improve package upgrade when there is no ProjectReference view commit[Samples] Updated samples view commit[Samples] Removed Xenko.Navigation where not needed view commit[Samples] Removed Xenko.Physics where not needed view commit[Assets] Make sure implicit packages have IsDirty set to false when loaded view commit[Assets] Fix asset upgrade view commit[GameStudio] Fixed template samples generator to work with updated project format view commit[Samples] Updated with 3.1 (step 2) view commit[Samples] Keep Xenko.Particles for now, until we have better extensibility in Graphics Compositor view commit[Assets] Allow some assets to be non-referenceable (asset name collision is allowed in this case because they exist only at compile-time). This is used for scripts, otherwise they can't have same name as an asset. view commit[Assets] PackAssets: skip excluded files view commit[Settings] Remove the !file when serializing setting keys view commit[Build] Package necessary WindowsAPICodePack assemblies with Xenko.Core.Presentation.Dialogs view commit[Build] XenkoPlatform was not properly set for Linux platforms view commit[Assets] PackageUpgrader: react to multiple package names (to support renames and/or package splits in multiple parts) view commit[GameStudio] Improve default asset selection to match opened asset editors view commit[Assets] Compiler: Move default asset build path to obj\\xenko\\assetbuild view commit[Build] Changed dev/beta versioning to permit upgrading between interleaved dev and beta releases (betaXX.YYYY format with XX = asset version and YYYY = git height) view commit[Build] Generate ref folder for all platforms (otherwise Android/iOS/UWP might fallback to ref/netstandard2.0 of Linux) view commit[Build] Fix Android build due to lack of NuGetRuntimeIdentifier view commit[Templates] Remove the _Game from sample templates view commit[Build] Adjust PackageVersion for sample templates according to XenkoOfficialBuild rather than XenkoPackageBuild view commitUpdated BACKERS.md view commit[Launcher] Display source in tooltip for Xenko downloads view commit[VSPackage] Various fixes so that shader highlighting/goto works view commit[Build] Updated UWP to use uap10.0.16299 view commit[UWP] Simplified some code (can now use Thread and other newer API) view commit[Build] Hide Microsoft.NETCore.UniversalWindowsPlatform from references and update build doc view commit[Build] Fix Xenko.Shaders.Tests name view commit[Assets] New Game template was not properly copying asset package files view commit[GameStudio] Use same build folder for game studio as for actual game build view commit[Templates] Fixed Linux template view commit[Templates] Fixed UWP template view commit[Build] Use win instead of win7 runtime identifier view commit[Templates] Additional fix for Linux template view commit[Templates] Linux: adjust default runtime identifier view commit[Launcher] Various fixes for downloading and error reporting view commit[Launcher] Bump to 3.0.4 (3.0.3 was built with incorrect source changes) view commit[VSPackage] Fix NuGet assembly resolve (avoid infinite loop) and handle properly non-Xenko solutions (fixes #298) view commit[Editor] Properly report solution load/save exception to log view commit[Reflection] Rewrote part of AssemblyContainer to handle deferred loading view commit[Build] Updated to MSBuild.Sdk.Extras version 1.6.65 (compatible with VS2019) view commit[Build] Use $(RoslynTargetsPath) rather than $(MSBuildBinPath)\\Roslyn (which doesn't work with VS2019) view commitChange link+badge for chat from gitter to discord view commit[Build] Use netstandard2.0 version of OpenTK view commit[Build] Switch to netstandard2.0 wherever possible for the runtime view commit[Build] Switch game projects to use netstandard2.0 view commit[Build] Fix Windows+Linux build view commit[Build] Hide Microsoft.NETCore.UniversalWindowsPlatform from references and update build doc view commit[Build] Fixed build of RenderDocPlugin view commit[Build] Additional fixes for single 3d graphics API build mode view commit[Templates] Patching of TargetFramework section is now forcing netstandard2.0 view commit[Templating] Switch to latest version of Mono.TextTemplating (t4) and add reference to netstandard view commit[Build] Various fixes for .NET Standard build view commit[Build] Bump Android SDK version from 5.0 to 8.1 (Google Play recent requirement for new app and .NET Standard 2.0 also requires 8.0+) view commit[Build] Force references to be added only for direct and explicit package references view commit[Build] Properly forward XenkoGraphicsApi when building a single graphics platform view commit[Build] Make sure to override RuntimeIdentifiers on UWP otherwise it builds all CPU versions and result in write conflicts view commit[Build] Use &quot;any&quot; instead of &quot;win&quot; view commit[Build] Make sure &quot;win&quot; is the default when building a netstandard2.0 reference (to make sure a RID-specific project always use RID) view commit[Build] Define output path (otherwise using a Platform might override them) view commit[Build] Properly setup RuntimeIdentifier if it was not a Graphics-API-specific one view commit[Build] Pack Xenko assets as part of NuGet packaging view commit[Build] Fix the NuGet publish build file view commit[Build] Removed unnecessary solution references view commit[Build] Properly compute &amp; restrict RuntimeIdentifier for ProjectReference view commit[Build] Better detection of default RuntimeIdentifiers view commit[Build] Fix RuntimeIdentifiers detection for graphics API mode view commit[Build] Adjust RuntimeIdentifier and XenkoPlatform detection view commit[Launcher] Remove custom Http code and decrease concurrency (which might be problematic since our packages are bigger than average) view commit[Launcher] Switch from gitter to discord view commitUpdated BACKERS.md view commit[Launcher] Bump to 3.0.5 view commitUpdate Crowdin configuration file view commitUpdate Crowdin configuration file view commit[Launcher] Skip unlisted packages, and don't use cache view commit[Launcher] Also use normal output data for error output of PackageInstall.exe view commit[Physics] Enable PhysicsShapesRenderingService only if there is a IGraphicsDeviceService view commitUpdate BACKERS.md view commitMerge remote-tracking branch 'origin/master-3.0' view commit[Physics] Add comment for PhysicsShapesRenderingService creation view commit[Build] Added option XenkoPublishSkipSamplesTemplates view commit[Build] Adjust platform detection (broken for multiplatform) and preparations for OSX view commit[Build] Additional fixes for computing runtime identifiers view commit[Build] Further fixes for computing runtime identifiers view commit[Build] Run Visual C++ checks only on .NET Framework MSBuild view commit[Build] Additional setup for macOS build view commitMerge pull request #323 from Kryptos-FR/feature/l10n view commit[Build] Native: Generate only x64 for macOS (.NET Core only supports x64) view commit[Graphics] Update to SDL 2.0.9 view commit[Graphics] SDL: Load from proper directory view commit[Shaders] Added macOS glslangValidator view commit[Shaders] Vulkan: Add &quot;NoSampler&quot; to reflection view commit[Core.IO] Disable LockFile code from macOS (not supported) view commit[Core] Copy native libs for more platforms, and only if CopyLocalLockFileAssemblies is not set to false view commit[Build] macOS: Update NativePath to latest version view commit[Graphics] Update SharpVulkan (works on OSX and easier to access NativeHandle) view commit[Graphics] macOS: Added MoltenVK view commit[GameStudio] Added project template for macOS view commit[Localization] Use $(RoslynTargetsPath) rather than $(MSBuildBinPath)\\Roslyn (which doesn't work with VS2019) view commit[Samples] Templates: Added Cache to list of ignored folders (can be leftover from build during previous Xenko versions) view commit[Graphics] macOS: Updated MoltenVK view commit[Assets] PackAssets: Use proper asset path when computing resources relative paths (fixes #326) view commit[VSPackage] Upgrade version to 3.0.3. Add support for VS2019. New release needed since RestoreHelper.cs was updated (fixes #324) view commitUpdate license for 2019 view commitUpdate BACKERS.md view commit[Build] Copy .xml and .pdb from NuGet package references when using new csproj format view commit[VSPackage] Run VSIX installer only for VS2017+ (fixes #332) view commit[Build] Use latest version of Windows 10 SDK view commit[Build] Update requirements view commit[Build] Publish was not properly copying native libs and compiled assets (fixes #331 and #334) -- thanks to jazzay for the initial implementation view commit[VSPackage] Make ProjectReference between Commands and Package private so that it doesn't exist as a NuGet dependency view commit[VSPackage] Add TODO for restore log view commit[Build] Native: use vcxproj directly to avoid TRK0005: Failed to locate: &quot;link.exe&quot; or &quot;cl.exe&quot; (fixes #337) view commit[Build] Properly include install-prerequisites.exe next to Xenko.GameStudio packageinstall.exe view commit[Install] Prerequisites installer: improve error reporting and retries (i.e. UAC not clicked) when installing Visual Studio or Build Tools view commit[Install] Prerequisites: Update to VC++ 2017 prerequisites view commit[Install] Prerequisites: Add &quot;.NET Core 2.1 development tools&quot; to list of Visual Studio prerequisites view commit[Install] Prerequisites: Improve Visual Studio detection/update mechanism view commitUpdate BACKERS.md view commit[GameStudio] Switch to Roslyn 2.10 view commit[Assets] PackAssets: properly copy RootAssets (fixes #347) view commit[Assets] Perform null check before upgrading PackageProfile view commit[Assets] PackageSession: Properly fallback to AssemblyName if PackageId is not set view commit[Assets] Remove asset upgrader code for versions before 3.0 view commitExplain how CLA is to be signed. view commitUpdate BACKERS.md view commit[Build] NuGetVersion reported to TeamCity was wrong view commit[VR] Fix UWP build (#213) view commit[Build] Add XenkoBuildDoc parameter to force TargetFramework even if not specified (seems necessary for older version of Roslyn used in docfx) view commit[GameStudio] Add missing RoslynPad assemblies in the composition context view commit[GameStudio] Allow drag &amp; dropping of read-only assets (as long as they wouldn't be modified) view commit[GameStudio] CodeLibrary projects were not properly initialized (assets couldn't be created) view commit[Build] Sign packageinstall.exe view commit[Build] Include RoslynPad assemblies with Xenko.Assets.Presentation package view commitUpdate ContributorLicenseAgreement.md view commit[Build] Unlocking C# 7.3! view commit[Core.Design] AssemblyContainer: Process deps.json files (fixes #365, fixes #342) view commitMerge branch 'master-3.0' view commit[Physics] Fix ColliderShapeAsset upgraders (was previously enclosed in XENKO_SUPPORT_BETA_UPGRADE) view commitMerge remote-tracking branch 'origin/master-3.0' view commitMerge remote-tracking branch 'origin/master-3.0' view commit[Build] Add option -NoSymbols to nuget push view commit[Graphics] D3D: add support for using typeless textures view commit[Reflection] AssemblyContainer: return already loaded assemblies if AssemblyName matches rather than loading new one (it seems that assembly is requested several times because we are not loading in the proper load context) view commit[Build] runtime.json: fix spacing view commit[Build] Added new CPU-specific variants to runtime.json (#370) view commit[Build] Bumped LLVM to 7.0.1 view commit[Render] Decouple RenderParticleEmitter from ECS view commit[Render] Decouple RenderUIElement from ECS view commit[Render] Decouple RenderMesh and others from ECS view commit[Rendering] Remove various dependencies from lighting code to LightComponent view commit[Rendering] Removed SceneInstance dependency from rendering code view commit[Rendering] Removed dependency from VisibilityGroup to ShadowMapRenderView view commit[Rendering] LightSkybox: Removed obsolete comment view commit[Rendering] Moved RenderGroup class to Rendering namespace view commit[Rendering] PostFX: remove dependency to CameraComponent view commit[Rendering] ShadowMapRenderer: remove unused nested class view commit[Rendering] ForceAspectRatioSceneRenderer: Made default aspect ratio local to remove dependency to CameraComponent view commit[Engine] Moved IndexingDictionary to Xenko.Core view commit[Rendering] EffectSystem: Remove dependency to Game class and move EffectCompilationMode in the same namespace view commit[Rendering] EffectSystem: Moved CreateEffectCompiler in a separate static class outside of Rendering code view commit[Rendering] Made ForwardLightingRenderFeature not dependent on LightProcessor anymore view commit[Rendering] Made LightProbe code not dependent on LightProbeProcessor anymore view commit[Rendering] Made LightShafts independent from LightShaftProcessor view commit[Rendering] Fixed RenderContext.GetCurrentCamera() tag owner view commit[Streaming] Removed dependency on Engine.Game view commit[Rendering] Splitted most of low-level rendering code into a new Xenko.Rendering assembly view commit[SpriteStudio] Fixes for SpriteStudio to work properly again view commit[Rendering] Make Xenko.Rendering platform-specific view commit[TextTemplating] T4: use a custom version of Mono.TextTemplating, including https://github.com/xen2/t4/commit/0d0b6db3ca3aba82fd7597951be2361265043e5e view commit[Serializaton] Bump format version (Rendering split) view commit[Build] Bump to beta02 view commit[Build] Fix .usrdoc generation and copy (fixes #377) view commit[NuGet] Remove deleted xenko sources during startup to avoid restore failures (fixes #338) view commitMerge remote-tracking branch 'weblate/master' view commit[Localization] Added Russian as a supported language view commit[Localization] Added a few missing important translations (which were omitted for ApplicationCommands) view commit[CrashReport] Bumped crash report to 1.0.1 (force HTTPS), anonymize reports and make sure it doesn't conflict with NuGetAssemblyResolver view commit[Localization] Updated po files view commit[Build] Regenerated sln (which were invalid since Xenko.Rendering was added) view commit[Samples] Removed reference to RenderContext.SceneInstance (fixes #386) view commitMerge remote-tracking branch 'weblate/master' view commitMerge remote-tracking branch 'weblate/master' view commit[Localization] Only generated when building Release, and added Russian in Xenko.Editor view commit[Localization] Added support for German and Spanish view commit[Localization] Rearranged targets so that localization code is unified view commitMerge remote-tracking branch 'weblate/master' view commit[Localization] Added support for Chinese (Simplified) view commit[Setup] Don't delete top level installation folder if not empty (esp. if it was installed in a root folder containing other programs by mistake!) view commit[Launcher] Use cache but always refresh it, even when installing. view commit[Launcher] Set LauncherApp as default project view commit[Launcher] Bump to 3.0.6 view commit[Templates] Fix version in reference to Xenko.Samples.Templates package view commit[Rendering] Add Sprite to rendering only if it's enabled view commit[Rendering] Properly register Xenko.Rendering in AssemblyRegistry (fixes #409 and fixes #410) view commitUpdate BACKERS.md view commitMerge remote-tracking branch 'weblate/master' view commit[GameStudio] Fast-reloading for types such as Material and Texture were not working as expected, forcing a full model reload on every edit view commit[GameStudio] Fix for fast-reloading view commit[GameStudio] Rewrote and simplified code for fast reloading (also support cases such as material layers properly now) view commit[GameStudio] AvalonDock: Fix a bug in AvalonDock 3.4.0 which sets CanClose to false once a LayoutAnchorable is dragged into a new floating window or a new pane. view commit[Physics] CleanContacts was working on previousFrameContacts rather than currentFrameContacts, resulting in warnings &quot;Pair not present&quot;. Thanks @EternalTamago for the fix! (fixes #88) view commitUpdate BACKERS.md view commit[Graphics] D3D11: Begin/End were not reentrant because of how Query were used (#427 #428) view commitMerge remote-tracking branch 'origin/master-3.0' view commit[Audio] Encode little bit longer to compensate for encoding delay (fixes #350) view commit[Build] Make sure _XenkoGenerateDependencies runs in all situations (otherwise unit tests won't work) view commit[Build] Make sure _XenkoGenerateDependencies runs also for C++ projects view commit[Build] Readjust _XenkoGenerateDependenciesAfterBuild target/comments view commit[Build] Unit tests: use proper xunit.console.exe depending on x86 or x64 view commit[Tests] Fix sample games unit tests view commit[Samples] Fix Sprite Studio demo (missing reference to SpriteStudio runtime) view commit[Editor] Preview View Model was not properly removing event handlers (fixes #438) view commit[Launcher] Improve log/error message in an attempt to investigate #310 view commit[NuGet] Switch to NuGet 5.0 view commit[Build] Require VS2019 instead of VS2017 to take advantage of new NuGet buildTransitive feature view commit[Build] Removed obsolete props files view commit[Build] Update NuGet.exe to 5.0 view commit[Build] Update build instructions view commit[VSPackage] Update to new AsyncPackage and upgrade/cleanup unecessary PackageReference view commit[Build] Bump MSBuild.Sdk.Extras to 2.0.24 view commitMerge remote-tracking branch 'origin/master' into vs2019 view commit[AssemblyProcessor] Fix a case where ImportReference was not called for GetTypeFromHandle(). Bumped Cecil to NuGet 0.10.3 rather than custom one. view commit[Assets] Added a new KeepReferences flag to AssetCloner view commit[Build] Stop detecting Android NDK version using folder name (latest VS2019 uses &quot;ndk-build&quot; folder name without version) view commit[Build] VS2019 now understand WindowsTargetPlatformVersion being set to 10.0 rather than a specific version. Also bump PlatformToolset to v142 view commit[Build] Converted some design-time libraries to .NET Standard 2.0 view commitRevert &quot;[AssemblyProcessor] Fix a case where ImportReference was not called for GetTypeFromHandle(). Bumped Cecil to NuGet 0.10.3 rather than custom one.&quot; view commit[AssemblyProcessor] Fix a case where ImportReference was not called for GetTypeFromHandle(). view commit[Assimp] Added error details if something went wrong (and test if scene is null to avoid NullReferenceException). view commitMerge remote-tracking branch 'weblate/master' view commit[Build] Reorganized targets to more easily choose multiple graphics platforms at once. view commit[Build] Bumped sln to use VS2019+ view commitRevert &quot;[Build] Reorganized targets to more easily choose multiple graphics platforms at once.&quot; view commit[Build] Reorganized targets to more easily choose multiple graphics platforms at once. view commit[Build] Removed deprecated Android armeabi CPU architecture (fixes #461) view commit[Vulkan] Back buffer: add missing ViewType parameter (2D) when creating back buffer view commit[Build] Android: Bump TargetSdkVersion to API level 27 (matches VS2019 install and TargetFrameworkVersion set in csproj) view commit[Launcher] NuGet: 1 hour timeout instead of 100 seconds as a workaround for https://github.com/NuGet/Home/issues/8120 (fixes #310) view commit[Launcher] Bump to 3.0.8 view commitRevert &quot;[Assimp] Updated assimp to official 4.1.0 and updated references in projects (closes #458)&quot; view commit[Build] Removed armeabi libraries to completely fix #461 (fixes #470) view commit[Build] Android: unify all minSdkVersion to 16 and targetSdkVersion to 27 (fixes #469) view commit[VSPackage] Bump to 3.0.5 view commit[Physics] Renamed NewShapeFromDesc to CreateShape view commit[Launcher] Allow to select Xenko version view commit[Build] Bumped Cecil to NuGet 0.10.4 rather than custom one. view commit[Physics] Update README.md with new BulletSharpPInvoke repo location view commitMerge pull request #289 from Eideren/bulletsharp_nuget view commit[Physics] Fix typo in PhysicsEngineFlags.ContinuosCollisionDetection (fixes #152) view commit[Build] Properly copy back IntDir/OutDir to IntermediateOutputPath/OutputPath for C++ project view commit[Input] Fix SDL key mapping for 0 and 1 view commit[Build] Updated editorconfig to contain VS2019 default style (which we use in Xenko) view commit[Build] XenkoContent: do not include in NuGet package as Content view commit[Graphics] Compare InputElements length before comparing elements view commit[Graphics] Remove unecessary GraphicsDevice.ThreadCount view commit[SDL] AppActivated and AppDeactivated were reverted view commit[Vulkan] Fix validation for texture upload view commit[Vulkan] Update glslang to 7.11.3214 (May 2019) view commit[Vulkan] PipelineState: Entry point name could be GC before used view commit[Vulkan] PipelineState: Properly set PrimitiveRestartEnable view commitRevert &quot;[Graphics] Vulkan: add support for R10G10B10A2_UNorm and R11G11B10_Float&quot; view commit[Vulkan] Fixed memory barriers for Clear functions view commit[Vulkan] UpdateSubresource: Fixed memory barrier view commit[Vulkan] Fixed mixup between Clear DSV and RT view commit[Build] Android: Updated to NDK r19 (with proper version check) and remove our custom libc++abi (first step for #460 and #379) view commit[Build] Android: Avoid &quot;error MSB4044: The &quot;FilterAssemblies&quot; task was not given a value for the required parameter &quot;DesignTimeBuild&quot;.&quot; with latest Xamarin.Android view commit[Audio] Android: Updated OpenSLES header (which were incompatible with arm64 due to SLuint32 mapping to long instead of int) (fixes #379) (fixes #460) view commit[Setup] Upgraded Visual C++ prerequisites to latest VS2019 ones view commit[Assimp] Properly copy Xenko.Assimp.*.dll (fixes #465) view commitMerge remote-tracking branch 'weblate/master' view commit[Build] Android: Workaround for https://github.com/onovotny/MSBuildSdkExtras/issues/174 view commit[Build] Transformed Xenko.Core.BuildEngine into a .NET Standard assembly view commit[Build] NETStandard: Switch from AssemblyBuilder.DefineDynamicAssembly view commit[Build] NETStandard: Remove unnecessary using view commit[Quantum] Renamed Index into NodeIndex to avoid clash with future System.Index view commit[Build] NETStandard: Remove unnecessary using view commit[Assets] Switch from implicit project to explicit project if necessary (fixes #442) view commit[Build] Switched to MSBuild.Sdk.Extras version 2.0.41 view commit[Build] Doc: Copy .xml file in ref folder view commitRevert &quot;[Build] Switched to MSBuild.Sdk.Extras version 2.0.41&quot; view commit[Build] Moved Microsoft.NETCore.Platforms reference from Xenko.Graphics to Xenko.Core (otherwise scenarios like referencing only Xenko.Core with win-x64 doesn't work) view commit[VSPackage] Syntax highlighting service was not properly registered asynchronously (fixes #651651) view commit[VSPackage] Fix Xenko detection view commit[VSPackage] Bump version to 3.0.6 view commit[Build] Replaced to for shaders/effects view commit[VSPackage] Add a launchSettings.json with proper parameters for easier debugging view commit[Input] SDL: fix OemPlus/Minus mapping (thanks nes) view commit[UI] Fix comment view commit[Vulkan] Fix some memory barriers in CommandList.Copy and CopyRegion view commit[Vulkan] CommandList: Don't use ImageView.Null in DescriptorImageInfo view commit[Streaming] Load a few initial mipmaps for streamed texture (otherwise they start as completely uninitialized: bad for rendering, and causes crash on Vulkan) view commit[Shaders] Fixed precompiled shader code generation view commit[Shaders] Added ElementType info to reflection for buffers/textures view commit[Vulkan] Properly store info if a texel buffer need to be integer or float. view commit[Shaders] Make sure NoSampler is added before computing list of resource groups (otherwise it ends up having no location attribute) view commit[Input] Fixed copyrights view commit[VSPackage] Fix Xenko version detection to work not only with nuget packages but also solution projects, so that it works with Xenko solution itself. view commitMerge remote-tracking branch 'weblate/master' view commit[Localization] Added Italian view commit[Localization] Added info in doc on how to translate and add new language. view commit[Build] Remove the -beta02 version suffix view commit[Shaders] D3D: Properly copy ElementType when duplicating resource binding per stage (fixes #515) view commit[Samples] Updated to 3.1.0.1 view commit[Setup] PackageInstall: check if VS Installer needs an update, and if yes try to do it automatically view commit[Build] Temporary workaround for .NET Core 3.0 new runtime identifier system (credits go to Solr for finding this fix) view commit[NuGet] Rewrote how assembly resolver is ordering assemblies found in nuget packages (there was a bug where it could select net46 instead of net461, resulting in crash) view commit[Build] Moved Xenko.Samples.Templates version in a single unified location to simplify future maintenance view commit[Setup] PackageInstall: Check VS Installer update if any workload needs to be installed (two UAC, but probably better than an error and extra step) view commit[Build] Bumped MSBuild.Sdk.Extras to 2.0.54 view commit[Build] Updated codesign certificates view commit[Build] Android: Use AssemblyName rather than RootNamespace for Resource class otherwise it might clash between some assemblies (i.e. Xenko and Xenko.Engine) --&gt; view commitRevert &quot;[Build] Remove the -beta02 version suffix&quot; and bump samples accordingly view commit[Build] Use default RuntimeIdentifier for default GraphicsApi, so that even if our custom RuntimeIdentifier are not merged properly, everything still work. view commit[Build] Removed previous workaround for https://github.com/NuGet/Home/issues/7351 view commit[Build] Bump NuGet.exe to 5.3.0 view commit[Build] Improved behavior of XenkoGraphicsApiDependentBuildAll view commitMerge branch 'runtimeid_fixes' into master-3.1 view commit[Build] Android: Fix NDB platform versions view commit[Graphics] Updated SharpDX to 4.2.0 view commit[UpdateEngine] AssemblyProcessor was generating invalid ldftn for virtual/interface calls (causing crashes with .NET Core 3). Switch to ldvirtftn for those instead. view commit[Graphics] Update D3D12 code for SharpDX 4.2.0 view commit[Build] AssemblyProcessor task need to change identity on each change otherwise we can run into https://github.com/microsoft/msbuild/issues/663[#](https://github.com/xenko3d/xenko/issues/)issuecomment-310530046 view commit[Graphics] Streamed compressed texture could end up having their initial texture size not multiple of 4, resulting in error at runtime loading. Skip these cases for now. view commit[Fonts] Fix how matrix is computed and compute realVirtualResolutionRatio depending on actual requestedFontSize (fixes #314) (fixes #364) view commit[Fonts] Dynamic fonts: use virtual resolution (otherwise real size changes on every camera move and requests new character, esp. if UI is in 3D) view commit[Fonts] Do not alter fontSize view commit[Fonts] Turned various internal parameters from ref to in (C# 7.2) view commit[Fonts] Turned various internal parameters from ref to in (C# 7.2) (missing file) view commit[Build] Added a trailing slash at the end of PackageOutputPath (maybe necessary since latest VS2019?) view commitRevert &quot;[Build] Add XenkoBuildDoc parameter to force TargetFramework even if not specified (seems necessary for older version of Roslyn used in docfx)&quot; view commit[Build] Separated XenkoGraphicsApis into one list per platform (otherwise we can't really control properly and risk overriding a platform with nothing) (fixes #544) view commit[Build] Remove GetSolutionConfigurationContents hack (which was necessary for WinStore/WinPhone port) (this allows command line build for Android/iOS #543) view commit[Build] Remove the -beta02 version suffix and bump samples accordingly view commitUpdated BACKERS.md view commitWaldiS (3):Added translation using Weblate (Polish) view commitTranslated using Weblate (Polish) view commitTranslated using Weblate (Polish) view commitWhyPenguins (1):Add output merger UAV binding. (#478) view commitYuuki terumi (5):Added translation using Weblate (Spanish) view commitAdded translation using Weblate (Spanish) view commitAdded translation using Weblate (Spanish) view commitAdded translation using Weblate (Spanish) view commitTranslated using Weblate (Spanish) view commitdfkeenan (5):Allow spaces in TargetDir when building LauncherApp project. view commitUpdate Roadmap url to github projects. view commitAdd tooltip status text for link buttons. view commitAdd patreon link to launcher. view commitRemove AnswerHub link from launcher. view commitioc (1):Fix broken link to Teamcity Android build in ReadMe view commitjoreg (1):VR tracker support (#213) view commitmeriaizen86 (3):Translated using Weblate (Spanish) view commitTranslated using Weblate (Spanish) view commitUpdate XenkoDefaultSplashScreen.xktex view commitpansan (1):Translated using Weblate (Chinese (Simplified)) view commitphr00t (2):Make alpha optional in Color4 view commit[UI] don't invalidate text UI if we set it to the same thing view commitrgawry (1):Translated using Weblate (Polish) view commitssantos (1):Translated using Weblate (German) view committebjan (4):[Assimp] Updated assimp to official 4.1.0 and updated references in projects (closes #458) view commit[Assimp] Updated assimp to official 4.1.0 and updated references in projects (closes #458) view commitfixed null pointer exceptions in render features view commitremoving a package did not fire an event, so all related assets where still in the dependency manager view commitxwellingtonx (1):Fix editor resizing and to insert auto hide minimum size (fixes #189 and #190) view commit陈宇航 (1):Translated using Weblate (Chinese (Simplified)) view commitGenerated usinggit shortlog origin/master-3.0..origin/master-3.1 -w0,0,0 --pretty=format:&quot;* %s [view commit](https://github.com/xenko3d/xenko/commit/%H)&quot; | sed -r &quot;s/#([[:digit:]]*)/[#\\1](https:\\/\\/github.com\\/xenko3d\\/xenko\\/issues\\/\\1)/g&quot;"
  },{
    
    "title":"Recap October 2019",
    "excerpt": " Welcome to our October edition. Here's a quick recap on Xenko development and its community. Official 3.1 Release is in final testing phases. You can now sponsor Xenko through...",
    "author": "Jorn Theunissen",
    "date": "October 31, 2019",
    "category": "",
    "tags": "blog, search, Meeting",
    "url":"https://www.stride3d.net/blog/october-2019/",
    "content":"Welcome to our October edition. Here's a quick recap on Xenko development and its community. Official 3.1 Release is in final testing phases. You can now sponsor Xenko through Github sponsors. Possible name change is being discussed. The first tutorial project is almost ready.Official 3.1 Release Git Sponsorship Possible Name Change Documentation Community Picks Voxel cone tracing based global illumination from Spike1 Heightmap Terrain from SilentCLD Official 3.1 Release 🔗The 3.1 was originally scheduled for release this month, but some last minute breaking changes prevented the release. The official release is now in its final testing phases and should be released shortly. Once the release is final, we can focus on planning out tasks and the new roadmap for 3.2.Git Sponsorship 🔗Next to Patreon you can now also sponsor Xenko development directly through Github sponsors. GitHub even doubles the money that is donated the first year up to $5000!Possible Name Change 🔗For those of you who have missed it: Xenko is looking for a possible rename of the engine. There have been lengthy discussions on Discord about the name we could pick. See the fixed topic in the Discord #name-change channel.Documentation 🔗The first tutorial project is almost ready. Users will be able to select tutorial templates from a Tutorial category in the project launcher. The first project “C# Beginner”, demonstrates 12 beginner programming concepts. The amount of tutorials, as well as intermediate and advanced tutorials, will be extended/added once the first release is done.Additionally, the code used in the project is directly referenced by the new documentation section which explains each individual tutorial level.Community Picks 🔗Check out these awesome community projects that people are working on:Voxel cone tracing based global illumination from Spike1 🔗Forum postGithub projectHeightmap Terrain from SilentCLD 🔗Github project"
  },{
    
    "title":"Xenko meets vvvv",
    "excerpt": " Explore the integration of Xenko and vvvv, a powerful combination that unlocks new possibilities for creating visually stunning and interactive 3D experiences in real-time. ",
    "author": "Virgile Bello",
    "date": "October 04, 2019",
    "category": "",
    "tags": "blog, search, Announcement",
    "url":"https://www.stride3d.net/blog/xenko-meets-vvvv/",
    "content":"Explore the integration of Xenko and vvvv, a powerful combination that unlocks new possibilities for creating visually stunning and interactive 3D experiences in real-time.Xenko and vvvv 🔗When Xenko went fully open-source in 2018, one of my intent was to be able to engage directly with some of Xenko's most enthusiast customers and power users. vvvv is definitely a perfect example.vvvv is a hybrid visual/textual live-programming environment for easy prototyping and development.vvvv has been using Xenko under the hood for a while, e.g. for the Ocean of Air project.They also have various plans to leverage Xenko even further in the future gamma version.That's what led me to establish closer contact with them. One things led to another, and in May 2019 I jumped in with both feets and moved to Berlin. They've been graciously sponsoring Xenko and allowed me to use their office since then.My sincere thanks to them for supporting both Xenko and me!Please find vvvv announcement at https://vvvv.org/blog/vvvv-meets-xenkoCode signing certificates 🔗A few days ago, Xenko code signing certificate expired, leaving the project in a tough situation, where smooth releases were not possible anymore.vvvv graciously offered me to temporarily sign Xenko official releases with their own codesign certificate. So don't be surprised to see their name popping up next time you upgrade Xenko!This is only temporary and we are working to get our own code signing certificate as soon as possible. More to come soon on that front!"
  },{
    
    "title":"Contributor Meeting October 2019",
    "excerpt": " Discover highlights from Stride's first contributor meeting, focusing on project collaboration, development updates, and ways to enhance the game engine together. ",
    "author": "Jorn Theunissen",
    "date": "October 01, 2019",
    "category": "",
    "tags": "blog, search, Meeting",
    "url":"https://www.stride3d.net/blog/contributor-meeting-1/",
    "content":"Discover highlights from Stride's first contributor meeting, focusing on project collaboration, development updates, and ways to enhance the game engine together.Next to the community meetings were everyone can join in on the discussions, we now also have the contributor meetings. These contributor meetings are for the people who are actively participating in Xenko development. Last weekend we had our first gathering. Another thank you to all who participated!Summary 🔗Date of meeting: 28 September 2019Official release of 3.1The release of 3.1 is imminent. More details on this will be provided soon.Nuget package creation is the biggest task to be completed.General roadmapThe roadmap currently planned on Github is outdated. It needs to be updated and become more relevant to the capacity we currently have as Xenko contributors/developers.New freedcamp tasks will come out of this that can be assigned to contributors. Some areas of contribution:Xenko core (subsystems, frameworks, .Net version etc)Editor improvementsExamples/Tutorials: C# coding, Models/materials setup from Import to Scene, AnimationRoadmap for 3.2Planning out the next features is a big challenge, because there are so many things wanted/requested. Since Xen is the only full time core developer, we can probably only toggle 1 major feature next.After the 3.1 is released the strategy on which core feature should be implemented. This has yet to be decided. The next developer meeting will go deeper in to this.Example on what could be worked on: asset compiling/.NET Core 3Release cyclesWe will try to adapt a more frequent official release strategy. Even if that official release contains few fixes or improvements. We do not want to plan releases on fixed dates, but instead we do want to keep the 3-4 months idea in our mind. This should provide the community more reliability.Depending on the amount of fixes/improvements this will major or minor.Phr00t forkIt has proven difficult to merge functionality from phr00t fork to main xenko, but there is ongoing progress!2 users (Fdrobidoux and SilectCLD) are currently working on merging code. If you are interested in following the progress have a look at the task for this.Vulkan improvements will need to be done differently, and some work from xen2 has already landed for this.DocumentationThe C# basics tutorials are making progress, but the sample project is not quite there yet.Some better screenshots and a base tutorial scene that looks a little bit more appealing could be really useful.Release for this is extended by 1 month.Access rights:We can distribute some access rights among contributors to ofload some of task from Xen.Social media: SyrikZeroWebsite deployment Teamcity/Azure: JornAggrorName changeLet’s take it one step at a time: first let’s see what possible name we can come up with.Check the voting topic by Eideren for more info.General topics:We are aiming to do a contributor meeting every 2 months.This meeting was a long sit: 1.5 hours. Next meetings should be 1 hour at max, but preferable shorter.Using Discord for the meeting, was not ideal. We will try to see if we can use Google Hangouts for this.The timezone planning of the meeting did not go as planned even though Doodle does support this. This will be properly tested for the next meeting.Freedcamp will remain as the tool for planning generic tasks. Since most contributors have now joined, new members can only edit tasks if they are invited.Want to join the contributors? 🔗Whether you are a developer, designer, artist or writer, you are always free to create Pull Requests or add issues to the Xenko github project.If you are interested in participating in the contributor meetings and the Xenko Freedcamp project, please send a private message to AggrorJorn using the Xenko forum. All you need to do is send in your email address and what areas of contributing you are interested in. You will be invited to join the publicly viewable Xenko Freedcamp project which we use to keep track of all sorts of tasks that people are working on. We can then also have a quick chat to get you up to speed on any tasks."
  },{
    
    "title":"Recap September 2019",
    "excerpt": " Welcome to the September blog post of Xenko. In this blog, we will have a quick recap on what's going on with Xenko development and its community. From now...",
    "author": "Jorn Theunissen",
    "date": "September 23, 2019",
    "category": "",
    "tags": "blog, search, Meeting",
    "url":"https://www.stride3d.net/blog/september-2019/",
    "content":"Welcome to the September blog post of Xenko. In this blog, we will have a quick recap on what's going on with Xenko development and its community. From now on we will have a monthly recap blog to let the world know what we are up to.Picking Up Speed New Project Overview What is being worked on Possible Name Change Picking Up Speed 🔗Since the last developer meeting in July, it was made clear that Xenko really needs the help of the community to improve. Part of improving is making sure that the community can help out on various aspects of Xenko. This is not just the development of the Xenko engine itself, but also all the other processes that are involved around it. You can follow the ongoing forum discussion here.New Project Overview 🔗As part of getting things done quicker, a new public project overview has been set up using Freedcamp. In this here we track of ongoing tasks, who is assigned to it and what possible milestones are. If you want to contribute to this project or just check out the current tasks, have a look.What is being worked on 🔗Here are some of the things that are being worked on:New tutorials section for the documentation website. Starting with a section of C# basics with Xenko, we can start making it easier for people to get the hang of Xenko in no time. Here is a quick peek at how it is going to look like.Phr00t fork merging: The Phr00t fork contains many features that the main Xenko engine could benefit from. From countless API improvements to bigger features like Vulkan improvements. Right now contributors are looking in which features and functionality to move to the main Xenko repository.Possible Name Change 🔗For those of you who have missed it: Xenko is looking for a possible rename of the engine. If you want to know more about the why and why not, have a look at this forum topic. Regardless of whether the name change will happen, we need to find a suitable candidate. In a few weeks, we will start a poll to narrow down the long list of suggested names. A more detailed blog on this will follow soon. In the meantime, if you have a great idea, feel free to make a suggestion in the topic above or in the Xenko discord channel “Name-change”."
  },{
    
    "title":"Community Meeting July 2019",
    "excerpt": " Get an overview of Stride's second community meeting, discussing updates, future plans, and addressing questions from developers and users of the game engine. ",
    "author": "Virgile Bello",
    "date": "July 19, 2019",
    "category": "",
    "tags": "blog, search, Meeting",
    "url":"https://www.stride3d.net/blog/community-meeting-2/",
    "content":"Get an overview of Stride's second community meeting, discussing updates, future plans, and addressing questions from developers and users of the game engine.Time for our second community meeting.Yes, it has been renamed from Developer meeting to Community meeting to better reflect the intended target audience.This time, the idea is not only to find where Xenko should head next (I am sure there will be hundreds of ideas, many of them already waiting on GitHub issues!), but also to find more people volunteering to take over some of those tasks!Here is a tentative schedule for this meeting:UTC (GMT) Wednesday, 24 July 2019, 15:00:00UTCBerlin (Germany) Wednesday, 24 July 2019, 17:00:00CESTParis (France) Wednesday, 24 July 2019, 17:00:00CESTTokyo (Japan) Thursday, 25 July 2019, 00:00:00JSTSan Francisco (USA - California) Wednesday, 24 July 2019, 08:00:00PDTNew York (USA - New York) Wednesday, 24 July 2019, 11:00:00EDTLondon (United Kingdom) Wednesday, 24 July 2019, 16:00:00BSTIt will be held on Discord in the #dev-meetings channel.Please come define the future of Xenko with us!"
  },{
    
    "title":"Starbreach Demo",
    "excerpt": " Explore the impressive Starbreach demo, a testament to Stride's powerful 3D game development capabilities, featuring stunning visuals, smooth gameplay experiences, and a glimpse into the engine's potential for creating...",
    "author": "Virgile Bello",
    "date": "May 31, 2019",
    "category": "",
    "tags": "blog, search",
    "url":"https://www.stride3d.net/blog/starbreach-demo/",
    "content":"Explore the impressive Starbreach demo, a testament to Stride's powerful 3D game development capabilities, featuring stunning visuals, smooth gameplay experiences, and a glimpse into the engine's potential for creating immersive and engaging gaming worlds.Hi everyone, Silicon Studio agreed to release the Starbreach demo from GDC 2017, along with all associated assets as open source (see license), for the Xenko community to use. Code in the project is released under an MIT license, the assets are released under a attribution-NonCommercial 4.0 International (CC BY-NC 4.0) license.Starbreach was originally developed as the Xenko GDC demo for 2016 by Silicon Studio with art support from N-iX production studios. Virgile Bello (xen), Xenko’s lead developer has spent a chunk of time updating the demo and assets to work with the latest release of the Xenko.You can find the demo and assets here:https://github.com/xenko3d/StarbreachAnd more on the licensing here: https://github.com/xenko3d/Starbreach/blob/master/LICENSE.mdXenko now has a great playable demo... Can we make it even better? 🔗The community is doing a great job building out the xenko 3.1.0.1 beta release especially filling in gaps, fixing bugs and fulfilling the promise of a community led game engine - so special thanks to Tebjan, phr00t, dfkeenan, Eideren, Venthe, Aggror, Pred, Jarmo, dio and xen to name only a few.With the release of Starbreach demo - we now have a great playable demo that shows off Xenko. xen’s thrown the glove down and done his part with getting release permission and updating - but can everyone in the community help make it even better? Maybe by adding additional AI, improving the game play or adding a new boss character or full levels? Source is on github and let’s discuss on Discord or in the Forum."
  },{
    
    "title":"Welcome TurboPlay as Gold Sponsor",
    "excerpt": " We're happy to announce TurboPlay is helping Xenko not only as a Gold Sponsor, but also have further plans to support Xenko in the future. ",
    "author": "Virgile Bello",
    "date": "February 12, 2019",
    "category": "",
    "tags": "blog, search, Announcement",
    "url":"https://www.stride3d.net/blog/turboplay-gold-sponsor/",
    "content":"We're happy to announce TurboPlay is helping Xenko not only as a Gold Sponsor, but also have further plans to support Xenko in the future.Our respective visions for a more open game engine and decentralized marketplace seem to have a lot in common.Thanks TurboPlay for supporting Xenko and its community! This is a very exciting milestone and hopefully the beginning of a new era for Xenko!Open the full post for the press release in all its glory.Press Release: TurboPlay Announces Videogame Engine Support With Xenko 🔗TurboPlay is pleased to announce Gold Sponsorship for the Xenko Game Engine and its Open Source Community.“We’re pumped to have the opportunity to support the Xenko development team and work with them to develop amazing new technologies for their community and ours! Xenko is a modern game engine technology developed entirely in C#. Xenko’s technology has incredible potential in today’s gaming market. Through this partnership we can provide direct support to Xenko indie developers,” said Vince McMullin, TurboPlay President and CEO.Launching in 2019, TurboPlay is developing a full-fledged marketplace ecosystem by maximizing exposure for unique indie content. TurboPlay is the world’s first ultra-modern, fully-scalable, fault-tolerant, peer-to-peer, videogames marketplace.“I'm super excited to work with TurboPlay! We’ll be able to achieve great things together. I believe that both organizations are philosophically aligned, embracing the ideas of permissive open-source, decentralized and distributed architectures to disrupt the status quo in the games industry,” explains Virgile Bello, Lead Engine Developer.TurboPlay plans to support Xenko in future endeavors, including their Indie Community, with developer grants supporting game development using both Xenko &amp; TurboPlay technologies.For further inquiries regarding this topic, please contact our CMO, Lisa Weeks, by email, lisaw@turboplay.com. Thank you.LinkedInhttps://www.linkedin.com/company/turboplayhttps://www.linkedin.com/company/xenkoTwitterhttps://twitter.com/trbplayhttps://twitter.com/xenko3dFacebook​https://www.facebook.com/TRBPlayhttps://www.facebook.com/xenko3dLink to the official press-release:https://www.newswire.com/news/turboplay-announces-videogame-engine-support-with-xenko-20801982"
  },{
    
    "title":"Developer Meeting January 2019",
    "excerpt": " Get insights from Stride's first developer meeting, covering project status, development progress, and future plans for this versatile game engine. ",
    "author": "Virgile Bello",
    "date": "January 19, 2019",
    "category": "",
    "tags": "blog, search, Meeting",
    "url":"https://www.stride3d.net/blog/developer-meeting-1/",
    "content":"Get insights from Stride's first developer meeting, covering project status, development progress, and future plans for this versatile game engine.Now that Xenko 3.1 beta is well underway, it's time to prepare for the future.As part of this process, I would like to involve our newly formed community.The idea is to decide together during a developer meeting what are the next long-term targets for Xenko, and what to put in release 3.2+.The first developer meeting will be open to everybody (developers, users and potential future users).It's possible we then evolve toward a more moderated format if needed.Here is a tentative schedule for this meeting:Tokyo (Japan) Wednesday, 23 January 2019, 01:00:00JSTBerlin (Germany) Tuesday, 22 January 2019, 17:00:00CETParis (France) Tuesday, 22 January 2019, 17:00:00CETLondon (United Kingdom) Tuesday, 22 January 2019, 16:00:00GMTUTCSan Francisco (USA - California) Tuesday, 22 January 2019, 08:00:00PSTNew York (USA - New York) Tuesday, 22 January 2019, 11:00:00ESTUTC (GMT) Tuesday, 22 January 2019, 16:00:00It will be held on Discord in the #dev-meetings channel.Please come define the future of Xenko with us!"
  },{
    
    "title":"Xenko 3.1 Beta Released",
    "excerpt": " Explore the Xenko 3.1.0 beta release, featuring exciting new features, enhancements, and improvements in this powerful 3D game engine by Stride. ",
    "author": "Virgile Bello",
    "date": "December 24, 2018",
    "category": "",
    "tags": "blog, search, Release",
    "url":"https://www.stride3d.net/blog/release-xenko-3-1-0-beta/",
    "content":"Explore the Xenko 3.1.0 beta release, featuring exciting new features, enhancements, and improvements in this powerful 3D game engine by Stride.Just in time for Christmas, Xenko 3.1 Beta is out now!One of the major change is turning the engine into separate NuGet packages, published on NuGet.org.Merry Christmas and Happy Holidays!Xenko 3.1 Loves NuGet! Coming Soon Xenko Assets Distribution Full Switch to .NET Standard Xenko 3.1 Loves NuGet! 🔗Xenko was always a big proponent of NuGet: since first version, Xenko was distributed as a NuGet package.However, due to limitations (hello packages.config and project.json!), we were leveraging NuGet more as a distribution medium than proper NuGet packages: Xenko 3.0 is still a monolithic single package and it would not work out of the box when referenced from Visual Studio without using Xenko Launcher and Game Studio.Xenko 3.0 paved the way by making Xenko compatible with the new project system (game projects were referencing Xenko using a PackageReference).Today, Xenko 3.1 brings Xenko as a set of smaller NuGet package, each containing one assembly, with proper dependencies:As a result, it is now possible to create a game project that references only the packages you want. Here are a few examples of &quot;core&quot; packages:Xenko.Engine: allows you to use core engine runtime (including its dependencies)Xenko.Core.Assets.CompilerApp: compile assets at build timeXenko.Core.Mathematics or Xenko.Graphics: yes, if you want to make a custom project only using Xenko mathematics or graphics API without the full Xenko engine, you can!Xenko.Core.Assets, Xenko.Presentation or Xenko.Quantum: all those piece of tech being used to build Xenko tooling are also available for reuse in other projects. Nothing prevents you from generating assets on the fly too!Then, various parts of the engine are distributed as optional packages:Xenko.PhysicsXenko.ParticlesXenko.UIXenko.SpriteStudioXenko.VideoIf you don't reference those packages, they won't be packaged with your game either. In many situations, it results in a smaller packaged game and improved startup time.Also, you are free to replace those functionalities with alternative libraries.Coming Soon 🔗Xenko Assets Distribution 🔗Xenko Assets will be packed and distributed with NuGet automatically.Coming soon in next beta, C# projects containing Xenko assets will have those assets automatically NuGet packaged in a xenko folder.As a result, you will soon be able to generate NuGet package containing Xenko assets out of the box from Visual Studio and publish them on NuGet.org for general consumption for other Xenko users.We can't wait to see what will come up!Full Switch to .NET Standard 🔗Soon Xenko will support .NET Standard for most of its assemblies.Xenko games will be able to run on .NET Core for Windows (Linux is already supported)."
  },{
    
    "title":"Feature Spotlight: Xenko 3.1 + NuGet",
    "excerpt": " Discover the powerful features of Xenko 3.1, the latest update to the Stride 3D game engine. Learn how NuGet integration streamlines development and enhances your game creation experience. Dive...",
    "author": "Virgile Bello",
    "date": "November 13, 2018",
    "category": "",
    "tags": "blog, search, NuGet",
    "url":"https://www.stride3d.net/blog/feature-spotlight-xenko-3-1-and-nuget/",
    "content":"Discover the powerful features of Xenko 3.1, the latest update to the Stride 3D game engine. Learn how NuGet integration streamlines development and enhances your game creation experience. Dive into our detailed blog post now!Today, I would like to highlight some work being done on Xenko.Xenko 3.1 will bring some big changes in the way Xenko is packaged, distributed and consumed.Xenko 3.0: Welcome PackageReference! Xenko 3.1: Enter Modular Xenko One Package per Assembly Package Layout: Following Best NuGet Practices Xenko assets are also distributed as part of package Distribution Platform: time to switch to nuget.org? Xenko tooling will resolve assemblies dynamically using NuGet API Future: Plugin Support for Editor Conclusion Xenko 3.0: Welcome PackageReference! 🔗Xenko was always a big proponent of NuGet: since first version, Xenko was distributed as a NuGet package.However, due to limitations (hello packages.config and project.json!) we were leveraging NuGet more as a distribution medium than proper NuGet packages: Xenko up to 3.0 is still a monolithic single package and it would not work out of the box when referenced from Visual Studio without using launcher and Game Studio.Xenko 3.0 paved the way by making Xenko compatible with the new project system (game projects were referencing Xenko using a PackageReference).This Xenko &quot;fat&quot; package is still containing everything: Xenko runtime, editor, compilers, samples. Various features of Xenko are forced onto the users: UI, Physics, SpriteStudio, etc...Additionally, Xenko assembly references are still manually added through complex target files rather than following package reference layout and see them where they should have been, nested inside the Xenko NuGet reference:Xenko 3.1: Enter Modular Xenko 🔗Most of the changes discussed in this section are still in a prototype state, but should hopefully be merged soon in master.One Package per Assembly 🔗Xenko 3.1 will bring Xenko more in line with a more proper way of organizing NuGet package: one package per assembly, with proper dependencies:As a result, it is now possible to create a game project that references only the packages you want. Here are a few examples of &quot;core&quot; packages:Xenko.Engine: allows you to use core engine runtime (including its dependencies)Xenko.Core.Assets.CompilerApp: compile assets at build timeXenko.Core.Mathematics or Xenko.Graphics: yes, if you want to make a custom project only using Xenko mathematics or graphics API without the full Xenko engine, you can!Xenko.Core.Assets, Xenko.Presentation or Xenko.Quantum: all those piece of tech being used to build Xenko tooling are also available for reuse in other projects. Nothing prevents you from generating assets on the fly too!Then, various parts of the engine will be distributed as optional packages:Xenko.PhysicsXenko.ParticlesXenko.UIXenko.SpriteStudioXenko.VideoIf you don't reference those packages, they won't be packaged with your game either. In many situations, it will result in a smaller packaged game and improved startup time.Also, you will be free to replace those functionalities with alternative libraries.Package Layout: Following Best NuGet Practices 🔗Previously Xenko references were added to the project using custom targets.New packages will now be layout as NuGet/Visual Studio expects them, in folders like lib/net45 and lib/monodroid10.We still have a few custom MSBuild targets but reduced them to minimum.Xenko assets are also distributed as part of package 🔗NuGet packages will have a xenko folder containing Xenko assets. As a result, user will be able to generate nuget package containing Xenko assets out of the box from Visual Studio and publish them on NuGet for general consumption.Distribution Platform: time to switch to nuget.org? 🔗This is still something under consideration and it will need some testing, but it now starts to make sense to distribute Xenko packages on nuget.org rather than our custom NuGet server.This will greatly reduce friction to try Xenko (any project would work out of the box in Visual Studio). This might also make our launcher completely optional, if not redundant.Xenko tooling will resolve assemblies dynamically using NuGet API 🔗Tools such as GameStudio or Asset Compiler will be distributed as NuGet packages. However, it won't bundle Xenko Runtime, which will simply be encoded as dependency.When running those tools, they will resolve Xenko runtime assemblies directly in the NuGet cache.This allows for distributing those tools as very small and easy-to-upgrade packages, avoiding file duplications. This is similar to what dotnet-cli is doing with deps file.This brings lot of technical challenges but should allow us in the future to be more flexible in the future to load the exact runtime and plugins that the user project reference rather than the one hardcoded with the tool.Future: Plugin Support for Editor 🔗Xenko 3.1 editor will still be monolithic: editor support for UI, SpriteStudio, Video and other optional modules will be hardcoded.However, the target is to get rid of them as soon as possible, and treat them as what they are: plugins.Conclusion 🔗This is just the beginning, laying out foundations to turn Xenko into a set of reusable libraries. Much more to come soon!This is an exciting era for Xenko. Hopefully it will open doors to many new use cases, and bring us lot of new potential users and developers!"
  },{
    
    "title":"Opensourcing Done! What's Next?",
    "excerpt": " Explore the future of Stride 3D game engine after going open source. Understand the roadmap, exciting developments, and how the community plays a crucial role in shaping its growth....",
    "author": "Virgile Bello",
    "date": "August 22, 2018",
    "category": "",
    "tags": "blog, search, Announcement",
    "url":"https://www.stride3d.net/blog/whats-next-after-opensource/",
    "content":"Explore the future of Stride 3D game engine after going open source. Understand the roadmap, exciting developments, and how the community plays a crucial role in shaping its growth. Read our in-depth blog post to learn more!Now that Xenko is opensource under the MIT license and the dust settled a little bit (took a few weeks of vacations after the opensource release crunch), it's time to take a step back, think about what's next, and start building it together!We need help! 🔗First of all, the main objective will be to grow our developer and user community. Xenko has no chance to succeed if we don't have enough people contributing on and using it.Thanks to its still small but dedicated community of early adopters, within a few weeks, Xenko already had a bunch of pull requests accepted and issues opened during those few days. This has led to new releases including some of the new fixes and features.Thanks everybody, your help is very much appreciated! Please keep up the great work!Of course, Xenko can't compete yet against more famous alternatives in terms of features, but I think Xenko is already an attractive choice for several populations, such as:people wanting to develop and/or experiment on a game enginecompanies wanting to invest in open technologies, and build freely on top of itindie developersnon-game projectsWe will need your help to find those people: please spread the word! Feel free to contact us if you have any idea (company interested in Xenko, marketing opportunities, etc...).Roadmap 🔗I have started to organize the list of Epic features into a roadmap draft on GitHub. It's still an early work in progress so please check regularly. We will also be using ZenHub to organize issues and epics.Feel free to add your own ideas!However, I want to stress an important point: this just acts as a wishlist and it should only be taken as a recommendation of what need some work.Being an opensource project, I can't and don't want to enforce a strict roadmap. People work out of motivation driven by their own interests or needs for their own projects. This is incompatible with enforcing a roadmap and strict deadline. This might change later if we get enough funding to hire full-time people.Still, if you are not sure what to help with, starting with the issues is probably a good starting point (I will mark some of them with the good first issue label). Feel free to stop by gitter to discuss with the developers.Please state your intention to work on something on GitHub issues, and confirm how to do it with other collaborators to make sure it doesn't conflict and will be accepted smoothly.Expect some tweets and blogs posts about what's being worked on in the coming weeks.Donations 🔗OUTDATED: Use Open Collective instead.If you want to help Xenko, or if Xenko is helping you or your company, please consider donating on Patreon.This will help me not having to focus on side projects to secure money, and bring me peace of mind to focus solely on Xenko. Since my plan is to work full-time on it, this will be my main source of income for now.I extend my thanks to early donors for supporting the project in its infancy! Your help means a lot.And thanks again everybody for your support and time so far, and let's hope for a bright future for Xenko!"
  },{
    
    "title":"Xenko 3.0 is Now Free and Open-Source!",
    "excerpt": " Unveiling Xenko's transition to an open-source MIT license, opening doors for developers to access and contribute to the powerful Stride 3D game engine. Learn about the benefits, opportunities, and...",
    "author": "Virgile Bello",
    "date": "August 02, 2018",
    "category": "",
    "tags": "blog, search, Announcement",
    "url":"https://www.stride3d.net/blog/xenko-opensource-mit/",
    "content":"Unveiling Xenko's transition to an open-source MIT license, opening doors for developers to access and contribute to the powerful Stride 3D game engine. Learn about the benefits, opportunities, and how to get involved in our comprehensive blog post!You read that right. Xenko 3.0 is out now, released under the permissive MIT license.From now on, you can use and modify Xenko completely free — whether you're a professional, a student, or just looking for a new hobby. This includes both the runtime and editor.Main focus for this release was on the open-source transition, but Xenko 3.0 also includes some new features, such as a switch to the new C# project system, video, hair and skin rendering. Read the full release notes here.Silicon Studio no longer supports Xenko, but members of the Xenko team will continue to work on it independently as part of the community. More specifically, I will personally work on it fulltime for the next few months to see if it picks up some steam as a community project. Kudos to Silicon Studio for starting and supporting the project so far! Turning the project open-source and community-driven is a fantastic achievement.This project will live thanks to its community and will have its own GitHub organization. Want to contribute? Join us on GitHub! Updated: Use Open Collective to support further Stride Engine development.Outdated:Also, I have setup a Patreon page for people who want to financially support the effort (servers and me working fulltime).We're proud of everything we and our users have achieved with Xenko over the last three years. We can't wait to see what you do with it next!"
  },{
    
    "title":"Changes to the Xenko License",
    "excerpt": " Dive into the significant changes to Xenko's license and how they impact the Stride 3D game engine community. Understand the new licensing terms, benefits, and opportunities they present for...",
    "author": "Silicon Studio Corporation",
    "date": "March 30, 2018",
    "category": "",
    "tags": "blog, search, Announcement",
    "url":"https://www.stride3d.net/blog/changes-to-the-xenko-license/",
    "content":"Dive into the significant changes to Xenko's license and how they impact the Stride 3D game engine community. Understand the new licensing terms, benefits, and opportunities they present for developers. Get all the details in our informative blog post!Long time no see!The Xenko promotion period has ended, and we've made some changes to the license plans.As of 1 April 2018, Xenko Pro and Xenko Pro Plus are no longer available.Xenko Personal is still free for personal use and for businesses of less than $200,000 US in annual revenue. If you don't meet the Xenko Personal criteria, contact us for a custom plan.If your business makes over $200,000 US in annual revenue, and you downloaded Xenko before 1 April 2018, you can continue to use Xenko until 1 April 2019. If you want to use Xenko after that, you need to contact us to create a custom plan before 1 April 2019.For more information, see the FAQ.Meanwhile, we're exploring the idea of a version of Xenko run entirely by the community. We also have a bunch of updates we're excited to show you, which we'll release once we finish exploring licensing options.We know it's been a long wait for Xenko users. We really appreciate your patience.Get Xenko here."
  },{
    
    "title":"Xenko Pro Free until April 2018",
    "excerpt": " Xenko game engine offered free until April 2018! Learn more about this limited-time opportunity in our brief blog update. ",
    "author": "Silicon Studio Corporation",
    "date": "December 21, 2017",
    "category": "",
    "tags": "blog, search",
    "url":"https://www.stride3d.net/blog/xenko-free-until-april-2018/",
    "content":"Xenko game engine offered free until April 2018! Learn more about this limited-time opportunity in our brief blog update.Nope, that’s not an April Fool’s. We've extended the Xenko promotion while we explore different licensing options. We can’t reveal too much right now, but we’re hoping to move to a more permissive license.In the meantime, Xenko Pro will remain free for everyone until April 1, 2018, as per the existing terms and conditions. Consider it a Christmas present.Get Xenko here.Happy holidays!"
  },{
    
    "title":"Xenko and 3dRudder",
    "excerpt": " Discover 3dRudder's integration with the Stride 3D game engine in our concise blog post. Learn about this unique foot-powered controller and its impact on game development. ",
    "author": "Silicon Studio Corporation",
    "date": "September 24, 2017",
    "category": "",
    "tags": "blog, search",
    "url":"https://www.stride3d.net/blog/3drudder/",
    "content":"Discover 3dRudder's integration with the Stride 3D game engine in our concise blog post. Learn about this unique foot-powered controller and its impact on game development.The 3dRudder is an interesting piece of hardware that lets you use your feet to control game movement. It's one of a number of devices out there exploring different ways to interact with VR.A while ago, the team at 3dRudder got in touch to show us a prototype they built in Xenko using the Virtual reality template project. This lets you move around the scene by tilting and rotating the 3dRudder.The team has made their Xenko project available on GitHub for everyone to try out. You'll need a 3dRunner device with firmware version 1.3.5.2 or later to work with the project.The 3dRudder team also took the time to report a bug that force-enabled the Ignore camera rotation VR option when using OpenVR as the API. The option means players can only change the view position by moving the VR device, and not external controllers, like mice, gamepads, or the 3dRudder. Whoops. That was fixed in a recent release.It's great to see developers out there experimenting with Xenko and their creations. If you're cooking something up that should be on this blog, we'd love to hear about it.For more information about the 3dRudder, see the 3dRudder site. For details about setting up VR in Xenko, check out the VR documentation."
  },{
    
    "title":"Xenko 2.1 Released",
    "excerpt": " Learn about Stride version 2.1.0, a significant update packed with new features, enhancements, and bug fixes aimed at streamlining game development and improving user experience. ",
    "author": "Silicon Studio Corporation",
    "date": "September 14, 2017",
    "category": "",
    "tags": "blog, search, Release",
    "url":"https://www.stride3d.net/blog/version-2-1-0/",
    "content":"Learn about Stride version 2.1.0, a significant update packed with new features, enhancements, and bug fixes aimed at streamlining game development and improving user experience.Xenko 2.1 is out now! Thanks, as ever, to all our users for your feedback.For the full list of changes, see the release notes.Summary 🔗Summary Local reflections Clear coat shading Thin glass materials Improved light shafts Texture streaming Render masks Improved profiler Debug text Rewritten input system Improved Direct3D 12 support Improved environment fresnel Japanese documentation Local reflections 🔗Xenko 2.1 introduces local reflections. We wrote about this feature back in March; it's been through several revisions since then.You can enable and customize local reflections in the graphics compositor on the post effects properties.For details, see the local reflections documentation.Clear coat shading 🔗Xenko 2.1 includes a clear-coat material template that uses physically-based rendering to simulate vehicle paint.Clear-coat shading has several advantages over creating the effect manually with material layers:layers are blended based on distanceincreased performanceimproved visualizationYou can add a predefined clear coat material from the Asset view under Add asset &gt; Material.For details, see the clear coat shading documentation.Thin glass materials 🔗You can now render thin glass materials such as windshields. The diffuse color controls the tint of the glass and how much light is blocked (darker colors block more light).You can add a predefined Glass material from the Asset view under Add asset &gt; Material.Improved light shafts 🔗You can now use light shafts with any kind of light that casts shadows (ie point lights, directional lights, or spot lights). You can also use them with multiple shadow cascades.Additionally, Game Studio now displays light shaft bounding volumes in the scene editor, so you can easily see the areas where light shafts are created. To show or hide navigation light shaft bounding volumes, in the scene editor toolbar, open the gizmo options menu and use the Light shaft bounding volumes checkbox.The LightShaftComponent settings have been simplified and now have settings to control quality and performance.For details, see the light shaft documentation.Texture streaming 🔗Xenko now supports streaming for textures. This significantly decreases the time it takes to load a game or scene, uses less memory, and makes your game easier to scale.Streaming is enabled for textures by default. You can find the option in the texture properties under Format.You can also set the global Streaming settings in Game settings.For details, see streaming documentation.Render masks 🔗You can now set which render groups a camera renders under Graphics Compositor &gt; Entry points &gt; Render masks. For example, you can have a model be visible to Camera A but invisible to Camera B.For details, see the Render groups and masks documentation.Improved profiler 🔗The Game Profiler script now displays more information and is easier to use.You can now:profile GPU informationswitch between CPU, GPU, and FPS-only results with F1sort the result pages by Name or Time with F2change how frequently the profiler gets and displays new results with - / +jump to a results page with the number keys, or move forward and backwards with F3 and F4set parameters in Game Studio:For details, see the Profiling documentation.Debug text 🔗You can now display debug text at runtime. For more information, see the debug text documentation.Rewritten input system 🔗The input system has been rewritten to track different input devices and allow for better extensibility.Allows detection of added/removed devices through events on the InputManagerNew device interfaces such as IMouseDevice, IKeyboardDevice, IGameControllerHigh-level IGamePadDevice replaces the gamepad functionality, with support for XInputLower-level IGameControllerDevice allows access to numbered buttons/axesAutomatic detection of plugged-in/removed controllersSupport for different keyboard layouts and IME for text inputAccess to resolution and absolute coordinates for mouse/pointer devicesKeyEvent now has a RepeatCount member, indicating how many times the key has been repeated while being held downFor details, see the Input documentation.Improved Direct3D 12 support 🔗To support graphics functionalities on every platform, we've implemented missing features for the DirectX 12 rendering backend:compute and tessellation shadersunordered access views for textures and buffersstructured buffersImproved environment fresnel 🔗Fresnel describes how light is reflected depending on the angle the material is viewed from. Typically, high angles are more reflective.Previously, Xenko used an imprecise polynomial approximation to compute the fresnel for environment lighting (such as cubemaps), resulting in a bigger-than-expected white outline. Xenko now defaults to a precomputed BRDF environment lookup texture that matches our default lighting equations (GGX Schlick). This produces much more accurate rendering.Japanese documentation 🔗ドキュメントは日本語での表示も可能です。言語を切り替えるには、右上のLANGUAGEボタンをクリックしてください。The Xenko documentation is now available in Japanese. To switch languages, use the Language button in the top-right of the documentation site."
  },{
    
    "title":"Game Spotlight: Children of the Galaxy",
    "excerpt": " Get a glimpse of 'Children of the Galaxy', an ambitious game project powered by Stride 3D, in our Developer Spotlight series. Learn about the creative minds behind the game,...",
    "author": "Silicon Studio Corporation",
    "date": "May 11, 2017",
    "category": "",
    "tags": "blog, search",
    "url":"https://www.stride3d.net/blog/developer-spotlight/",
    "content":"Get a glimpse of 'Children of the Galaxy', an ambitious game project powered by Stride 3D, in our Developer Spotlight series. Learn about the creative minds behind the game, their inspirations, and the challenges they've faced. Immerse yourself in the world of game development with our captivating blog post!It takes amazing developers to build a game from scratch. To do it with an engine while it was still in beta is a next-level feat. Today, the Xenko team would like to spotlight the first developer to get their game published on Steam while Xenko was in its beta stage.Filip Dusek is the creator and engineer of the newly released Children of the Galaxy game. Growing up in the Czech Republic, Filip frequently played 4X strategy games, and especially loved games such as “Civilization™” and “Endless Space™”. After a few years of learning game development at university along with self-study, he worked as a senior programmer at 2K Games working on such titles as &quot;Topspin 4™&quot;, &quot;Mafia 2™&quot; and Mafia 3™&quot;. However, with 4X games still being his favorite genre, Filip decided to set out and create his own game set in space. Unlike any other 4X strategy games, he wanted to put his own spin on the genre by incorporating more tactical elements, enabling users to engage in complex strategies to play with. With that ideal in mind, he set out on his three-year journey to create Children of the Galaxy.Development initially began on a different engine. Feeling that the engine was not up to par with his rendering needs, Filip searched for another C#-friendly game engine that would give Children of the Galaxy a polished feel, and that was also easily accessible. Eventually, through some shout-outs on Twitter, he discovered Xenko as a viable option. After some research into the engine and its features, he decided it was his best option to bring to life his vision for a game filled with galactic alien battles in the far reaches of space.In a recent discussion with Filip, he noted, “Using Xenko was pivotal for creating Children of the Galaxy. Its ease of use, nested prefab feature, PBR and how easy it was to import data really gave me the tools I needed to develop my game.”Children of the Galaxy is a 4X strategy game where the player is pitted against other alien races in a battle for survival. Carefully choose your tactics in this turn-based strategy game in a war for galactic domination.Children of the Galaxy is available now on Steam. Download it here!The Xenko team is proud to have such creative and talented developers using Xenko. This is the first in what we hope to be a long repertoire of developer showcases. We're looking forward to seeing what else our users have in store for us!"
  },{
    
    "title":"Xenko 2.0 Released",
    "excerpt": " After nearly two years of open beta, we’re proud to announce that **Xenko is now available as a commercial product**. Xenko 2.0 adds features such as full VR support,...",
    "author": "Silicon Studio Corporation",
    "date": "April 25, 2017",
    "category": "",
    "tags": "blog, search, Release",
    "url":"https://www.stride3d.net/blog/release-xenko-2-0-0/",
    "content":"After nearly two years of open beta, we’re proud to announce that Xenko is now available as a commercial product. Xenko 2.0 adds features such as full VR support, a pipeline rendering editor, light probes, and scene streaming management, along with greatly improved stability.Pricing Xenko Pro is free until December 31st No need to make your game open-source What about the beta versions? What’s new in Xenko 2.0? Scene hierarchy and scene streaming Virtual Reality Global illumination with light probes Light Shafts Graphics Compositor Improved Visual Studio experience Faster &amp; Lighter We’d like to thank all our beta users for their feedback, which helped us improve Xenko immeasurably over the last two years. We couldn’t have done it without you!Get Xenko 2.0Pricing 🔗Xenko remains free for individual users, small studios, and educational purposes. It will be available to larger businesses through a monthly subscription.Pricing for Xenko is broken into four tiers:Xenko Personal – Free but limited to small studios, personal use, and studentsXenko Pro – Designed for smaller studios at $75 per month per userXenko Pro Plus – Designed for larger studios at $150 per month per userXenko Custom – Available for teams with special requirements or large-scale projectsWhile the Xenko runtime source code remains open to everyone, the Game Studio source code is only available in the Pro Plus and Custom tiers. Personal and Pro users will be able to extend Game Studio via a plug-in system available later this year.Xenko Personal is not available to non-profit organizations and companies with yearly income above $200k. Additionally, Xenko Personal users must display a “Made with Xenko” splash screen in their applications.For more information about the pricing plan, see the official website pageXenko Pro is free until December 31st 🔗To give everybody a chance to check out Xenko 2.0, Xenko Pro is free until December 31st 2017.During this period, you can use Xenko without creating a Xenko account and the Pro Plus version will be available only by contacting the Xenko team.The Xenko Store opens on January 1st. From that date, Xenko Pro users must purchase a subscription, or switch to the Xenko Personal subscription if they’re eligible. The Xenko Pro Plus plan will also be available to buy from the online store.For more information about the welcome campaign, see the official website page.No need to make your game open-source 🔗From Xenko 2.0, all Xenko users (on any tier) can modify the source code and recompile the engine without having to open the codebase of their game. You can also redistribute modified Xenko source code to other Xenko licensees having access to the same plan as you.What about the beta versions? 🔗Beta Xenko versions will remain available for now under the same conditions as before, but will no longer receive updates. We’ll remove the beta versions at some point, so we encourage you to switch to Xenko 2.0. Remember that Xenko is free for individuals and small businesses.What’s new in Xenko 2.0? 🔗Scene hierarchy and scene streaming 🔗Working with scenes has become more flexible. Instead of a single scene, your game can now use a hierarchy of scenes to organize entities into levels, areas or layers, and let teams collaborate on them more efficiently.Game Studio displays child scenes together with their parent. Individual scenes can be loaded, unload, locked and moved around.When running your game, the default scene set in your game settings is loaded as the root scene and can be used to store persistent entities. More scenes can be dynamically loaded and unloaded from scripts and added as child scenes.var childScene = Content.Load&lt;Scene>(\"myChildScene\");SceneSystem.SceneInstance.RootScene.Children.Add(childScene);To get started, take a look at the new built-in SceneStreamingScript. It demonstrates background scene loading when passing through trigger volumes.You can now use a scene's Offset to move its entities both at design time and runtime.The ChildSceneComponent has been removed. We encourage all entities to be managed by a single entity manager and rendered by a single graphics compositor.Virtual Reality 🔗Enabling VR is now as simple as a single click!Xenko's clustered forward rendering, with its multisample anti-aliasing, makes it ideal for VR. Xenko uses a single API for every device, with native support for Oculus and HTV Vive (more devices coming very soon).Xenko comes with a VR game sample that shows you how to implement VR gameplay, including environment interaction and teleportation:Save valuable time by visualizing and testing VR directly from the scene editor:Global illumination with light probes 🔗Light probes capture the lighting at the position you place them. They simulate indirect light, the effect of light bouncing off surfaces and illuminating other surfaces.They can make a dramatic difference to the mood and appearance of your scene.Light probes can be placed freely and are processed per pixel. This means you can use them not only on small dynamic objects, but also large or static objects (until we have light maps for those!).Last but not least, you can now very easily capture a DDS cubemap from current camera position in editor, for use as a diffuse or specular skybox light.Light Shafts 🔗Xenko now supports shadow map-based light shafts for directional lights.Our implementation uses ray-marching rather than post effects, making the shaft visible and cool-looking even if the light source isn't visible.Graphics Compositor 🔗The graphics compositor is now a separate asset.Rendering parameters (such as VR) and post effect parameters can be tweaked in just a few clicks.This is just the first step towards making the graphics compositor easy to customize and extend. Stay tuned for more changes in future releases!Improved Visual Studio experience 🔗We now have full support for Visual Studio 2017!Xenko Visual Studio extension now supports Visual Studio 2017GameStudio recognize Visual Studio 2017.Games can use C# 7.0, and our script editor can recognize C# 7.0 and offer C# 7.0 refactoring thanks to Roslyn (you need to make your solution VS2017+ for it to work).Our internal AssemblyProcessor which perform various operations on generated assemblies can now work with portable PDB (as generated by .NET Standard projects)Programmers working with Xenko often go back and forth between Game Studio and Visual Studio. To make their lives easier, we made a few key improvements to the Xenko Visual Studio extension:You can now open the current solution in Game Studio directly from Visual Studio.Syntax highlighting didn't behave well when switching theme.Previously, when assets are compiling, MSBuild didn't report any progress until finished. It now displays information, warnings and errors while it compiles.Also, our whole build infrastructure and script editor is now based on the latest version of MSBuild 2017 and Roslyn. Supporting the new VS2017 Project System with .NET Standard is just a few steps away!Faster &amp; Lighter 🔗In order to provide a better experience for users, we've been working hard on various fronts to make the editor smoother and more responsive. This is still a work in progress and expect regular progress.Also, package size has been almost divided by 3, resulting in much faster download and install time.For the full release notes, see the dedicated page."
  },{
    
    "title":"Add Xbox Live Service to Your Xenko Project",
    "excerpt": " Discover how to integrate Xbox Live services into your Xenko game project with this step-by-step guide, enhancing player experiences and social features. ",
    "author": "Silicon Studio Corporation",
    "date": "March 09, 2017",
    "category": "",
    "tags": "blog, search",
    "url":"https://www.stride3d.net/blog/add-xbox-live-service-to-your-xenko-project/",
    "content":"Discover how to integrate Xbox Live services into your Xenko game project with this step-by-step guide, enhancing player experiences and social features.We have continued to work hard on our support in Xenko for Microsoft's Universal Windows Platform (UWP). Keeping with this, we've been working closely with our Microsoft partners to add official support for the Xbox Live SDK. So, now Xenko developers will have the opportunity to add Xbox live to their games.What is the Xbox Live SDK? 🔗The Xbox Live SDK is a set of APIs that power all social interactions on Xbox Live including friends, achievements, and multiplayer. Started originally on XBox, the service is now available on multiple other platforms.It is available on nuget.org for registered ID@Xbox developers.If you haven't yet joined ID@Xbox you can learn about the program and how to join here.Once you have applied to the program and have been accepted as a managed partner with Microsoft, feel free to get started using our newly created Xbox Live sample here.We hope you will give this a try, and let us know about your project! Feel free to leave any comments or suggestions below on how to improve the experience."
  },{
    
    "title":"Release and Pricing Information",
    "excerpt": " Explore the latest release details and pricing information for Stride 3D, the versatile game engine designed to power your creative projects. ",
    "author": "Silicon Studio Corporation",
    "date": "March 03, 2017",
    "category": "",
    "tags": "blog, search",
    "url":"https://www.stride3d.net/blog/release-and-pricing-info/",
    "content":"Explore the latest release details and pricing information for Stride 3D, the versatile game engine designed to power your creative projects.We are pleased to announce that Xenko will exit its beta stage on April, 2017 with the first commercial version of the engine!As we're still finalizing last details, the exact pricing model of the engine will be announced on the release day.We can let you know that:We are planning to switch to a monthly subscription model with several tiers (education, indie, etc.)The tier intended for indies will be free to useThe code source of the runtime will remain available for everyoneThe code source of the editor will be accessible only to the upper tiersWe will move from GPL to a custom license allowing developers to modify the engine without having to open their game sourcesThe beta versions will remain available to download for users already developing a game on itWe are thrilled to reach this next big step for Xenko and would like to particularly thank our users that have been working with the beta versions for the past two years.We look forward to seeing all of your projects after release!"
  },{
    
    "title":"Xenko Exhibits and Official Release News",
    "excerpt": " Silicon Studio is planning to announce the first official commercial release of Xenko at GDC! More details will be announced here in our blog in the coming weeks as...",
    "author": "Silicon Studio Corporation",
    "date": "February 22, 2017",
    "category": "",
    "tags": "blog, search",
    "url":"https://www.stride3d.net/blog/gdc-xenko-exhibit-info/",
    "content":"Silicon Studio is planning to announce the first official commercial release of Xenko at GDC! More details will be announced here in our blog in the coming weeks as well, so stay tuned!We’re also excited to announce that Xenko will be in two locations at GDC this year! We’ll be in the Silicon Studio booth, #624 in Moscone’s South Hall, and will be official sponsors at the IGDA Pavilion in the West Hall.We’ll be showcasing two cool, new demo games from Xenko. We will have our new VR demo, “Cave of Surtr” which will feature interactive gameplay using VR controllers. We’ll also be showcasing our third-person shooter demo game, “Starbreach”. Members from Xenko’s dev and marketing team will be around both of our exhibiting locations, so come and visit; we'll be happy to answer any of your questions!To schedule a meeting, contact us through our website or direct message us on twitter @xenko3d.We hope to see you soon at GDC 2017 in San Francisco!"
  },{
    
    "title":"Real-Time Local Reflections Preview",
    "excerpt": " We're excited to be working on Xenko's real-time local reflections feature, coming in Xenko's next release. Real-time local reflections are a great way to visually ground objects in a...",
    "author": "Silicon Studio Corporation",
    "date": "February 09, 2017",
    "category": "",
    "tags": "blog, search",
    "url":"https://www.stride3d.net/blog/real-time-local-reflections-preview/",
    "content":"We're excited to be working on Xenko's real-time local reflections feature, coming in Xenko's next release. Real-time local reflections are a great way to visually ground objects in a scene. They give your games richer scenes and increased realism in rendering.Without local reflectionsWith local reflectionsWhere the local reflections effect is available, it replaces image-based lighting (called environment lighting in Game Studio). This has the useful side effect of darkening surfaces where the object meets other objects, similarly to ambient occlusion.Local reflections are most obvious when they project bright spots onto other surfaces. The effect looks great in night scenes, which have high contrast, and in rainy conditions with lots of reflective surfaces and highlights. Notice how the vending machine lights are reflected in the ground surface in this screenshot:In games without lightmaps or global illumination, objects don't interact with each other as they do in reality, making them appear as if they have simply been Photoshopped in. With local reflections, objects appear to be part of the world rather than having been placed arbitrarily. It makes scenes feel much more grounded, and gives objects a feeling of weight.To create local reflections, Xenko reflects the current rendered frame on itself. The technique employs a Hi-Z trace as described in Yasin Uludag's essay &quot;Hi-Z Screen-Space Cone-Traced Reflections&quot; in the book, &quot;GPU Pro 5: Advanced Rendering Techniques&quot;.Essentially, the effect allows the ray steps during the marching phase to skip large amounts of space. When the ray hits hierarchical depth cells, the algorithm progressively refines the level against which cells are checked until it hits the finest level.(Image courtesy of Yasin Uludag and Tomasz Stachowiak's talk on screen space reflections) A series of later treatments generates blurriness to approximate how reflections behave on rough surfaces. We've managed to keep the time per frame relatively low (3ms at 720p on GTX960), but the feature works best on high-end computers.Local reflections are a great tool to have in your kit, but aren't appropriate for every object. It's a screenspace effect, meaning it only reflects images that are already on the screen; it doesn't reflect objects that are off-screen or obscured from the player by other objects. Put simply, if the player can't see an object at that moment, then the object isn't reflected. This means local reflections work well in enclosed areas such as corridors and rooms, but less well in open spaces. They also work best on bumpy surfaces, whose chaotic properties hide imperfections in the reflection. They work less well on glossy, mirror-like surfaces, because you naturally expect these surfaces to reflect the whole world.The local reflections feature will be released in Xenko soon. In the meantime, keep your eyes peeled for more upcoming features!"
  },{
    
    "title":"Some Basic Xenko Facts",
    "excerpt": " Uncover fascinating insights and essential facts about the Xenko game engine, empowering your creativity and enhancing your game development journey. ",
    "author": "Silicon Studio Corporation",
    "date": "February 03, 2017",
    "category": "",
    "tags": "blog, search",
    "url":"https://www.stride3d.net/blog/some-basic-xenko-facts/",
    "content":"Uncover fascinating insights and essential facts about the Xenko game engine, empowering your creativity and enhancing your game development journey.When looking at new game engines or software, it’s easy to get lost in feature details. So we thought we’d step back and take a moment to discuss some Xenko facts. If you are curious about the basics of Xenko, our in beta, open source, full C# game engine, this post will explain some of Xenko’s main characteristics along with system requirements.Some of the benefits that Xenko brings users are its high-quality and flexible rendering, advanced C# scripting system, and upcoming VR support. Xenko’s editor, Game Studio, provides users a straightforward layout which allows users to easily start making games.Xenko is still a relatively young game engine, and not yet as mammoth (or dare we say &quot;brittle&quot;) as some of the more mature game engines that are commercially available. Being an open-source engine means that it's easy to customize, allowing users the ability to control almost every aspect of their development. It’s also worth noting that the Xenko engine itself is implemented in C# and always supporting the latest versions of C# and the .NET Framework. C# is the most widely used programming language among game developers, offering a great user experience when it comes to iterate on games quickly and efficiently.With Xenko, you can currently develop games for the following platforms and graphics backends:Windows (Desktop): DirectX / OpenGL / VulkanLinux/Mac: OpenGL / VulkaniOS/android (via Xamarin): OpenGL ESUWP &amp; XBox One: DirectXYou can learn more about supported platforms in our documentation.Note: since the release of Xenko 1.9β, shared game assemblies are created using .NET Standard rather than PCL (Portable Class Library). You can learn more about why we made that decision in our earlier blog post, Toward a Better .NET!You can currently develop games with Xenko only on Windows. We do not support Xenko game development on Mac yet.For the system requirements, the Xenko install takes approximately 5GB and a minimum of 4GB of RAM; however 8GB of RAM is recommended for heavy 3D games or applications development. See Xenko’s development requirements for more details.While the Xenko documentation is under way and improving daily, you may also find it beneficial to peruse our blog for each of our earlier beta releases to learn more on which features and techniques are implemented in Xenko. Of course, all of these features are in our documentation as well.We hope this quick runthrough helped answer some of the fundamental questions we receive often about Xenko. Stick around for more news coming soon!"
  },{
    
    "title":"Feature Spotlight: Particle Effects",
    "excerpt": " Dive into the world of particle effects with Stride3D's comprehensive guide! Learn how to create mesmerizing visuals in your 3D projects using particles, tips on optimizing performance, and inspiring...",
    "author": "Silicon Studio Corporation",
    "date": "January 18, 2017",
    "category": "",
    "tags": "blog, search, Particles",
    "url":"https://www.stride3d.net/blog/particle-effects/",
    "content":"Dive into the world of particle effects with Stride3D's comprehensive guide! Learn how to create mesmerizing visuals in your 3D projects using particles, tips on optimizing performance, and inspiring examples from the industry. Master the art of visual storytelling with Stride3DHappy 2017! 🔗For our first post of the year, we're moving the spotlight back to a cool Xenko feature: particles. Particles are such an important aspect of almost every game and as a follow-up to our particles tutorial, we wanted to share with you a little more info about our particle system.With Xenko's powerful particles system, you can implement effects like rain, explosions fire, smoke, electricity, magic spells, and lots more. Particles are a great way to bring your game worlds to life.You can build particle effects completely inside Xenko Game Studio. Just add a Particle System component to your entity. The system is extensible, and any part can be customized in depth. And because Xenko is open-source, you can modify the code as you need.Unlike legacy game engines, the Xenko particle system is modular: you add only the options you need, and remove anything you don't. This means no wasted CPU cycles loading effects you're not using.To demonstrate how you can build particle effects from scratch in Xenko, we've put together a trail effect tutorial. Follow the steps to add a trail effect to a sword slash animation.And to give you a taste of where you can go after that, here's a more elaborate trail that combines multiple particle effects:If you'd like to see how this particular effect works, download the project file and take a look.Don't forget, Xenko comes with some pre-made particles included as prefabs in the asset packs, too. To check them out, just select the Particles asset pack when you create a project.We're really busy working on some important new features. Stay tuned for more news about what's to come.Happy tinkering!"
  },{
    
    "title":"Happy Holidays 2016",
    "excerpt": " Thanks for following us through another action-packed year of development. We think we've made some great progress on Xenko this year, and we hope you've made some cool stuff...",
    "author": "Silicon Studio Corporation",
    "date": "December 22, 2016",
    "category": "",
    "tags": "blog, search",
    "url":"https://www.stride3d.net/blog/happy-holidays-2016/",
    "content":"Thanks for following us through another action-packed year of development. We think we've made some great progress on Xenko this year, and we hope you've made some cool stuff with it too.Season's greetings from the Xenko team! 🔗Exciting things are happening for Xenko in 2017, so stay tuned. Until then, have a great holiday season!"
  },{
    
    "title":"Back to Normals",
    "excerpt": " Xenko 1.9.2β fixes an important issue with our normal maps. We have recently reviewed our normal map settings and shaders. Unfortunately, a lot of them cover cases that were...",
    "author": "Silicon Studio Corporation",
    "date": "December 13, 2016",
    "category": "",
    "tags": "blog, search, Education",
    "url":"https://www.stride3d.net/blog/back-to-normals/",
    "content":"Xenko 1.9.2β fixes an important issue with our normal maps. We have recently reviewed our normal map settings and shaders. Unfortunately, a lot of them cover cases that were previously missing or unclear, so automated conversion of the assets is not possible.TL;DR What are normal maps? Settings Texture asset Material Asset Future Plans TL;DR 🔗Set the Hint of your texture asset to Normal MapIn most cases, check Scale &amp; Offset in your materialIf your texture asset is Compressed, check Reconstruct Z in your materialIf green colors in your normal map should be facing &quot;up&quot;, check Y is up in your materialWhat are normal maps? 🔗(Image courtesy of Julian Herzog shared under Creative Commons 4.0)Normal maps are a way to simulate fine details in the surface of a mesh without relying on high polygon representation. When used in combination with lighting they produce believable image which appears fully 3D even on a flat surface.Normal maps usually represent small changes of the normal vector (the vector which points out of the surface). Xenko Game Studio uses the most common convention, that the X and Y components follow the tangent and the bitangent of the surface, and the Z component follows the normal vector of the surface. This means that a value of (0, 0, 1) will coincide with the normal vector and will represent no change, while a value of (-1, 0, 0) will be strongly tilted to the &quot;left&quot;, (&quot;left&quot; being negative X value in the tangent (local) space).Settings 🔗Texture asset 🔗In additional to the common texture settings, there are a couple of options you should pay attention to when importing normals.Hint 🔗If you plan to use a texture as a normal map, this should be set to Normal Map. This makes sure that the texture is assumed to be in linear color space and gets converted to a format suited for normals.Format 🔗Compressed - Xenko will compress your texture in the most appropriate format for each platform. This will enforce some settings on the material side (see below). The compressed image will be unsigned, even if your input format is signed.As-Is - Xenko will import the texture with the format you have supplied, as long as the target platform supports it.Material Asset 🔗In your Material properties, in the Geometry category, choose Normap Map as a Surface option. There are different input options, the default being texture. Select your texture and confirm the options below are correct.Y is up 🔗Normal maps represent vectors in tangent space. The surface's tangent is aligned with the horizontal texture direction and its bitangent with vertical direction. Depending on your normal map authoring tool and its settings, the bitangent is assumed to face either &quot;up&quot; or &quot;down&quot; the texture.By default, Xenko assumes it is &quot;down&quot;. Therefore, high green values indicate a surface facing &quot;down&quot;. If instead your green values are supposed to make the normals facing &quot;up&quot;, select this option.Many tools, such as the Nvidia Normal Map Filter for Photoshop, let you customize the output by flipping some of the vectors. Please confirm which convention your tool uses.Reconstruct Z 🔗This option reconstructs the Z component from the X and Y components, assuming that X2 + Y2 + Z2 = 1 and that Z is always positive, so that no normal vector can point to the back side of the surface.This is necessary when storing normals in a 2-channel texture, throwing away the Z component.Xenko might select such a format when you choose to Compress a normal map, so this option needs to be enabled.Please note that this option will likely disappear in the future and be automatically inferred from the texture options and target platforms.Scale &amp; Offset 🔗Most textures contain unsigned colors, meaning the red, green and blue channels are in the [0..1] range. However, normals require the signed range [-1 .. +1]. If your normal map is stored in an unsigned texture, this option will make sure that the values are properly scaled by x2 and then offset by -1.Since normal maps are usually stored in unsigned formats, this option is enabled by default.However, if you import your textures with the AsIs option and your input texture is signed, clear this option.Future Plans 🔗Some of the options, such as Scale &amp; Offset and Reconstruct Z, can be automatically inferred from the texture format so they will likely disappear. Y is up will become an option of your texture asset."
  },{
    
    "title":"Feature Spotlight: Archetypes, Prefabs, and Nested Prefabs",
    "excerpt": " We released two really cool features, archetypes and prefabs, back in Xenko 1.6β. Open the post to see how these save our developers time. ",
    "author": "Silicon Studio Corporation",
    "date": "December 07, 2016",
    "category": "",
    "tags": "blog, search, Archetypes, Prefabs, Education",
    "url":"https://www.stride3d.net/blog/feature-spotlight-archetypes-prefabs-and-nested-prefabs/",
    "content":"We released two really cool features, archetypes and prefabs, back in Xenko 1.6β. Open the post to see how these save our developers time.Finding yourself constantly duplicating or updating the elements for your game? In Xenko 1.6β, we introduced archetypes and prefabs. These let you share properties between assets and elements of your games. Create reference assets and modular blocks for your scenes, embed them together, let Game Studio automatically update them when needed and save tons of time!Archetypes Prefabs Override Prefab Properties Nested Prefabs Improve Performance With Prefab Models Archetypes 🔗With archetypes, you can take an asset and derive a new asset from it. The new asset uses the original asset as the archetype, which means it shares its properties. If you modify the archetype, the derived asset also changes. This means that instead of editing each asset individually, you can edit the archetype and Game Studio automatically updates every derivative asset at the same time.You can also override specific properties in the derived asset. These properties become specific to the derived asset. They aren't affected by further changes to the value in the archetype, but all other properties stay synchronized. This lets you create different versions of an asset that still share a common base.Prefabs 🔗Prefabs are an extension of the archetype feature. A prefab is a bunch of entities organized hierarchically with components like models, collider shapes, lights, scripts, and so on. Then you add instances of that prefab to your scene, just as you would with a model or other asset. This creates a copy of each entity in the prefab, with the same hierarchy, and links them to the corresponding entity in the prefab. Any change you make to an entity in the prefab is automatically applied to all your instances. Game Studio updates entities in real time, so you can see every change immediately.The most common use for prefabs is to create a small piece of your world - like a car, a rock, a piece of furniture, an NPC, or whatever - and duplicate it as many times as you need. When you need to modify that object - for example, if you want to add a light or particle effect, or add or move its entities - you can do it in one place and Game Studio applies the change automatically everywhere at once.You can change the entity hierarchy on the instance side without breaking the link to the original prefab. When you add an entity to the prefab, Game Studio adds it to the same parent or after the same sibling. If you delete the parent entity in the instance, Game Studio discards the entity. This means you can easily instantiate simple prefab subsets.Override Prefab Properties 🔗Of course, you can override prefab properties, just like with archetypes. Change any prefab instance and the change remains in that instance even if you then edit the original prefab.Nested Prefabs 🔗You can also nest prefabs inside other prefabs. This means you can build your project in a modular way. For example, you can create a room prefab, then use that to create a house prefab, then use that to create a village. Change something in the room prefab - like a piece of furniture - and the change appears in every house and every village where the room is used. Or you could create a basic prefab for every NPC, attach a script, then create variations to implement different NPCs: animals, monsters, AI companions, soldiers - whatever you need. There's no limit to the amount of prefabs you can nest.Improve Performance With Prefab Models 🔗If building everything at a detailed level with prefabs is affecting performance, Xenko has an experimental feature that lets you generate 3D models from prefabs. Just create a Prefab Model asset and drag your prefab into it. When you modify the prefab, every prefab model instance updates with the changes. We're extending the feature to physics colliders, and improving the workflow so you can group entities more easily. We’ll talk about that in a future blog post.In the meantime, have fun with prefabs! They make managing your project a whole lot easier."
  },{
    
    "title":"Newly Added Game Templates",
    "excerpt": " With Xenko 1.9β, we’ve released our brand spanking new Game Templates! Super fun stuff, so open the blog post to see more! ",
    "author": "Silicon Studio Corporation",
    "date": "December 01, 2016",
    "category": "",
    "tags": "blog, search, Templates",
    "url":"https://www.stride3d.net/blog/game-templates/",
    "content":"With Xenko 1.9β, we’ve released our brand spanking new Game Templates! Super fun stuff, so open the blog post to see more!Templates were designed to help bring your game ideas to life faster. With Xenko 1.9β you can now create a project more efficiently with our new templates, which will help kickstart your game development efforts!We’ve started transitioning from small individual samples to more complete game templates and asset libraries to help you get the most out of Xenko. In the spirit of transitioning Xenko to an overall-game-dev-solution-provider, we’ve implemented templates for three popular game design genres - which you can now use as a starting point for your game.The three templates we’ve added are:First-Person Shooter Third-Person Platformer Top-Down Camera RPG New Game Template First-Person Shooter 🔗Arguably one of the most popular game genres today. Xenko’s FPS template helps our developers put together a game with a pre-set, first-person camera where you can shoot at the Xenko crates. The controls support both controllers and mouse/keyboard input. The crates come with physics' collider bodies and are fully interactive. The template also shows how to spawn particle effects alternating between bullet impact effect and a smoke trail depending on if you shoot a wall or a crate. Production quality model and animation assets make it easy to learn about controlling and switching animations.Third-Person Platformer 🔗This template is a great starting point for ever-popular platformer games. While the template is set in 3D it can be easily tweaked to become a 2D platformer. Just disable camera rotation in your 3D game to transform your game into a 2D platformer. Additionally, we’ve implemented a few techniques which we hope will be useful to you. Controls will now support both controllers and mouse/keyboard style input. The animation controller seamlessly blends the idle, walk and run animations providing striking visual feedback.Top-Down Camera RPG 🔗This template positions the camera at a fixed angle above the character and enables touch screen controls as well as mouse point-and-click, similar to many traditional RPGs. It also uses the Navigation Mesh feature so your character won’t get stuck in bad pathfinding or hit walls. On the game logic side, the template shows several kinds of interactions with game objects, like collecting coins and loot and attacking and breaking objects.New Game Template 🔗Our New Game template has access to existing production quality assets we used to create our templates! We have particle effects, physically-based materials, lots of animations for our new Xenko mannequin model and building blocks with physics ready for your rapid level prototyping. Unlike the templates, which are kept concise, the extra packages contain many more assets. You’ll even find some props which are not in the templates (swords for example!).As always, we are committed to offering you best-in-class game dev solutions directly in Xenko’s Game Studio.Additionally, we are looking to be able to give our users the opportunity to make their own templates that you will be able to share with other Xenko users. Of course, we’re planning on offering more templates as well. Keeping in line with our goal to become one of the best game engines for VR, we are also planning on adding a VR template in the not very distant future.Do you have a template that you’d like to see on our Roadmap? Let us know in the comments!"
  },{
    
    "title":"Xenko 1.9 Beta Released",
    "excerpt": " Xenko release 1.9 Beta introduces several major new features along with several relevant enhancements to existing features. We are excited to offer three new game templates to speed up...",
    "author": "Silicon Studio Corporation",
    "date": "November 24, 2016",
    "category": "",
    "tags": "blog, search, Release, Education",
    "url":"https://www.stride3d.net/blog/new-version-1-9-0/",
    "content":"Xenko release 1.9 Beta introduces several major new features along with several relevant enhancements to existing features. We are excited to offer three new game templates to speed up your game design time, a brand new script editor as well as expanded copy-paste functionality and the last major new feature is our new Navigation Mesh system.Highlights Game Templates Script Editor Navigation Meshes Copy &amp; Paste Functionality Expanded .NET Standard Assembly Reloading Breaking changes Windows Phone and Windows Store Removed .NET Standard Asset Serialization Dropping Support for Windows Store 8.1 and Windows Phone 8.1 Changelog Version 1.9.0-beta Enhancements General Game Studio Assets Engine Audio Materials Particles Physics Issues Fixed General Game Studio Assets Engine Animation Known Issues Highlights 🔗Game Templates 🔗We have added several templates packed with a lot of functionality to help you kickstart your games. Choose from:First Person ShooterThird Person PlatformerTop-View RPGAll of them come with basic camera and player functionality found in most games of their respective genres. They also have many production-quality assets so you can easily try different features on your own.In addition to the game templates, the New Game project now includes optional packages with all the assets we used to build the samples. Unlike the game templates which are trimmed down, the optional packages include ALL assets, including some which are not used by any Xenko sample.Script Editor 🔗To ease friction from switching back and forth between the Game Studio and your IDE, we’ve built a new Script Editor. Relying fully on Visual Studio is no longer necessary because you can now edit your code directly within the Game Studio itself. You’ll get full syntax highlighting, auto-completion, live diagnostics and even the ability to auto-reload C# files and projects that changed on your hard drive due to changes in your external editor (e.g., Visual Studio).In fact, expect:Highlight, auto-completion and live diagnostics is available in the Xenko API, your own game code and libraries that you useAuto-reload C# scripts and C# project changes that happened in the backgroundA Visual Studio like experience for all your code editing!We had some help from Microsoft’s .NET compiler, Roslyn, so Xenko users will also receive the full benefit of all the latest features of .NET. Adding a Rosyln-based Script Editor makes it easier to keep up with the latest C# updates.Using the Xenko Script Editor is fairly straightforward. Just follow these steps:Create a new project/game in Game StudioAdd a script in Game StudioEdit the script in Game StudioC# scripts saved on Visual Studio side (or any text editor, for that matter) will automatically be updated in Game Studio without reloading. Same goes for project changes (.csproj): new scripts will appear automatically upon saving. GameStudio will automatically listen for file changes on the hard drive and update them live, or ask you what to do in case of conflicts.Under the hood, Rosyln is the underlying technology that can process your Xenko source code. But we didn’t stop there! We were fortunate to find AvalonEdit, which provided us what we wanted for the visual appearance of the UI aspect of the Xenko script editor. We also integrated RoslynPad, which connects Roslyn and AvalonEdit together.Navigation Meshes 🔗In Xenko 1.9 Beta, you can create a navigation mesh powered by Recast and Detour with real-time feedback directly in the Xenko GameStudio! The navigation mesh is especially useful for RPGs or top-down strategy games, as you can use it to guide characters through complex scenes. The real-time feedback makes it easy to adjust and conveniently customize AI movement and the dimensions of the navigation mesh itself. The green outline of Xenko’s Navigation Mesh shows where the AI comes into play and where the colliders are set.In the videos, you can see how the AI navigates the level using the logic within the navigation mesh, and how the colliders will automatically be set in real-time. Of course, you can script AI movement manually, too.Copy &amp; Paste Functionality Expanded 🔗In the past we only supported copy and pasting of assets, but now you can copy-paste pretty much anything in the Game Studio.Any entities in a scene are now copyable, as well as any sprites of a sprite sheet, UI elements, or even a single property in the property grid! For instance, you can copy a list and perform any of the following operations.Insert it into another list at various positions, for example:Copy and insert into the list (by pasting at a list item level).*Copy and append to a list, for example, append it to the end of the list.Copy and replace the whole list.A bit more difficult to explain, but perhaps easier to show than write about is copy and replace at an item level. This action (shown in the video below) will remove the item (at its position in the list) and insert the copied ones starting at the same position of the item in the list. In our example below, the copy replace starts from Item 2 in List 2:Some information about copying entities and prefabs:An entire hierarchy of entities can be copied from one scene or prefab to another scene or prefab. Prefab instance will keep their reference to the source prefab as illustrated in the following example:The prefab &quot;MyHero&quot; is copied into the scene. Links to the prefab are maintained.It is also possible to copy a component from an entity and paste it into another entity.Any property that can be serialized can be copied. You can copy something from one scene to another scene, from a sub-element in one scene to another scene and even from a scene to a text file, back and forth as needed. You can also copy simple values in the property grid (e.g., primitives such as int, vector3, string…) between separate Game Studio instances if that is something you find practical and useful.Here’s an example of copying between scripts and transform entities in the GameStudio Property Grid:.NET Standard 🔗Starting with Xenko 1.9, shared Game assemblies will be created using .NET Standard rather than PCL.It offers many advantages: much better API surface for the developer, improved forward and backward compatibility, reduced fragmentation, finer-grained modularity of the framework, easier to write cross-platform apps, more frequent updates, etc.Newly created applications will target .NET Standard 1.4, but users are of course free to target a different version. Also, your existing PCL projects will still work as is, but we recommend you to update your projects to .NET Standard!Assembly Reloading 🔗Iterating on code is very important. So far, Xenko was supporting changes in scripts: as soon as you saved any C# file, Game Studio was offering to recompile and reload the assembly with the updated scripts. If there is an error loading the type, you can still edit other part of the asset, save it back while preserving the parts that could not be loaded.In this version, we generalized the approach so that any type embedded in your assets can be reloaded! As a result, you can now implement your own classes for anything you want directly in your game or plugin assemblies, and keep editing them without restarting the Game Studio.This includes renderers, material features, and will soon be extensively used in new assets.Breaking changes 🔗Windows Phone and Windows Store Removed 🔗Windows Phone and Windows Store platforms are both removed.Please use the newer Universal Windows Apps (UWP) instead. This platform was previously known as Windows 10.Projects will be automatically upgraded to reflect this change.Also, we renamed preprocessor definition SILICONSTUDIO_PLATFORM_WINDOWS_RUNTIME into SILICONSTUDIO_PLATFORM_UWP..NET Standard 🔗The switch to .NET Standard for newly created projects implies that:Runtime .NET framework requirement when distributing your projects is bumped from .NET 4.5 to .NET 4.6.1.You need Visual Studio 2015 to open and compile newly created projectsYou can upgrade older projects to use .NET Standard using Visual Studio 2015 Update 3 (in project properties)From version 1.9, we don't install prerequisites to compile PCL projects anymore. If you have somebody in your team still working on a project created with a previous version of Xenko on a fresh PC, please make them install Xenko 1.8 so that it installs the proper prerequisites (even if the project has been updated to a newer version of Xenko).Asset Serialization 🔗We changed how we serialize asset in YAML. We introduced new concepts that improve how we can track overrides between an archetype or a prefab and assets/entities inheriting from it. Although everything happens &quot;under the hood&quot;, this is a actually a heavy change that might impact the upgrading of your project.We removed asset upgrading for projects made with version 1.3 and below (released more than a year ago). It is possible that you experience some issues when upgrading a project made with versions 1.4 to 1.7, but you should properly be able to upgrade any project that uses version 1.8. However a few cases are not supported:Dependency Properties of UI elements that are overridden from an UI library will be reset during upgrade. Therefore, properties such as Grid Column and Row will have to be manually restored.Some case of overriden materials in the material list of ModelComponent might be improperly upgraded.Dropping Support for Windows Store 8.1 and Windows Phone 8.1 🔗To properly support the .NET Standard 1.4 and offer our developers a more up-to-date and robust API, we decided to drop support for Windows Store 8.1 and Windows Phone 8.1 platforms.As Microsoft seems to be focusing on Universal Windows Platform (UWP), we’ve also decided it was best to refocus on more pertinent and relevant platforms for Xenko users. UWP was introduced with Windows 10, and a whole range of devices already support it.Of course, you are free to stick with Xenko 1.8 in case you have a project targeting one of those two platforms -- we know this is a big change, and we will make every effort to help our developers with this transition. We apologize for the inconvenience, and aim to bring you a top-notch .NET user experience!Just as a reminder, we already support Universal Windows Platform (UWP) on x86, x64 and ARM as of Xenko 1.8, which means games and apps developed with Xenko can be deployed on a whole range of Microsoft devices, including Xbox One. Until 1.9, this platform was named Windows10 in Xenko, but we took the liberty to rename it UWP to better match the official naming.Changelog Version 1.9.0-beta 🔗Release date 2016/11/24Enhancements 🔗General 🔗From now on, new projects are created as .NET Standard projects rather than PCL projects.NuGet restore is automatically run on projects having a project.json fileBumped FBX SDK to 2017.0.1Mesh importing now supports ByEdge smoothing which was previously ignored. If you notice any difference with vertex normals for your models please check your FBX export settings.Prerequisites installer will ask for UAC once instead of many times, and perform a silent installation for all of the prerequisites.Game Studio 🔗Previously, when an EntityComponent (i.e. script) couldn't be loaded because game or plugin assembly didn't compile properly, we kept a Yaml representation of it so that it could be saved or reloaded after a code fix. Now we allow it to happen anywhere, so that you can use and/or implement custom classes for any type of the engine in your game/plugin.Improve asset logs and errors to properly display failure/warning icon on all assets, including the one with icon-style thumbnails.Improve loading/refreshing of assets in the scene editor.Asset editors will display a * in the tab name when an asset is dirty.Add editor for C# source code.C# files and .csproj files are automatically reloaded as they are modified on hard drive (using a Yes, Yes to All, No, No to All dialog).C# files have their own undo/redo stackAdd a Save All button that saves both assets and source code files.The Game Studio now uses AvalonDock as docking systemImprove DPI support (#454 and #470)Assets 🔗Asset YAML serialization has been changed to handle overrides in collection in a better way. More scenario of overrides are now supported.SharpYaml has been integrated into our codebase as SiliconStudio.Core.Yaml. Most of the duplicated types have been merged back in the SiliconStudio.Core.Reflection.Assets don't use a ~Base section nor a ~BasePart.Change Asset.Id to be of an AssetId type rather than Guid, to avoid invalid comparisons with other kind of ids.Remove the Properties member of Package.Introduce a new assembly Assets.QuantumOverrides of properties is now handled using Quantum instead of ShadowObject.Remove the asset diff/merge classes.Engine 🔗DataSerializers are now generated in a file with .pdb information, so that the user can debug them.Add Local offsets to procedural models.EntityComponent now implements IIdentifiable and has an Id property.Audio 🔗Add SetRange support to AudioEmitterSoundControllerImprove compilation speed of audio filesMaterials 🔗Normal maps now have the option to Invert Y, supporting both textures where the green component is facing up or downParticles 🔗Minor optimizations around vertex buffer buildingAdd StopEmitters() method to the particle system, which prevents new particles from spawning without pausing the entire systemPhysics 🔗Add Cone collider shape.Replace float with AngleSingle for MaxSlope of character controllers.Issues Fixed 🔗General 🔗UWP platform now uses UniversalWindowsPlatform 5.2.2 (was previously 5.0.0).Game Studio 🔗Fix many issues with property overrides.Fix many issues when setting/overriding materials in ModelComponent.Asset logs were not properly sent forward to editor, resulting in an empty log for all assets.Sometimes there was a deadlock when compiling effects due to the way we were using the thread pool and task continuations.Fix performance issue that could occur when duplicating entities with the same name many times.Fix 'Rename' menu entry when right-clicking a folder of the scene editor.Fix crashes in the UI editor that could occur when deleting or moving an element.Fix crashes in sprite sheet editor that could occur when deleting, duplicating or moving sprites.Fix sort order of assets in the asset view.Assets 🔗Fix tangents of imported meshes, when transforms are negative along some axesEngine 🔗Several issues with spot lights were fixed, including shadow mapsFix flickering of some materials when no ambient light is presentFix an issue on OpenGL that caused low frame rates when using post effects, due to blocking GPU-readbackAnimation 🔗Fix a bug where an empty animation clip caused a crashKnown Issues 🔗On Linux, when switching the underlying Graphics Platform, rendering will not occur or fail. Delete the cache, local and roaming folder on the Linux host and restarting the game should fix the issue.Performance issues on mobile (being worked on)"
  },{
    
    "title":"Script Editor Preview",
    "excerpt": " Switching back and forth between your game development editor and your IDE for small changes starting to wear on you? Well, you can look forward to losing many of...",
    "author": "Silicon Studio Corporation",
    "date": "November 18, 2016",
    "category": "",
    "tags": "blog, search",
    "url":"https://www.stride3d.net/blog/script-editor/",
    "content":"Switching back and forth between your game development editor and your IDE for small changes starting to wear on you? Well, you can look forward to losing many of those unnecessary steps because Xenko is bringing you our new Script Editor feature - available soon in Xenko 1.9 Beta. Open the blog post for the full details!Feeling the pain of switching back and forth between the Game Studio and your IDE? We hear ya! We know how annoying it can be, so that’s why we think we’ll save you some time and frustration with Xenko’s Script Editor!With our new Script Editor, relying fully on Visual Studio is no longer necessary, because now you can edit your code directly within the Game Studio itself! You’ll get full syntax highlighting, auto-completion, live diagnostics and even the ability to auto-reload C# files and projects that changed on your hard drive due to changes in your external editor (e.g., Visual Studio).In fact, expect:Highlight, auto-completion and live diagnostics is available in the Xenko API, your own game code and libraries that you useAuto-reload C# scripts and C# project changes that happened in the backgroundA Visual Studio like experience for all your code editing!We had some help from Microsoft’s .NET compiler, Rosyln, so Xenko users will also receive the full benefit of all the latest features of .NET. Adding a Rosyln-based Script Editor makes it easier to keep up with the latest C# updates.Okay, so let’s get back to the important stuff, like how to use the Xenko Script Editor, which is fairly straightforward.Just follow these steps:Create a new project/game in Game StudioAdd a script in Game StudioEdit the script in Game Studio(Optional) Click “Reload assembly” when you’re readyC# scripts saved on Visual Studio side (or any text editor, for that matter) will automatically be updated in Game Studio without reloading. Same goes for project changes (.csproj): new scripts will appear automatically upon saving. GameStudio will automatically listen for file changes on the hard drive and update them live, or ask you what to do in case of conflicts.Under the hood, Rosyln is the underlying technology that can process your Xenko source code. But we didn’t stop there! We were fortunate to find AvalonEdit, which provided us what we wanted for the visual appearance of the UI aspect of the Xenko script editor. We also integrated RoslynPad, which connects Roslyn and AvalonEdit together. We were lucky to be able to take advantage of these great Roslyn related efforts, and appreciate all the hard work the developers and contributors have put into RoslynPad and AvalonEdit, further strengthening the .NET ecosystem.Overall, we were extremely pleased with these libraries; thus the C# Script Editor was much easier than expected to build. And, since Roslyn is now integrated into our code codebase, it will allow us to do more cool stuff in the future, such as:Code upgrades (i.e. if we rename members or refactor some classes, we could automatically update the code of your older projects)Better code analysisWith Roslyn now integrated into our codebase, soon we’ll be able to share with you a pretty awesome surprise we have coming, so stay tuned for more info in the next few months!"
  },{
    
    "title":"Navigation Mesh Preview",
    "excerpt": " In Xenko 1.9 Beta, you can create a **navigation mesh** powered by [Recast and Detour](https://github.com/recastnavigation/recastnavigation) with **real-time feedback** directly in the **Xenko GameStudio!** The navigation mesh is especially useful...",
    "author": "Silicon Studio Corporation",
    "date": "November 11, 2016",
    "category": "",
    "tags": "blog, search",
    "url":"https://www.stride3d.net/blog/navigation-mesh/",
    "content":"In Xenko 1.9 Beta, you can create a navigation mesh powered by Recast and Detour with real-time feedback directly in the Xenko GameStudio! The navigation mesh is especially useful for RPGs or top-down strategy games, as you can use it to guide characters through complex scenes.The real-time feedback makes it easy to adjust and conveniently customize AI movement and the dimensions of the navigation mesh itself. The green outline of Xenko’s Navigation Mesh shows where the AI comes into play and where the colliders are set.In the videos, you can see how the AI navigates the level using the logic within the navigation mesh, and how the colliders will automatically be set in real-time. Of course, you can script AI movement manually, too."
  },{
    
    "title":"Toward a Better .NET!",
    "excerpt": " We’d like to announce some of our plans for the coming months, and also notify our users of some big changes that will be coming with release 1.9. Namely,...",
    "author": "Silicon Studio Corporation",
    "date": "November 02, 2016",
    "category": "",
    "tags": "blog, search",
    "url":"https://www.stride3d.net/blog/toward-a-better-dotnet/",
    "content":"We’d like to announce some of our plans for the coming months, and also notify our users of some big changes that will be coming with release 1.9. Namely, we’ll be dropping support for Windows Store 8.1 and Windows Phone 8.1.Switch to .NET Standard 🔗Starting with Xenko 1.9, shared Game assemblies will be created using .NET Standard rather than PCL.It offers many advantages: much better API surface for the developer, improved forward and backward compatibility, reduced fragmentation, finer-grained modularity of the framework, easier to write cross-platform apps, more frequent updates, etc.Newly created applications will target .NET Standard 1.4, but users are of course free to target a different version. Also, your existing PCL projects will still work as is, but we recommend you to update your projects to .NET Standard!What’s next? 🔗Microsoft also announced many improvements to come in Visual Studio 15. Once it is released, we will also follow the trend by moving project.json information to .csproj.We will probably change any newly created project to target .NET Standard 2.0, and the Xenko runtime itself will probably switch to the .NET Standard for easier portability.Additionally, we plan to support C# 7.0 as soon as possible, and plan to offer CoreCLR/CoreRT runtime on more platforms as those two runtimes mature.C# 7.0 and future versions focus not only on language usability but also on tackling some performances issues (ref locals, stack allocation, etc.), and since we’re making a game engine, we couldn’t be more happy!Overall we are very excited with how dynamic the new .NET ecosystem is becoming, and we plan to consistently provide you with the latest .NET changes so that you can enjoy coding faster and better!.NET future looks very bright, so kudos to Microsoft!Bye Windows Store 8.1 and Windows Phone 8.1, long live Universal Windows Platform (UWP)! 🔗To properly support the .NET Standard 1.4 and offer our developers a more up-to-date and robust API, we decided to drop support for Windows Store 8.1 and Windows Phone 8.1 platforms.As Microsoft seems to be focusing on Universal Windows Platform (UWP), we’ve also decided it was best to refocus on more pertinent and relevant platforms for Xenko users. UWP was introduced with Windows 10, and a whole range of devices already support it.Of course, you are free to stick with Xenko 1.8 in case you have a project targeting one of those two platforms -- we know this is a big change, and we will make every effort to help our developers with this transition. We apologize for the inconvenience, and aim to bring you a top-notch .NET user experience!Just as a reminder, we already support Universal Windows Platform (UWP) on x86, x64 and ARM as of Xenko 1.8, which means games and apps developed with Xenko can be deployed on a whole range of Microsoft devices, including Xbox One. Until 1.9, this platform was named Windows10 in Xenko, but we took the liberty to rename it UWP to better match the official naming."
  },{
    
    "title":"Copy-Paste Improvements Coming Soon",
    "excerpt": " Discover the groundbreaking Copy-Paste feature in Xenko, designed to streamline your game development process. Learn how this innovative tool simplifies asset management, accelerates workflow, and inspires creativity in your...",
    "author": "Silicon Studio Corporation",
    "date": "October 27, 2016",
    "category": "",
    "tags": "blog, search",
    "url":"https://www.stride3d.net/blog/copy-paste/",
    "content":"Discover the groundbreaking Copy-Paste feature in Xenko, designed to streamline your game development process. Learn how this innovative tool simplifies asset management, accelerates workflow, and inspires creativity in your projects.We are working hard to add some important new features to our next release and we’re pretty sure you’ll be pleased with our improvements to the cut, copy and paste interactions, for one. Our development team is excited to offer you one of the most advanced clipboard support systems found in other game engines today. In the past we only supported copy and pasting of assets, but now you can copy-paste pretty much anything.Any entities in a scene are now copyable, as well as any sprites of a sprite sheet, UI elements, or even a single property in the property grid! For instance, in our implementation of Copy-Paste, you can copy a list (assuming the type of values are compatible) and perform any of the following operations:Insert it into another list at various positions, for example:Copy and insert into the list (by pasting at a list item level).Copy and append to a list, for example, append it to the end of the list.Copy and replace the whole list.A bit more difficult to explain, but perhaps easier to show than write about is copy and replace at an item level. This action (shown in the video below) will remove the item (at its position in the list) and insert the copied ones starting at the same position of the item in the list. In our example below, the copy replace starts from Item 2 in List 2:Some information about copying entities and prefabs:An entire hierarchy of entities can be copied from one scene or prefab to another scene or prefab. Prefab instance will keep their reference to the source prefab as illustrated in the following example:The prefab “MyHero” is copied into the scene. Links to the prefab are maintained.It is also possible to copy a component from an entity and paste it into another entity.In fact, absolutely any property that can be serialized can be copied. You can copy something from one scene to another scene, from a sub-element in one scene to another scene and even from a scene to a text file, back and forth as needed. You can also copy simple values in the property grid (e.g., primitives such as int, vector3, string…) between separate Game Studio instances if that is something you find practical and useful.Here’s an example of copying between scripts and transform entities in the GameStudio Property Grid:Look for this feature in our forthcoming beta release 1.9, coming soon. As always, we are committed to offering you best-in-class game dev solutions directly in GameStudio."
  },{
    
    "title":"Run, Don't Walk",
    "excerpt": " Embrace the power of efficient movement in game development with the \"Run, Don't Walk\" blog post. Explore tips, tricks, and strategies to enhance your workflow and optimize your project's...",
    "author": "Silicon Studio Corporation",
    "date": "October 21, 2016",
    "category": "",
    "tags": "blog, search",
    "url":"https://www.stride3d.net/blog/run-dont-walk/",
    "content":"Embrace the power of efficient movement in game development with the &quot;Run, Don't Walk&quot; blog post. Explore tips, tricks, and strategies to enhance your workflow and optimize your project's performance using Stride 3D's innovative tools and features.Not so long ago, I heard some advice about supporting new features in a game engine that I hear often: Walk, don’t run. Makes sense, doesn’t it? Developers and artists need the basics to make any game, namely, a stable, state-of-the-art rendering system with things like support for PBR, efficient use of lighting technology, a decent physics engine, a functional U.I. system, pipeline optimizing shortcuts, a way to handle coding frameworks efficiently and much more. However, even for a game engine that needs to accommodate traditional game deployment platforms such as PCs, console and mobile devices, game industry software tool development teams rarely follow any kind of linear or waterfall product management techniques. Agile methods have allowed product managers and teams to sprint to support certain higher priority features as needed, some market driven, some purely technically driven. Not surprisingly, this is the way the Xenko game engine effort is handled at Silicon Studio, which allows us to react quickly to industry trends. Such has been the case with virtual reality (VR).The largest disruption to the whole walk, don’t run philosophy we’ve seen the last two years has to be, without a doubt, the race to prepare game engines to support development for VR. Staying current and reacting to key trends in both the end-user market and in game development has always been a part of Silicon Studio Corporation’s strategy. We’ve spoken with many game industry leaders, notable game developers, and attended key industry conferences, all the while - listening and learning. Most every commercial game engine (and even most non-commercial games) have decided to change direction and embrace VR because of the VR market’s rapid growth. We, as well, must be prepared for the next generation of gaming and interactive experiences.We want to make it easy for you to follow this new trend in gaming with us, by offering you a truly VR-friendly game development tool. We know there are many new and improved features game engines need to be useful for developing games and apps in VR. Therefore, we have decided to change course somewhat for our Xenko game engine plans - before we even release version 2.0, while we are still young, nimble and in beta. We realize VR is disrupting the work of some (most?) developers, but we haven’t forget those folks not interested in VR. We’ll keep improving the engine for our non-VR game developers as well. This said, we think - in the not very long run - you will be pleased with how well Xenko supports your VR development. For one, we know it’s necessary to make our rendering pipeline more flexible - to meet the demanding needs of VR. Also, thanks to the rapidly increasing popularity of VR content creation and experiences, expect cool new features as well to help you get started creating VR content.Therefore, we are now 100% on track to support VR in Xenko. So, what does this mean? First of all, the technology hints were in place before the decision was made in July. Important rendering, lighting, and audio features were already in place or planned to soon to be in place. For instance, Forward Clustered rendering, touted as the best rendering for VR, is now supported, our support for Oculus Rift is in place, our performant multithreading and back-end support of next generation APIs such as Vulkan smooths the way for AAA style VR games needing the best possible performance, and last but not least, we are working on adding HRTF support to our audio system to accommodate a sense called proprioception, necessary for a true VR audio experience.In conclusion, let’s not bury the lead here: the game industry disruption caused by this race to widely support VR, trough of disappointment or not, is the reason why Xenko is now on track to become the first built-from-scratch comprehensive VR engine for game developers."
  },{
    
    "title":"Xenko 1.8 Beta Released",
    "excerpt": " Xenko release 1.8 introduces three major new features along with several relevant enhancements to existing features. We are proud to be able to offer you our new **UI Editor**,...",
    "author": "Silicon Studio Corporation",
    "date": "August 31, 2016",
    "category": "",
    "tags": "blog, search, Release",
    "url":"https://www.stride3d.net/blog/new-version-1-8-0/",
    "content":"Xenko release 1.8 introduces three major new features along with several relevant enhancements to existing features. We are proud to be able to offer you our new UI Editor, enhanced performance via our newly multithreaded engine with Vulkan support and our new Prefab Model. Also, for your cutting edge rendering needs, we now support SSAO and cel (toon) shading!Highlights 🔗Highlights UI Editor Performance Multithreading Prefab Model Rendering SSAO Cel Shading How To Upgrade UI Changelog Version 1.8.0-Beta Enhancements General Assets Audio Graphics Game Studio Input Particles Samples Issues fixed Physics Game Studio Breaking changes UI Audio Physics VR Known Issues UI Editor 🔗This release introduces new UI assets along with a brand-new UI editor, so that you can create amazing UI directly from the Game Studio!The UI editor provides a full WYSIWYG experience. You can author the whole visual tree of your UI, edit the properties of each UI element (such as layout, background color, etc.) and preview its rendering.Two new assets are available:UI Page asset: represents a typical tree of UI elements that can assigned to the UI Component of an entity in the scene or prefab editor.UI Library asset: represents a collection of UI trees (similar to prefabs) that can be reused by other UI Pages.Both have runtime equivalents. UIComponent now expects a UI Page. A UI Library is useful to create or edit UI at runtime.And since it is built on the same system as archetypes and prefabs, you can easily create shared UI parts, override some properties and have changes propagating automatically.Performance 🔗Multithreading 🔗Many computationally intensive systems have been multithreaded. Expect a major increase in performance and better scaling to correspond with the size of your game! We have observed up to 6 times higher frame rates for heavily CPU bound scenes so far (on a typical 4-core CPU).Parallelized code includes many EntityProcessors and almost every part of our recently rewritten rendering pipeline. On Vulkan and Direct3D12 this includes also recording of drawing command lists, giving them an edge over the other APIs.Developers can find classes and utilities for concurrent programming in the SiliconStudio.Core.Threading namespace, e.g. Dispatcher.For(), which resemble the Task Parallel Library, but are more lightweight and tailored for work performed every frame in a game's update loop.Over time, we will look into multithreading more parts of the engine, including independent subsystems, such as different phases of the RenderSystem and Scripts.Prefab Model 🔗The Prefab Model is a new type of Model asset that generates an optimized baked and merged single model from a prefab.It merges meshes together by material and vertex layout. You can easily go from thousands of draw calls to one or two draw calls.To use it, just create a new Prefab Model asset from the Game Studio and assign a prefab to it.Make sure that the base prefab is just containing static entities as only ModelComponent types are merged.Rendering 🔗SSAO 🔗Ambient Occlusion was added to the list of post-processing effects. The current technique implements Scalable Ambient Obscurance. It exposes a variety of options, including number of tap samples, intensity, tap radius and back buffer size.It is currently part of the post-effect pipeline, but will later move to the lighting pipeline for more realistic rendering.Cel Shading 🔗Cel shading (or Toon shading) is now available as a rendering model with both Diffuse and Specular rendering options. The default implementation limits the light product to binary or 3-cuts discrete levels. You can also reference a ramp texture for better artistic control.How To Upgrade 🔗UI 🔗The UIComponent RootElement property has been replaced with the Page property. It now expects an instance of the UIPage type. Scripts that were setting the RootElement property need to be updated:// previous code (will not compile)var grid = new Grid();var component = Entity.Get&lt;UIComponent>();component.RootElement = grid;// new codevar grid = new Grid();var component = Entity.Get&lt;UIComponent>();component.Page = new UIPage{ RootElement = grid};Due to the slight API and behavior changes made to UI system, you might have to adapt some other part of your code. For example:var text = new TextBlock();var canvas = new Canvas();canvas.Children.Add(text);var position = new Vector3(0.0f, 1.0f, 0.0f);// previously setting this attached property will also set Canvas.UseAbsolutePositionPropertyKey to false automaticallytext.DependencyProperties.Set(Canvas.RelativePositionPropertyKey, position);// now you need to set it explicitlytext.DependencyProperties.Set(Canvas.UseAbsolutePositionPropertyKey, false);// note that using extension methods is the recommended way, and does all of that in a more concise way:text.SetCanvasRelativePosition(position);Changelog Version 1.8.0-Beta 🔗Release date: 2016/08/31Enhancements 🔗General 🔗Added a DebugConsoleSystem to be able to print basic debug information in game.Added Utility methods FindChild and FindRoot to Entity.Animation blend trees can now be created in script. The AnimationBlend pre-built script shows how to do it easilyUpdated Roslyn to 1.3.2Assets 🔗Yaml scene files now encode entity and component references in a much more compact wayYaml serialization order is now following class declaration orderAudio 🔗Game studio side: added hard limits in Compression ratio, also now it is using a slider.Added SetRange in SoundInstance to be able to set play range, it also enables seeking.Added Position property in SoundInstance to be able to know the position in time of your playing instance.Added PlayAndForget to AudioEmitterSoundController to play many instances of the same sound rapidly.Added RequestedAudioDevice in AudioSystem to allow game code to select audio devices (Windows only for now).AudioEmitterComponent now contains a dictionary of sounds that can be used from the emitter, those can be set from the Game Studio directly!Game Studio sound preview now uses the internal engine, this means that you can directly preview the compression rate!Graphics 🔗CommandList can now compiled and executedConstant Buffers are now uploaded in a single GPU Buffer and set with offsets on platform/API that support this modeD3D12: reduced number of API callsGame Studio 🔗About Page accessible from Menu--&gt;Help--&gt;About.Input 🔗Added preliminary controller vibration support with Input.SetGamePadVibrationParticles 🔗Particle rendering now uses the improved multithreaded pipeline, significantly speeding up the vertex buffer building.Samples 🔗Several samples have been removed. Particles and Physics samples have been greatly reduced and merged into only two, which allows the user to check more features with a single sample.Issues fixed 🔗Physics 🔗Procedural models can now be used as a source to generate convex hull shapes.We are now using the github version of Bullet Physics and actively cooperating with the project.Fixed ColliderShape cached matrices computation.Game Studio 🔗Credential dialog will now save the credential settings when closing.Credential dialog will not appear if you checked &quot;Do not ask again&quot;.Fixed hang when launching a Linux game remotely.Breaking changes 🔗UI 🔗The UIComponent expect a UI Page in place of the previous Root Element property.Most dependency properties were changed into regular C# properties, except the ones that are attached properties (such as the Column and Row attached property of a Grid).In desktop, TouchMove event is also raised when no mouse button are pressed.Default style of the UI has been removed.Audio 🔗Removed Play with boolean argument from SoundInstance, instead the same behavior will be achieved by using PlayExtended or Play.Renamed IsLooped into IsLooping.Deprecated: GetSoundController, AttachSound, AttachSounds, DetachSound, DetachSounds. Please add sounds now from the AudioEmitterComponentPhysics 🔗Collision.Contacts is now an HashSet so access by index is not possible anymore, please use foreach or iterate them instead.VR 🔗Added audio, status and re-center support for Oculus Rift.Known Issues 🔗On Linux, when switching the underlying Graphics Platform, rendering will not occur. Delete the cache, local and roaming folder on the Linux host and restarting the game should fix the issue.Linux Mono has some issue with the new effect compiler (since 1.7.5-Beta). Please use the &quot;remote compiler&quot; in the &quot;package properties&quot; (right-click on the package in solution explorer), or use Linux CoreCLR in the meantime."
  },{
    
    "title":"Help Improve Xenko By Taking Short Survey! (Closed Now)",
    "excerpt": " We’ve created a short, new survey, so that we can hear your thoughts and opinions about Xenko. ",
    "author": "Silicon Studio Corporation",
    "date": "July 25, 2016",
    "category": "",
    "tags": "blog, search",
    "url":"https://www.stride3d.net/blog/survey-july-2016/",
    "content":"We’ve created a short, new survey, so that we can hear your thoughts and opinions about Xenko.Link to new survey here: http://goo.gl/forms/2K33S9hg6rtuTRyu2We are dedicated to continually improve Xenko, and eventually shape it into one of the best game engines to pick from for our awesome users. We will use your feedback to make Xenko a game engine that we hope you enjoy and find easy to use.As always, thanks for your help and we look forward to hearing from you!"
  },{
    
    "title":"Xenko 1.7 Beta Released",
    "excerpt": " We’ve got some big changes including Forward+, Vulkan, Linux, Audio and many GameStudio improvements! Unfortunately, UI editor and streaming couldn't make it in this release. We prefer to take...",
    "author": "Silicon Studio Corporation",
    "date": "July 01, 2016",
    "category": "",
    "tags": "blog, search, Release",
    "url":"https://www.stride3d.net/blog/new-version-1-7-0/",
    "content":"We’ve got some big changes including Forward+, Vulkan, Linux, Audio and many GameStudio improvements! Unfortunately, UI editor and streaming couldn't make it in this release. We prefer to take little bit more time to polish them.Highlights 🔗Highlights Rendering Forward+ Vulkan GameStudio Improvements Simplified Asset Creation Camera Preview Drag &amp; Drop Assets into the Property Grid Drag &amp; Drop scripts Linux Audio Release notes Rendering 🔗Forward+ 🔗Xenko now features Practical Clustered Shading, a technique similar to Forward+ rendering.It allows you to use many point and spot lights at the same time.You will gain more control over the lighting of your scene by adding lights wherever they are needed.It also works with transparent objects out of the box, just like ordinary forward rendering does.If your game requires Direct3D10+ (or equivalent OpenGL), this will be the default setting - no changes needed! As a bonus, you'll see a decrease in compilation times and the number of shader permutations.We also took this opportunity to rewrite most of our lighting code for improved performance and extensibility.Vulkan 🔗Vulkan joins our happy family of graphics platforms!Experimental support has also been added for Windows and Linux. Android will follow soon.Together with Direct3D12 and the recent overhaul of our rendering pipeline, this is another step toward preparing Xenko for the next generation of graphics. Stay tuned for performance improvements and hard numbers in the near future.Try running your project on Vulkan by selecting it as the Preferred Graphics Platform in the Rendering Settings of your Game Settings asset.GameStudio Improvements 🔗Simplified Asset Creation 🔗The workflow to create assets has been simplified! The new menu for asset creation contains multiple templates for each type of asset. You can now import assets from files more directly. With Xenko's efficient search function, creating assets should be faster and easier than ever!Camera Preview 🔗We've updated GameStudio's camera preview to now display only the camera currently selected. It also now displays the borders and the camera's name making it easier to see the camera and it's settings.Drag &amp; Drop Assets into the Property Grid 🔗So far, you could drag &amp; drop assets into your scene or the tree view.New in this release, components can now be added to entities just by dragging &amp; dropping matching assets into the property grid.Drag &amp; Drop scripts 🔗You can also drag &amp; drop scripts directly into the scene, tree view and property view:Linux 🔗Linux users rejoice! Linux is now a supported platform of Xenko among Windows, Android, iOS, and more! All you need is a PC running Linux Ubuntu 16.04 x64 or equivalent with a video card supporting OpenGL 4.2 or Vulkan 1.0. Mono or .NET Core (which need to be installed separately) will be powering your game.In order to use the Linux platform, check Linux from the list of platforms in the GameStudio then compile.Deployment to a remote Linux box is done via SSH when running your project from GameStudio.To know more about our Linux support, read the Linux documentation.Audio 🔗We've rewritten our Audio engine. While most changes are internal, the public API has improved, and we are still working to make it great.The SoundEffect and SoundMusic classes have been consolidated into Sound, also SoundEffectInstance is now SoundInstance. Sound formats are now converted using FFmpeg. Because of these updates, the range of supported formats has also improved.Under the hood, the CELT codec (part of Opus) is now being used. We're delighted to say that performance has since skyrocketed! Music can now be mixed and crossfaded while streaming and decompressing directly from disk.Xenko's API now builds on OpenAL for Linux/macOS/iOS, on OpenSLES for Android and on XAudio2 for Windows platforms.Release notes 🔗Have a look at the full Release Notes."
  },{
    
    "title":"Xenko 1.6 Beta Released",
    "excerpt": " Xenko 1.6.0-beta is now available, just in time for GDC 2016. This release is a great step forward towards making the engine better to build awesome games. ",
    "author": "Silicon Studio Corporation",
    "date": "March 17, 2016",
    "category": "",
    "tags": "blog, search, Release",
    "url":"https://www.stride3d.net/blog/new-version-1-6-0/",
    "content":"Xenko 1.6.0-beta is now available, just in time for GDC 2016.This release is a great step forward towards making the engine better to build awesome games.Prefabs allow you to reuse assets and build game more efficiently. Particles are a critical requirement for many immersive games, and are now part of the engine with full editor support.Lastly, we have done a full rewrite of our graphics engine, paving the road for better performance and scalability. We can’t wait to add many new rendering features on top of it! As a bonus, we included our experimental Direct3D 12 renderer.This release consists of 2425 commits, with 135208 lines changed!New Features Highlights 🔗New Features Highlights Prefabs Archetypes Particles Features Modular system Curve Editor New Graphics Engine Direct3D 12 Better OpenGL support Scripts are now components Event system Game Settings overrides Version 1.6.0-beta How to upgrade Enhancements Assets Engine Game Studio Graphics Input Issues fixed Game Studio Graphics Physics Breaking changes Graphics Physics Known Issues Prefabs 🔗Prefabs allow you to assemble entities into building blocks and easily reuse them in any of your scenes. Changes to your prefabs will be reflected on all instances (as long as properties are not overridden).We even took the concept one step further to empower our users, by having prefabs within prefabs, as well as the possibility to use only part of a prefab when you instantiate it. And of course, removing or rearranging a few entities won’t break your prefab synchronization!Archetypes 🔗You can now use any asset as an archetype for another asset. When you change a property of the archetype, the new value will be automatically propagated to all the derived assets, unless you specifically override them. Archetypes can be used with most asset types.Particles 🔗You can now create and edit particle systems directly in the Xenko Game Studio. Particles are deeply integrated in the game engine and leverage the powerful effect system and its high level of customization.While there are still several features on the roadmap, the current implementation is sufficient for most games. The ability to customize almost all aspects of the particle engine allows you to add features tailored to your game’s specific needs.Feel free to visit our particle documentation.Features 🔗The particle engine supports many features out of the box:Render particles as different shapes like billboards, 3D oriented quads or your own custom implementationPowerful force fields which offer more control than simple attractors and repulsorsCollisionsAnimated attributes such as size, color, rotationFlipbooks, UV animation and support for the Xenko Shading LanguageModular system 🔗All aspects of particle systems are broken down into individuals modules like spawners, initializers and updaters, and each of these modules is easily tweakable and customizable. Check out the samples and the Xenko documentation for a detailed walkthrough.Curve Editor 🔗The Game Studio now also comes with a built-in curve editor. For now only the particle engine uses curve animation. In the future, it will also power our property animation system and our storyboard system.New Graphics Engine 🔗Most of our graphics pipeline, both low-, medium- and high-level, has been almost completely rewritten, and should be ready for the future.The low-level API has been changed to more closely resemble DirectX 12 and Vulkan. For a list of breaking changes, please see below.The high-level pipeline has been completely reworked, to achieve the following goals, most of which we will tackle in the upcoming releases:Introduce a clean and extensible architecture to easily build new graphics features on (hoping to soon add a Forward+ renderer, IBL lightprobes, RLR, etc.)New medium-level layer: lightweight RenderFeature, RenderStage, RenderObject, etc.Easy for users to write small customizations (by implementing RenderFeatures)Allow multi-threading of all parts of the pipelineMake optimal use of next-gen graphics APIsReduce the amount of &quot;magic&quot; done by the effect system to increase performanceMinimize work by taking better advantage of different update frequencies (PerView, PerMaterial, PerLighting, etc.)Take advantage of new API (first class support for Pipeline State Objects, Descriptor Sets, etc.)Stay tuned for technical details and performance evaluation in the near future!Direct3D 12 🔗Direct3D 12 has been added as a new build target. While still experimental, it already supports all parts of our rendering pipeline.You can try it by changing the ‘Preferred Graphics Platform’ in the ‘Rendering Settings’ of your ‘Game Settings’ asset.Better OpenGL support 🔗Our OpenGL renderer has been improved and should behave much better (shadows, PBR, etc.). Also, we now deliver OpenGL and OpenGL ES on Windows as build targets.You can also try them by changing the ‘Preferred Graphics Platform’ in the ‘Rendering Settings’ of your ‘Game Settings’ asset.Scripts are now components 🔗So far, there could only be one component per type on an Entity. This was quite cumbersome, especially for scripts, which had to be stored inside the ScriptComponent.Scripts list. It also resulted in many special cases to make them work in the editor (i.e. references between scripts, assembly reloading, etc.).Now multiple components of a type are allowed. This affects scripts and physics components, and can be used for custom components for which more than one instance is sensible.We hope this makes your life easier!Event system 🔗We added a simple event system that will allow your script to easily communicate with each other.Check out the EventKey&lt;&gt; and EventReceiver&lt;&gt; classes.You can create an EventKey from your sender scripts and consume events using EventReceiver from other scripts.Game Settings overrides 🔗The Game Settings asset has been improved: You can now have different settings depending on the platform or GPU.For example, you might want to set different off-screen resolutions for your game on Android depending on the GPU model. Or you could use one of our new Direct3D12, OpenGL or OpenGL ES renderers on Windows.Version 1.6.0-beta 🔗Release date: 2016/03/15How to upgrade 🔗Simply open your older projects with new version of GameStudio. It will probably fail to compile your assemblies since API changed little bit, but you can still continue.Then, save back your project in GameStudio. You now can open your project with VIsual Studio and try to fix your game code with latest API changes.Enhancements 🔗Assets 🔗Engine 🔗The KeyedSortedList now implements ICollection instead of IList annd is more consistent with CollectionDescriptor.Game Studio 🔗Support for prefabs, add a prefab editorCreate derived assets and support property inheritanceAdded a curve editor to edit animation curveLayout is saved on a solution basis. When reloading a project, Game Studio will try to present the same layout and reopen all assets that were edited (this include scenes, prefabs and sprite sheets).Add a confirmation dialog to enable saving newly created script automatically.Add a confirmation dialog to enable reloading modified assemblies automatically. This is necessary for the script to appear in the list of components that can be added to an entity.Physics gizmos are shown by default.Preview of an asset can be displayed even if this asset is being edited.Project folder can be opened in Windows explorer from the launcher with right-clicking.Properties of derived asset are displayed in gray, unless they are overridden. In this case they are displayed in bold.Rework scene initialization in the scene editor: the scene will be available almost immediately, and content (model, etc.) will be streamed in as soon as they are (asynchronously) loaded.The entity fixup wizard has been removed. Now when an entity is deleted, all references to it or to one of its component is reset to null.The gizmo and camera menus are now displayed in the top-right corner.Entity hierarchy is synchronized (automatically expanded) with the selected entity in the scene.Graphics 🔗New D3D12 renderer (experimental)New Windows OpenGL and OpenGL ES renderers (experimental)Rewrote most of the low- and high-level graphics code to have better performance and better take advantage of new graphics APIsProperly separated rendering in 4 phases: Collect (collect &amp; cull), Extract (copy data from scene to renderers), Prepare (prepare cbuffer data &amp; heavy computations), Draw (emit draw calls)Introduced concepts of RenderFeature (entry point for extending rendering), RenderStage (effect selection), RenderView and RenderObjectRender sorting logic can now be customized (culling will be soon too)Low-level API has been rewritten to match better new API: CommandList, DescriptorSet, DescriptorHeap, PipelineState, etc.Introduced concept of RendererProcessor which are responsible for pushing component data to renderingMany other changes, that will soon be covered in documentationInput 🔗Improved GamePad event management to resemble the keyboard API.Issues fixed 🔗Game Studio 🔗Fix Scripts thumbnail generation during project launch.Fix Settings window sharing columns layout with property grid (#341).Fix default IDE settings incorrectly reset to null.Fix a crash occurring when duplicating an object quickly after selecting it.Fix an issue with the message box incorrectly resizing.Tooltips are always visible even if the control (menu, button…) is disabled.Fix several issues with undo/redo.Fix drag and drop of components into propertiesSometimes the Game Studio was not asking to save when closed with some changes in a project.Fix some issues related to folders in scene editor.Redo does not re-open asset picker anymore.Graphics 🔗Tangents generation was invalid and might have resulted in various swapsPhysics 🔗Improved collision detection reliabilityFixed collision filter groupsFixed enable/disable component behaviorBreaking changes 🔗Graphics 🔗Extending rendering is quite different from before. Please check SpaceEscape and other samples to have a better idea while we prepare documentation.Many methods of GraphicsDevice have been split off into a second class: CommandListAdded objects such as PipelineState, DescriptorSet and DescriptorHeap to better match new graphics APIGame now contains a GraphicsContext which gives access to the current CommandListGraphicsDevice.BackBuffer and GraphicsDevice.DepthStencilBuffer are gone. Use GraphicsDevice.Presenter.BackBuffer to access the actual backbuffer.In addition to RenderContext, there is now a RenderDrawContext. Some methods have been changed to expect the latter.ParameterCollection has been rewritten to be much more memory and performance efficient (data is now stored directly in buffers).Transferring values from application to shaders and computation of effect permutations used to be done through various inefficient ParameterCollection overrides. This should now be done using RenderFeatures.Physics 🔗PhysicsComponents are now split into 3 different types (Rigidbody, Character, StaticCollider) which can be added multiple times in an entity.PhysicsElements are now removed, including the Collider, Rigidbody and Character classes. They now are merged into the new components.Known Issues 🔗iOS on ARM64 iPhones encounters crashes after a few second. We are currently investigating this.Sometimes duplicate contacts are detected by the physics engine"
  },{
    
    "title":"First Fix Update of 2016!",
    "excerpt": " Happy New Year's! We resolved to keep updating Xenko to give our users a polished, easy-to-use engine. ",
    "author": "Silicon Studio Corporation",
    "date": "January 15, 2016",
    "category": "",
    "tags": "blog, search",
    "url":"https://www.stride3d.net/blog/new-version-1-5-2-beta/",
    "content":"Happy New Year's! We resolved to keep updating Xenko to give our users a polished, easy-to-use engine.So for the beginning of this year, we are focusing on smoothing out some major issues reported by the community. As always, we really appreciate your input.Async Debugging 🔗There were some problems debugging async functions due to a problem in Mono.Cecil. We fixed that!Now, you'll be able to look at local variables of any async functions. Also, the usage of the namespace in the watch panel is implicit and you can step over any await calls just normally.Windows 10 Certification 🔗We fixed several small issues preventing Windows 10 apps created with Xenko from being compatible with Store certification.Now you can submit your awesome apps/games to the Windows Store. Can't wait to see your creations!Skybox Compilation 🔗Skybox compilation required a DX11 GPU (compute shaders) preventing some of you from using it.We moved to a pixel shader version to ensure GameStudio works fine with older GPUs as well.List of other improvements made 🔗Fixed issues with displayed values of rotations changing after validationYou are now able to easily edit the 3 components of a vector simultaneously using the lock icon.The convex hull generation is now working along with the new Skeleton Asset.The Connection Router iOS script required to compile shaders on iOS devices has been fixed.Added support for proper resizing in Windows Universal Apps.Added support for OpenGLES devices that do not support packed depth-stencil-formatsAdded the missing XenkoDefaultFont required by the profiler system."
  },{
    
    "title":"Xenko 1.5 Beta Released",
    "excerpt": " As promised in our last blog post, we have released some exciting new features for Xenko. This includes a new animations system, support of fbx cameras, a new search...",
    "author": "Silicon Studio Corporation",
    "date": "December 17, 2015",
    "category": "",
    "tags": "blog, search, Release",
    "url":"https://www.stride3d.net/blog/new-version-1-5-0-beta/",
    "content":"As promised in our last blog post, we have released some exciting new features for Xenko. This includes a new animations system, support of fbx cameras, a new search bar for the assets view, physics collider shapes at run-time, a simple performance profiler and much more.New Features Highlights 🔗New Features Highlights Skeleton asset Root motion support for models, cameras, lights, etc. New animation update system Simple Profiling system Physic debug shapes at runtime Asset View New ‘view options’ menu New asset filter bar Folder support in asset view Copy-paste assets with their dependencies Border and Center support in sprite sheet editor New built-in scripts Precompiled Sprite Fonts Skeleton asset 🔗A new Skeleton asset (*.xkskel) has been introduced. Both models and animations now hold a reference to a skeleton. This allows to reuse the same skeleton definition in multiple assets and to retarget models and animations to different skeletons.Skeletons can be created alongside other assets, when importing an FBX file or other model format.Root motion support for models, cameras, lights, etc. 🔗Animations now apply root motion if they have no skeleton, or the ‘Root Motion’ property is enabled on the animation asset. The animation will then move the entity itself, instead of the skeleton’s root bone.This is especially useful to import animations of lights, cameras or unskinned models, without the need to bind them to the bones of a skeleton.The FBX importer will now also import animations of various camera parameters (near-plane, far-plane, field of view) and apply them to the CameraComponent of the animated entity. More properties may be supported in the future.New animation update system 🔗The animation system now internally uses a new UpdateEngine to update objects. This allows us to animate arbitrary properties of entities, while accessing them in a highly efficient way.It will be the foundation for a future animation curve editor inside the GameStudio.The new ‘Animated Properties’ sample demonstrates how to create animations of any property from a script.Simple Profiling system 🔗It is now possible to visualize profiling information of all the game systems and custom profilers directly within your running games.To get started, use the Game Profiler built-in script, attach it to an entity and when the game is running press LCtrl-LShift-P.Physic debug shapes at runtime 🔗It is now possible to enable the rendering of physics collider shapes during runtime.The debug shapes are normal entities and they must be enabled for each physics shape that requires it.The best way to start with this feature is to use the Physics Shapes Render built-in script and attach the script to any entity that has a Physics Component and when the game is running press LCtrl-LShift-P.Asset View 🔗The Asset view has been improved to help you better organize and manage your assets.New ‘view options’ menu 🔗The view options are gathered in a single menu accessible from the asset view toolbar.You can display all the assets in the current folder only, in the current folder and its sub-folder. The third option let you display the assets and the sub folders.You can also sort your assets by name, order, type or modification date.New asset filter bar 🔗With the new asset filter bar, you can filter your assets by name, tag, type or a combination of those. Each ‘filter tag’ can be disabled by a single click or removed from the active filters.To add a filter, type in the filter bar and matching filters will be displayed. Click on the one you want to add it to the list of active filters.Only the assets matching the active filters will be displayed in the asset view. Note that type filters are inclusive, while name and tag filters are exclusive.Folder support in asset view 🔗If the ‘Assets and folder in selected folder’ options is selected, the first level of sub-folder will be displayed in the asset view. You can drag and drop assets inside them. You can also copy/paste complete folder structure.Copy-paste assets with their dependencies 🔗You have now the ability to copy assets with their dependencies. To do that use the new entry ‘Copy with dependencies’ from the asset view context menu, or press Ctrl+Shift+C.For example, if you copy/paste a model with its dependencies, you will get a copy of this model along with a copy of all its dependencies (skeleton, materials, textures)Border and Center support in sprite sheet editor 🔗For ‘Sprite2D’ sprites, you can move the position of the center by selecting the icon in the toolbar of the sprite editor. Grab and move the cross to the desired position.For ‘UI’ sprites, you can change the borders by selecting the icon in the toolbar of the sprite editor. You can then resize each border (left, top, right and bottom) separately in the same way as the texture region, by grabbing and moving one of them. Note that the icon lets you ‘lock’or ‘unlock’ the sprite borders while resizing the texture region.New built-in scripts 🔗We added a few more built-in scripts with this release such as an FPS camera script and First player controller script. To use them, just click on “New Asset”, “Script source code”, select the desired script and attach it to an adequate entity.Precompiled Sprite Fonts 🔗Font rights are quite restrictive and it is quite common that only some persons of the project have access to the font files. This was preventing some people to build the game.To solve this problem, we created a new type of asset, the precompiled sprite fonts. It is an asset taking as input an image and containing all the glyph information required to render the set of character specified. Inside your games you can used it exactly like a standard sprite font.To generate a precompiled sprite font, the owner of the original font file just have to right click on an existing static font and choose “Generate Precompiled Font”.That’s all for us this year, folks! Have a great holiday season, and we will be back early next year for the next updates on Xenko!Note: For more details about the changes, see our Release Notes."
  },{
    
    "title":"Huge Update! Paradox Name Change!",
    "excerpt": " With the end of the year upon us, we are starting to get excited for Paradox’s official release for next year. With a new year comes a fresh start,...",
    "author": "Silicon Studio Corporation",
    "date": "December 01, 2015",
    "category": "",
    "tags": "blog, search, Announcement",
    "url":"https://www.stride3d.net/blog/new-name-xenko/",
    "content":"With the end of the year upon us, we are starting to get excited for Paradox’s official release for next year. With a new year comes a fresh start, so we’ve decided to update the Paradox name to more fully encompass what we think is great about our game engine and what direction we want to move toward.New Name: Xenko New Features With This Release Users Can Now Edit Documentation Automatic Symbols and Source Code Download Coming Later December New Animation System Simple, In-Game Profiler Debug Physics Collision Shapes At Run-Time Built-In Scripts New Name: Xenko 🔗So, on to the big news! Paradox is officially changing its name to Xenko.We wanted to show our roots a bit more since we are one of the few Japanese-based gaming engines.Xenko was inspired by the Japanese word, Zenko 善光. The Japanese characters signify perfection and light. Sticking with the Xenko theme, we will strive to improve your experience with the Xenko engine (ah, feels good to say the new name).We know this is a big change, and we truly appreciate your patience as we have been honing in on this transition.Please note that support and download access to any previous Paradox releases will end on December, 25th, 2015.We will also be releasing a new version that reflects the transition to the Xenko name. We invite you to download it here.And before you ask, yes, this new release can be used without affecting the old Paradox releases and contains migration tools so you can continue to work on your Paradox projects with Xenko. The newest update is a transitional release, so it will be mostly similar to the latest version of Paradox (1.3.4) in terms of features.New Features With This Release 🔗Users Can Now Edit Documentation 🔗We're so glad to have added this feature that allows users to share information about how to best use Xenko. We know our documentation is not entirely complete yet, so we are really looking forward to hearing and sharing information through the community.The process for adding to Xenko documentation is real simple. ‘Improve this Doc’ in the top right hand corner and you will be able to edit our documentation. If the user-submitted information passes the verification process, we will add it to the documentation.Automatic Symbols and Source Code Download 🔗Being open source is great, but only if you can find the sources matching the binary version you are using. From now on, Xenko will download the right sources and symbols for an optimal debug and programming experience so you don’t have to worry about doing it yourself.The process is simple. All you need to do is open Visual Studio options, go to Debugging &gt; General, and check “Enable Source Server Support”:Coming Later December 🔗We currently are planning to release updates for the following features later this December:New Animation System 🔗We've added a new animation system that allows you to animate any game property throughout the engine. Animating models is great but why limit animation only to the models? With the newest version of the engine, you will be able to animate material color, UI transparency, and generally any property of your game!Simple, In-Game Profiler 🔗As good as a game engine can get, at some point, you're always going to be limited by the hardware's performance. To help with this, we've added a built-in profiler so that you will easily be able to identify problems and bottlenecks in your game. Even better, you will be able to turn on the built-in profiler at any point during the process of making your game.Debug Physics Collision Shapes At Run-Time 🔗Debugging physics is never easy. To streamline this, you will be able to display all the physics collision shapes at any time in your game.Built-In Scripts 🔗Writing scripts takes time and is not necessarily accessible to everyone. To improve on this, we added some built-in scripts to the engine so that users will be able to do basic operations with ease. Things like animating the camera, displaying physics debug shapes, and adding profiling information can be done in just a few clicks."
  },{
    
    "title":"Xenko 1.3 Beta Released",
    "excerpt": " We are proud to announce the release of a new version of Xenko, bringing lots of usage enhancements and many bug fixes - over 1000 commits since previous version!...",
    "author": "Silicon Studio Corporation",
    "date": "September 17, 2015",
    "category": "",
    "tags": "blog, search, Release",
    "url":"https://www.stride3d.net/blog/new-version-1-3-0-beta/",
    "content":"We are proud to announce the release of a new version of Xenko, bringing lots of usage enhancements and many bug fixes - over 1000 commits since previous version! We have been working hard to bring to you most of the feature listed on our roadmap.Also, if you haven't participate to our survey, please take the time to help us prioritize the features you need for your projects!Assets Faster compiler Game Settings Compilation control Raw assets Assets consolidation Rendering Integration of SpriteStudio (OPTIX) Materials: Vertex stream, Shader nodes… Gamma vs. Linear and improved support for HDR Sprites Atlas generation Alpha detection Sprite editor improvements Scene editor Physics improvements Element types Linking to bones Async scripting for collision handling Collider shapes Manage code and scripts from Game Studio Scripting Script Priorities Live Scripting improvements Model Node Link improvements Breaking changes Version 1.3.0-beta Enhancements General Game Studio Assets Engine Input Rendering Issues fixed Assets Build Engine Game Studio Input Rendering Shaders Samples Known Issues Assets 🔗We have been improving many parts to smooth the management of assets in your project.Faster compiler 🔗In the previous version, asset compilation could take 5 seconds or more, even if nothing needed to be recompiled. Most of the time was taken by the JIT compilation and initialization of some types in the asset compiler. We have introduced a new compiler process that stays on flight and is able to respond faster to compilation requests. This process shuts down automatically after not being used for a while. This optimization is reducing the total time to recompile a project to less than 1 second, when nothing was changed. We are still looking to improve this compilation step a lot more in a future release!Game Settings 🔗A new mandatory &quot;GameSettings&quot; asset allows you to define the main properties of your game:Default Startup SceneResolutionGraphics Profile (DX9, 10 or 11)HDR or LDR modeColor Space: Gamma or Linear (more details below)It will automatically be created when opening an old project with version 1.3.We plan to add many more options to this asset from now on.Compilation control 🔗Until now, all assets of a game package and its dependencies were compiled as part of your game.Starting with version 1.3, we compile only assets required by your game. This makes game compilation much faster (especially if you have lots of unused assets).Don’t worry, most of it is done automatically for you! We do this by collecting dependencies from the new Game Settings asset. Since it references the Default Scene, we can easily detect all the required asset references (Models, Materials, Asset referenced by your scripts and so on).In case you were loading anything in your script using Asset.Load, you can still tag those assets specifically with &quot;Mark as Root&quot; in the editor.However, we now recommend to instead create a field in your script and fill it directly in the editor. All the samples have been updated to this new practice, so please check them out.Raw assets 🔗We have added support for raw assets. You can now easily add your own config/xml files or load proprietary file formats. Raw assets are imported as-is in the game and can be accessed at runtime using the Assets.OpenStream(...) method.Assets consolidation 🔗We encourage users to organize their raw assets (such as FBX, PNG, JPG files) in a specific subfolder (just like the samples are doing it).However, if you prefer to have your raw assets copied side by side with Xenko assets, it is now possible by checking &quot;Keep Source Side by Side&quot; on assets.When doing so, source assets will be copied alongside the Xenko asset with the same name. Those changes happen when saving the project. In case some irreversible changes happen (i.e. delete or overwrite an existing file), a confirmation will be required by the user.This option is still off by default when importing new assets, but we plan to make it a project setting if you want to manage project that way for your whole team.Don’t forget to save new versions of your raw assets at the new location.Rendering 🔗Integration of SpriteStudio (OPTIX) 🔗We added preliminary support for SpriteStudio animations and sprite sheet importing. At this point only few animation keys are supported.Animation pipeline is very similar to a 3D model with smooth interpolations.Check out our new Sprite Studio Demo in the samples:Materials: Vertex stream, Shader nodes… 🔗In addition to the current color providers supported by materials (texture, scalar, ...), we have added support for 2 new ones:You can now use a color/values coming from vertex attributes/stream and use them directly in material color providers:This allows for example to blend two textures in a diffuse material, based on the value of a color coming from the vertex buffer.Also, you can use a shader directly as a color provider (inheriting from ComputeColor), allowing you to display procedural textures. For now, the list of shaders is not filtered so many shaders are not compatible with the material input. This is something that we are going to improve in a future release. Have a look at the Custom Material Shader sample to check, how this can be used in practice in your project.Gamma vs. Linear and improved support for HDR 🔗In the previous version, the rendering of all thumbnails and previews were neither HDR nor gamma correct. Also, working in linear space required to manually check sRGB mode on all textures of your project, which was quite cumbersome. There were also many places where the engine was not correctly distinguishing between gamma and linear space.In this version, the engine is now able to fully support pipelines that are HDR and gamma correct. You can still switch to a LDR and/or linear color pipeline, if your game requires legacy color handling. Thumbnails and preview should now match the settings of your game (HDR/LDR and Gamma/Linear). At runtime, if a platform doesn’t support SRgb textures/rendertargets (used for gamma correct rendering), the game will switch transparently to gamma colorspace. On these platforms, the rendering will not be gamma correct.By default, all new games are now created with Linear colorspace. This setting can be changed in the GameSettings:The texture importer by default now automatically uses the color space defined at game level:Sprites 🔗Atlas generation 🔗We have added support to create automatically atlas texture generated from sprite sheets. This feature is optional and the user can continue generating their atlas manually if they prefer. It supports sprite border size.Alpha detection 🔗We have also improve automatic alpha detection of textures and sprites. In addition to looking at the input file type and header, we are detecting actual data of the textures or sprites to detect alpha. This feature will be extended also to other types of texture formats (normal maps...etc.)Sprite editor improvements 🔗The sprite editor has been improved in several ways. First, the left pane now let you select the sheet type (sprites or UI) and the color key. To easily set the color key from the image itself, a color picking tool has been added. It is also possible to duplicate an existing sprite so you don’t have to enter the same parameters again and again.Selecting the area of each sprite in a sheet can be annoying, so we added a magic wand tool to easily create a rectangle that fit the edges of the sprite you click on, using either transparency, or the color key to determine sprite limits.Scene editor 🔗We made several improvements to manage the hierarchy of entities. First, the root node representing the scene has been removed. You can now access the graphics compositor and editor settings via the Scene settings button.Also, to help you sort and filter entities in your scene, we added the concept of folders. You can create folders either at root level, or inside an entity, and move other folders/entities into them. Folders are completely virtual and exist only at design time. The actual hierarchy of entities is not affected by them.Aligning the camera along coordinate axes was cumbersome. We added a new nativation gizmo to the top-right corner of the scene editor, which allows you to easily rotate the camera around axes in 45° increments. Clicking on the center of the cube a second time, will switch between perspective and orthographic projection. Camera controls have also been improved when working in orthographic mode, to make it easier to move around in 2D worlds.Finally, the camera menu has been improved to allow you to customize various options related to the editor camera. These options were previously available in the editor settings section of the scene properties. This section has been removed.The material selection mode, introduced in the previous version, has been improved to allow you to perform close-ups on single meshes of a model. Hovering over the desired mesh and pressing 'F' while in material mode, will now center the camera on it.Physics improvements 🔗Physics support has seen a lot of improvements.The physics system is now loaded automatically - no need anymore to load it manually from code.Element types 🔗Physics elements have been simplified. To reduce confusion between object types some element types have been removed/merged with others. Each element type is now represented by separate class (instead of having a type property). This provides a clearer abstraction and easier configuration from the editor. Physics gizmos are color coded by element type.Linking to bones 🔗You can now properly link physics elements to bones of a model hierarchy. This makes it possible to create ragdolls, flags, etc. from the editor. Searching for the correct node is assisted by the editor. No need to memorize the name of the node.You currently still need to set up constraints programmatically. This will also be possible from the editor in the future.Also, complex entity hierarchies are now well handled.Async scripting for collision handling 🔗Collision handling has been redesigned and now uses an async/await pattern. Events have been removed. Instead awaitable APIs are available, improving both internal performance and the readability of your code.//start our state machinewhile (Game.IsRunning){ //wait for entities coming in await trigger.FirstCollision(); SimpleMessage.OnStart(); //now wait for entities exiting await trigger.AllCollisionsEnded(); SimpleMessage.OnStop();}Collider shapes 🔗You can now declare collider shapes right inside of a physics component, for increased productivity. These shapes will also be affected by the scaling of the entity. Using Collider Shape assets to share shapes among elements is still possible, of course.A Convex Hull collider shape has been added, providing a shape that is shrink wrapped to a model. For more complex model, a shape is wrapped to each mesh. In the future we also hope to provide complex convex decomposition.Manage code and scripts from Game Studio 🔗Scripts are now a new special type of asset.You can now create scripts straight from the Game Studio, without any need to have visual studio installed if wanted, Just fire your favorite code editor and start making scripts for your game!Renaming/Deleting/Adding a script from visual studio will be detected after script recompile in the Game Studio.Renaming/Deleting/Adding a script from the Game Studio will be detected after project save in Visual Studio.For this release when you drag and drop a script asset into a script component the first script in the code file will get picked up. (this will be improved very soon)Scripting 🔗Script Priorities 🔗Added Script.Priority, that allows you to control how a script will be scheduled each frame. Script will be executed by Priority order. You can change Priority of an already running Script during execution to control accurately the order of execution of your scripts.Also, all SyncScript and AsyncScript are now managed in the same scheduler and priorities between them will apply (before, all AsyncScript were executed first, then all SyncScript).Live Scripting improvements 🔗After our first initial version, we tried to improve live scripting usability with two new features.When running a game in live scripting while Visual Studio is started, the debugger will automatically attach to the newly started session. Note: Visual Studio might complain when you try to edit files. Disabling Edit &amp; Continue of managed code will fix this issue.During reload, you may want to keep some specific properties that are usually not serialized (public members with DataMemberIgnore or private/internal members). You can now use [DataMember(Mask = LiveScriptingMask)] on your script fields and properties to achieve this.Last, GameStudio-side logging has been improved to better show what happens in the remote game process.Model Node Link improvements 🔗Model Node Link components allows you to make one entity follow a given model node or bone. They have been reworked and made easier to use.Firstly, if now target model is set, they will now automatically use the parent entitie’s model. When editing the target node, the editor will now display a list of available model nodes to choose from:Also, transformation is not ignored anymore. It is now possible to apply an offset, relative to the node.Lastly, node link information is now visible in the scene tree view for easier discoverability:Breaking changes 🔗General: you now need to redistribute your games with VS2015 C++ redist instead of VS2013 ones.Engine: When implementing a new entity component type, if you were using EntityComponent.Enabled, you now need to inherit from ActivableEntityComponent instead.Engine: Script execution order was previously undefined but is now controlled by Script.Priority. Please make sure it didn’t affect your game.Rendering: Remove post effect GammaTransform as the new pipeline is now using sRGB render targets for gamma correct pipeline.Rendering: Remove LightShadowImportance. Switch to a single configuration done through the LightShadiwMapSize enum.Rendering: Rename ILightColor to IColorProvider and move to namespace Engine.Rendering.Colors. Add extensions methods (github issue #296)Physics: Collision events are removed. An async/await pattern is encouraged from now on.Sprite Sheets: They are now automatically packed. If this affects you, you can simply disable this setting by editing your Sprite Sheet asset.Version 1.3.0-beta 🔗Release date: 2015/09/17Almost 1000 commits are included in this release since the previous version of July. You will find more details in the following sections.Enhancements 🔗General 🔗Switched Xenko to VS2015. You can still compile your games with VS2013, but you will need to ship VS2015 C++ redistributables instead of VS2013 ones.Graphics platform is not part of user projects anymore, it is either automatically deduced and will likely be controllable from new Game Settings assetVisual Studio Solution configuration is now switched automatically based on the startup project and vice versa.On Android, we better detect ADB (check registry, running process before trying to find on PATH)Game Studio 🔗Removed the Code section of a package and merged its content into the package top-levelAnimation preview now displays current time and duration of the animation, and has a proper scale under the seek barAdd a button in the asset properties to open the asset editor when it’s available for this asset type (currently only for scenes and sprite sheets)Some lists in the property grid can be reordered by drag and dropFile and directory properties now accept drops from Windows ExplorerBetter handling of assets that can be edited, moved or deletedBetter placement of the checkboxes in the property grid so the indentation is not affected by the presence of a checkboxThe status bar now display background works, such as project build, thumbnail or effect compilation... and indicate progress and resultThe output panel will display an asterisk when new messages are logged.Scene editor: Add the concept of folders to sort assetsScene editor: Removed the root scene node, and added a Scene settings button to access the scene propertiesScene editor: Add a navigation gizmo to easily reorient the cameraScene editor: Moved all camera options into the camera menu of the toolbar and removed them from the Editor settings section of the property gridScene editor: The tree view will scroll automatically when dragging entities in a long listScene editor: Invert up/down and forward/backward keys when the camera is orthographicScene editor: Display list of model nodes when editing ModelNodeLinkComponent.NodeNameScene editor: Display Model Node Link information in the scene tree viewScene editor: Select newly created entities when dropping asset to the sceneScene editor: Snap newly created entities when dropping asset to the scene if snapping is enabledSprite editor: Add a button to center the view on the current sprite regionSprite editor: Magic wand tool to easily select sprite region. Works with either transparency or color key, support ctrl+click to include multiple partd in the same region.Sprite editor: Add a color picking tool to select the color keySprite editor: Add buttons to cycle between the different sprite, with proper keyboard shortcutSprite editor: Add a button to duplicate the selected spritesSprite editor: Sprites can be reordered by drag and drop and can be dropped into a different spritesheetSprite editor: More options in sprite context menuSprite editor: Keep the position and zoom of the image when changing selected spriteSprite editor: Support DDS images (and many other formats)Assets 🔗Add ability to include raw assets in a game and loading them with the Assets.OpenStream API.Background asset compiler for faster asset compiling tasks.Added concept of &quot;Root&quot; assets (auto collect game assets, and user can manually mark additional ones)Added a new undeletable GameSettings asset where you can configure various global settings.Added a &quot;Keep Source Side by Side&quot; to force raw assets to be copied alongside their Xenko asset counterpart while saving.Switch to FBX SDK 2016 when handling FBX assetsEngine 🔗Added Entity.AddChild() and Entity.GetParent() extension methods (#251)Added Script.Priority to give better control of script order of execution. Also interleaves execution of AsyncScript and SyncScript in the same scheduler.If ModelNodeLinkComponent.Model is null, it now automatically uses parent modelModelNodeLinkComponent now uses TransformationComponent values to applies an additional relative offset on top of the node transformationReworked transformation order so that it is easy to add new components similar to Model Node Link Components (i.e. Sprite link, etc…)AnimationComponent.Play() now returns a PlayingAnimation, on which you can use await playingAnimation.Ended().AsyncScripts now provide a CancellationToken that can be passed to async APIs to properly cancel themAsyncScripts now also have a Cancel method to do synchronous cleanupBefore, every type of entity components could be disabled. From now on, they need to inherit from ActivableEntityComponent.Added the possibility to reference audio and font assets from scriptsUnify API of collider shapes, procedural models and geometric primitivesInput 🔗Added support for sensor inputRendering 🔗Shader material nodes as color providers are re-enabled in Materials. Refer to the 'Custom material shader' sample for detailsVertex stream in materials can be used as color providers.Better support for ColorSpace (Gamme vs. Linear) throughout the engineImprove ToneMap color transform, Add Hejl 2 tonemapping operator. Add AutoExposure/manual exposure and TemporalAdaptation flags.Issues fixed 🔗Assets 🔗Obj + mtl file import supportFixed .blend assimp importAssimp imported meshes scale property support.Custom assets are now loaded correctly when used in the package they are defined in (#280)Local packages are now correctly loaded after their dependenciesIf you use &quot;Keep Source Side by Side&quot; on assets with raw assets, they will be copied alongside the asset while saving the projectBuild 🔗Restored UserDoc functionalityAdded support for user's native librariesEngine 🔗Fixed an issue when creating StartupScripts in other StartupScripts (#294)Game Studio 🔗Animation preview won’t freeze the Game Studio anymoreDisplay an error message if Game Studio was started in 32 bit modePreviews and thumbnails now properly take skinning into accountSpriteFont can now be properly referenced in scripts.There was some issues when importing shader log and undoing thatThe layout of the Game Studio was improperly savedDisplay properly the name of entities/sprites on the top of the property grid when something else than an asset is selectedScene editor: Issues in camera control: LMB+RMB allows to pan the camera, fix mouse lock when using middle click, fix right-click on gizmosScene editor: Modifying a materials tessellation now properly updates the sceneScene editor: Orientation of the camera gizmo was sometimes incorrectly computedScene editor: Transformations applied on a selection of multiple object were sometimes incorrectly processedScene editor: Duplication using Ctrl key while using the transformation gizmoScene editor: Prevent a crash that might occur when loading a large sceneScene editor: Transparency was incorrectly processed in the camera previewInput 🔗Input: Properly detect HasMouse on Windows 10, Store and Phone platformsRendering 🔗Fix ImageReadBack latency to force readback on first frame if previous frames were not available.Ensure recursive materials are generating an log error instead of a StackOverflowExceptionFixed issue where not all enabled lights would be rendered (#297)Shaders 🔗Swizzling scalars now works on OpenGL platformsDisplay a proper error message when variables of different types have the same semantic (#197)Samples 🔗Fixed corrupted scene of the ‘Sprite entity sample (#281)Known Issues 🔗Rendering: Color used in SpriteBatch is not gamma correct and is considered as Linear It means that if you used a Color to modify a sprite with SpriteBatch, the sprite will appear a bit brighter.Rendering: DynamicFonts are not yet gamma correct.Rendering: Shadow maps are not rendered correctly with orthographic projectionsInput: Windows Phone touch inputs are sometimes not consistent with other platforms.UI: EditText is not implemented on Windows 10, Phone and Store"
  },{
    
    "title":"Rescue Drone: Tech Demo",
    "excerpt": " During CEDEC 2015, we have published \"Rescue Drone\", a new real-time tech demo. It leverages on the latest rendering improvements made in Xenko, such as Physically Based Rendering. ...",
    "author": "Silicon Studio Corporation",
    "date": "September 10, 2015",
    "category": "",
    "tags": "blog, search",
    "url":"https://www.stride3d.net/blog/rescue-drone-tech-demo-cedec-2015/",
    "content":"During CEDEC 2015, we have published &quot;Rescue Drone&quot;, a new real-time tech demo. It leverages on the latest rendering improvements made in Xenko, such as Physically Based Rendering."
  },{
    
    "title":"Roadmap and Survey",
    "excerpt": " Discover the latest Stride 3D roadmap and participate in our community survey to help shape the future of our open-source game engine. ",
    "author": "Silicon Studio Corporation",
    "date": "August 13, 2015",
    "category": "",
    "tags": "blog, search",
    "url":"https://www.stride3d.net/blog/roadmap-and-survery/",
    "content":"Discover the latest Stride 3D roadmap and participate in our community survey to help shape the future of our open-source game engine.Roadmap 🔗We just published our roadmap online: view roadmap.We are excited to share our future plan and work with the community.You will be able to see the short term (few months) future plans relatively precisely, and some longer terms plans we have. The tag colors indicate progress on each features.Our release cycle is once every 2 to 3 months, and we will try to include as many new features as we every time. Of course we will also release patches when faster fixes are needed.We will keep updating the Trello roadmap on a regular basis an constantly tune it.We are passionate about building this engine and prioritize features that makes it a great tool to make games.Thus hearing the voices of our community is important. Please vote on the features and participate to our survey below!Survey 🔗We created an online survey that should take around 5mins to complete:Participate to Survey (English)Participate to Survey (Japanese)Since we are constantly refining Xenko roadmap, having your opinion will help a lot to better fit your needs and to make Xenko better."
  },{
    
    "title":"History and Daily Commits on GitHub",
    "excerpt": " One year ago, we open-sourced Xenko on GitHub when we released our first beta. This allows our users to understand how the engine work, use it more efficiently, not...",
    "author": "Silicon Studio Corporation",
    "date": "July 30, 2015",
    "category": "",
    "tags": "blog, search",
    "url":"https://www.stride3d.net/blog/github-migration-history-and-live-commits/",
    "content":"One year ago, we open-sourced Xenko on GitHub when we released our first beta. This allows our users to understand how the engine work, use it more efficiently, not be blocked by bugs and contribute with the development.However, until recently, Xenko code was manually filtered and published to GitHub. The process was inefficient and time-consuming, resulting in delayed updates.Also, since all commits were squashed, our community couldn't see code history, branches, commit messages, activity and daily improvements made to the software. Changes would only be visible after releases.In addition, integrating GitHub PR and community activity back in our source tree was not well streamlined very well with our workflow.We decided to spend some time automatizing this commit filtering process and applying it on the last year of history (since 1.0.0-beta01).This history is now live on our GitHub repository, and you can expect almost daily commits from now on.We are very excited to make our development more transparent and visible to the community! This GitHub repository is now archived. You can access its successor, Stride, at this link https://github.com/stride3d/stride."
  },{
    
    "title":"Xenko 1.1 Beta Released",
    "excerpt": " Everyone on the Xenko team has been working hard to bring you new features and tools, including the Scene Editor, PBR, and PostFX. We are proud to announce that...",
    "author": "Silicon Studio Corporation",
    "date": "April 28, 2015",
    "category": "",
    "tags": "blog, search, Release",
    "url":"https://www.stride3d.net/blog/new-version-1-1-0-beta-physically-based-rendering-and-scene-editor/",
    "content":"Everyone on the Xenko team has been working hard to bring you new features and tools, including the Scene Editor, PBR, and PostFX. We are proud to announce that Xenko 1.1 Beta version is now available for download.Highlights New Features Enhancements Issues fixed Breaking changes Known Issues Highlights 🔗Here are the new features on the new and updated version 1.1.0-beta:Physically Based Rendering with Layered Material SystemA brand new scene editor that is now the central piece of Xenko to assemble your game levels, test the rendering, script your entities.Scene rendering compositor, offering a new way to define precisely how to render scenes in your game, apply post effects...etc.Easy-to-use and powerful post-effects API coming along many built-in effects (Depth Of Field, Bloom, Lens Flare, Glare, ToneMapping, Vignetting, Film Grain, Antialiasing...)New implementation of Shadow Mapping, supporting SDSM (Sample Distribution Shadow Maps with adaptive depth splits)Scripting System, to easily add behavior and data to entitiesIn Visual Studio, when you edit .pdxsl shaders, there is now Error Highlighting and F12 (Go to Definition) to make shader editing as smooth as possible.A new launcher, that can manage several versions of Xenko SDK side-by-sideWe have been working to get as many mobile platforms to be included in this release but not all are fully supported yet. Some samples may not work yet so we ask for your patience. The whole team is hard at work to make sure that everything will work on the next update.Details of upcoming releases will also be posted soon so please keep an eye on this blog!Release date: 2015/04/28New Features 🔗Launcher: New launcher can now manage several versions of the Xenko SDKStudio: Introducing a brand new scene editorStudio: The scene editor is now the central component of the StudioStudio: The asset log panel now display logs (errors, etc.) of the seleced assets and their dependenciesStudio: Packages now have properties that can be displayed and edited (to set the default scene and some graphics settings)Studio: Editor and asset compiler are now x64 compatible.Effects: New built-in post-effects: depth-of-field, color aberration, light streaks, lens flares, vignetting, film grain (noise)Engine: New Material System supporting PBR materials, multi-layered materials with multiple attributes, including: Tessellation, Displacement, Normal, Diffuse, Specular/Metalness, Transparent, Occlusion/CavityEngine: New rendering pipeline compositor allowing to compose the rendering of the scene by layers and renderersEngine: New Ambient and Skybox lightingEngine: New light culling and object cullingEngine: New implementation of Shadow Mapping with support for SDSM (Sample Distribution Shadow Maps with adaptive depth splits)Engine: New scripting system, to easily add behavior and data to entities.Engine: New ComputeEffectShader class for compute-shader live compilation and dispatchingEngine: New entity background component to add a background in a sceneEngine: New entity UI component to add an UI on entities of the scene.Graphics: Add a shared 2x2 pixel white texture on the GraphicsDevice (extension method)Input: Add the possibility to hide and lock the mouse using LockMousePosition functionMathematics: New SphericalHarmonics classPhysics: Renamed PhysicsEngine into Simulation, the engine now supports one separate Simulation for each scene.Assets: New asset type RenderFrameAssetAssets: New asset type ProceduralModelAssetEnhancements 🔗Assets: Yaml now uses a shorter qualified name without culture and keytoken.Assets: Added AssetManager.Reload(), to reload on top of existing objectAssets: During asset compilation, improved logging to always display what asset caused an errorAssets: Assets can now have “compile-time dependencies” (i.e. when a Material layer embeds/uses another material at compile-time)Assets: Add non-generic versions of Load and LoadAsync methods in the AssetManagerAssets: A Get method that allows to retrieve an already loaded asset without increasing the reference counterAssets: An Unload method overload that takes an url as parameter instead of a reference.Assets: Asset merging (reimport) is now more flexibleAssets: Add support for sRGB texturesAssets: Add support for HDR texturesAssets/FBX: Add better support for FBX scene unit and up-axisAssets/FBX: Automatically generates normal maps if they are not present in a 3d modelAssets/FBX: Do not merge anymore vertices belonging to different smoothing groupsBuild: Roslyn is now used to compile serialization code (instead of CodeDom)Build: Improved logging of asset buildBuild: Parallelization of the build has been improved.Core: “Data” classes don’t exist anymore. Now uses AttachedReferenceManager to directly represent design-time and runtime representation of an object with a single unified runtime class.Core: Add Collections.PoolListStructStudio: If an asset or one of its dependency has a compile error, properly add a failure sticker on top of thumbnail, and details in the asset logStudio: Inside a scene, entities, components and scripts can reference each others.Studio: If a script can’t properly be loaded (i.e. due to missing types), be nice and try to keep data as is for next save.Studio: Reduce number of threads by sharing build system for assets, scene, preview &amp; thumbnails (with priority management)Studio: Shaders are compiled asynchronously (glowing green effect) and compilation errors will be visible (glowing red effect); various shaders are precompiled for faster startup.Studio: Improved performance by using binary cloning instead of YAML.Studio: Many visual improvement of the Studio user interfaceGraphics: Add GraphicsDevice.PushState/PopState to save/restore Blend, Rasterizer, Depth states and RenderTargetsGraphics: Add Rasterizer wireframes statesGraphics: Add support for using new UserDefinedAnnotation for Direct3D11 API profilingGraphics: Add support to generate additional texcoords from an existing vertex buffer in VertexHelperGraphics: Add possibility to add a back face to the plane geometric primitiveGraphics: Add the possibility to bind TextureCube and Texture3D to the SpriteBatchEffects: Infrastructure for recording shader compilations in a Yaml asset and regenerate shaders on different platforms (no UI yet)Engine: The local transformation of entity linked with a ModelNodeLinkComponent is now taken in account in final world matrix calculationEngine: Added ScriptComponent to easily add behavior and data to entities directly inside Xenko StudioEngine: Materials are defined on Model, but can be overridden in ModelComponentEngine: Add access to the SpriteAnimationSystem from the script context.Mathematics: Add MathUtil.NextPowerOfTwoMathematics: Add Vector3 operators with floatsMathematics: Add BoundingSphere.FromPoints from an native buffer with custom vertex strideMathematics: Add BoundingBoxExt for intersection between frustum and bounding boxMathematics: Move all GuillotinePacker implementation copies to a single implem in MathematicsMathematics: Fix Color3 to Color4 implicit operatorMathematics: Add Color3.ToLinear, Color3.ToSRgb, Color4.ToLinear, Color4.ToSRgb methodsMathematics: Add swizzle extension methods for vector classesMathematics: Add explicit conversion method from Int3 to Vector3Mathematics: Add MathUtil.Log2 methodMathematics: Add extension method WithAlpha to Color class. It creates a transparent color from an opaque onePhysics: Added scaling parameter for Convex Hull Shape asset.Physics: Added LocalRotation in collider shape asset description.Physics: Removed Sprite workaround, added better default values to shapes.VisualStudio: Improve highligting and navigation for pdxsl filesVisualStudio: Improve error messages when .cs file generation failsIssues fixed 🔗Assets: On OpenGL ES 3.0+ targets, HDR textures were converted to LDR during asset compilation.Assets/FBX: Animation containing data for only some of the component the Translation/Rotation/Scale are now correctly importedEngine: Correctly initialize transformation component rotation to the identity quaternionEngine: EntityManager.Remove was destroying the hierarchy of the entityInput: Fix the key down status when the game lose and gain focus under WindowsInput: Correctly translate control/shift/alt keysGraphics: Implemented BlendStateDescription.Equals() and make a readonly copy of BlendState.Description.RenderTargets (so that user can't modify it). Fixes #139Graphics: Various improvements and bugfixes to OpenGL rendererGraphics: Add safeguard to avoid engine crashing when generating extremely big font charactersGraphics: Fix discontinuity problems in geometric primitive UV coordinatesGraphics: Fix crash when creating an unordered texture array of size greater than oneGraphics: Fix the calculation of Buffer’s element count on DirectXMathematics: Matrix.Decompose output now a correct rotation matrix free of reflectionMathematics: Fix bug in Matrix.Invert when determinant was too smallMathematics: Fix in Color3.ToRgb methodMathematics: Fix bug in Gradian property of Angle classPhysics: Fixed PhysicsDebugEffect shader, debug shapes should now render again.Physics: Fixed issues related to creating collider shape assets in the Game Studio.Shaders: Add missing GroupMemoryBarrierWithGroupSync keyword to shading languageShaders: Fix order declaration of the constants and structures in generated shaderShaders: Remove generation of key for shader parameters with the groupshared keywordStudio: Many fixes on the undo/redo stackStudio: The build log panel gets the focus only once per buildStudio: Fix a crash when undocking the Asset logStudio: The Studio now have a minimum size at startupStudio: Some entries in the settings menu were not workingStudio: Fix the sound preview when the source file of the asset has been changedBreaking changes 🔗Android: Android projects should be compiled against Android API v5.0 (only a compile-time requirement, runtime requirement is still Android 2.3+)Assets: The entity asset has been removed, entities should be created inside a scene.General: Previous Xenko 1.0.x projects cannot be loaded in this new versionEngine: Deferred lighting was removed. We will later add support for Forward+ and Deferred GBuffer shadingEngine: ScriptSystem.Add has been renamed ScriptSystem.AddTask. Add is now used only to add scriptsEngine: Sprites of SpriteComponents are now rendered in 3D. Their size is defined by the scale of the entityEngine: UI should be configured via entities and UIComponents and not via the UISystem anymoreEngine: VirtualResolution has been removed from Game and should now be set directly in the UIComponentEngine: Direction of Oz axis have been inversed in the UI to have an RH spaceGraphics: ParameterCollection are now grouped together in a ParameterCollectionGroup at creation time. This object can then be used in Effect.Apply().Physics: Collider Shape Asset and Physics Component have been simplified, their asset version is now not compatible with the old version.Physics: Debug shape rendering has been replaced by editor gizmos.Shaders: Previous generated code for pdxfx is broken and must be regeneratedStudio: Changed naming conventions of imported assets.Studio: The studio and asset compilation process are now running only on 64bits machinesKnown Issues 🔗Platforms: Shaders can’t compile due to lack of a proper workflow on other platforms than Windows Desktop (this will be fixed soon)Platforms: Android and iOS platforms are currently not properly supported (this will be fixed soon).Platforms: iOS x64 is not yet supported (this will be added soon)Assets: Reimporting a Model asset (i.e. FBX) might have issues when merging materialsAssets: ModelAsset scaling and orientation works only for .FBX, not other formats supported by Assimp libraryStudio: Scripts are not automatically reloaded by the editor. Closing and re-opening it is needed in order to see new scripts.Studio: Renaming default scene won’t properly update reference. Please set again the reference in project properties.Studio: DDS images cannot be viewed in the Sprite editorStudio: Collections in assets properties cannot be edited nor displayed in multi-selection"
  },{
    
    "title":"Scene Editor and Advanced Rendering presented at GDC",
    "excerpt": " We have been quiet for the past two months working hard on many new features in Xenko that we are presenting this week at GDC 2015. ",
    "author": "Silicon Studio Corporation",
    "date": "March 05, 2015",
    "category": "",
    "tags": "blog, search",
    "url":"https://www.stride3d.net/blog/gdc-2015-scene-editor-new-rendering/",
    "content":"We have been quiet for the past two months working hard on many new features in Xenko that we are presenting this week at GDC 2015.A new scene editorA new layered material system with physically based rendering qualityA new live scripting system, with a smart compilation reloading and hot-swapping of running scripts, using the Roslyn compilerA simple and powerful PostEffects API coming along many builtin effects (Depth Of Field, Bloom, Lens Flare, Glare, ToneMapping, Vignetting, Film Grain, Antialiasing...)A scene rendering compositor, a new way to define precisely how to render scenes in your game, apply post effects...etc.All these features will be available in a new version in the coming weeks. We will need a bit more work after GDC to polish things, write proper documentation and add new samples so that you will embrace more easily all these new APIs. As this release is bringing some major changes, we had no choice than breaking some of the existing API, mostly related to the Entities and components, but you will see that It is coming with much greater benefits!In the meantime, we are presenting some sessions here at GDC, but you can also grab our presentations here:An overview of Xenko: A brief introduction of what is Xenko, new features and what is coming next (Download link here)Advanced Rendering: Some details about the new Material System, the Post Effects API and the Scene Rendering Compositor (Download link here)Beyong Uber Shaders: A sneak peek about the Xenko Shading Language (Download link here)We will also release shortly a video showing the rendering of a Robot with the new PBR material system and post effects that we presented here at GDC."
  },{
    
    "title":"Forums Opened, New Release With Image-Based Lighting",
    "excerpt": " Discover the latest Stride release featuring Cubemap Image-Based Lighting and join our newly opened forums for discussions, support, and collaboration. ",
    "author": "Silicon Studio Corporation",
    "date": "November 11, 2014",
    "category": "",
    "tags": "blog, search",
    "url":"https://www.stride3d.net/blog/forums-opened-new-release-with-cubemap-image-based-lighting/",
    "content":"Discover the latest Stride release featuring Cubemap Image-Based Lighting and join our newly opened forums for discussions, support, and collaboration.Forums Cubemap Image-Based Lighting Spotlight Shadowmaps Improvements Version 1.0.0-beta03 New Features Enhancements Issues fixed Breaking changes Known Issues Forums 🔗Due to popular demand, we have just opened a shiny new Xenko discussion forums!We hope this place will become an important place for our community to discuss, help each other, collaborate, improve Xenko and show us some of their work.Even though Xenko Team will follow discussions and might answer, we currently won't provide any official support here and might not answer your bug/feature requests (a forum is not well suited for that).Please use Xenko GitHub for bug/enhancement requests, and our AnswersHub website for Q&A.Cubemap Image-Based Lighting 🔗Over the next few months, on top of working on a level editor, we also want to improve the rendering quality. We know Xenko can scale well from mobile to high-end and we want to prove it!As part of this effort, this release includes image-based reflection lighting, with parallax correction.It supports multiple cubemaps: they will be accumulated during a specific deferred rendering step, similar to prelight rendering.Feel free to try it easily with a new dedicated sample, that you can create with only a few clicks inside Xenko Studio.Spotlight Shadowmaps 🔗On top of our already existing cascade directional shadowmaps, this release adds support for spotlight shadowmaps.Improvements 🔗We have done numerous bugfixes and improvements (see full details in changelog).Amongst them are a new UI slider component, physics has been modularized, Windows Phone/Store support has been improved (PCL support, properly build packages), GameStudio property grid should behave much better, etc...Version 1.0.0-beta03 🔗Release date: 2014/11/11New Features 🔗 Engine: Add cubemap components to place cubemaps in the scene or render them at runtime. Graphics: Add skybox renderer from a TextureCube (similar to background renderer). Graphics: Add cubemap reflections for deferred rendering. Graphics: Support of shadow mapping in forward rendering for spot lights. Only 1 cascade is supported at the moment. Samples: Add CubemapReflection sample. Samples: Add spot light shadow in ForwardRendering sample. Shaders: Add several cubemap shaders for sampling, reflection, parallax correction etc. UI: Add new UI element: Slider Website: Xenko Forums has just been opened. Feel free to use it to discuss about Xenko, help each other, collaborate and show off what you did with Xenko!Enhancements 🔗 Studio: Property grids have been reworked to be more efficient and easily extendable. Studio: Numeric input controls have been improved. Physics: Physics assembly now depends on Engine (instead of the opposite). Soon Physics (and some other modules) will become optional. Input: Allow emulation of several touch pointers at a same time with mouse different buttons.Issues fixed 🔗 Assets: Fix shininess import from FBX files. Core: EnumerableExtensions.LastIndexOf() wasn't working properly (#62). Game: Properly support windows with height 0 when AllowUserResizing is true (#65). Game: GameForm is created with a black background, to avoid initial flickering while Windows is being initialized (#54). Input: Alt+F4 is now properly working on Windows Store/Phone platforms (#74). Input: Properly maps all extended keyboard keys on Windows Store/Phone platforms (#84). Input: Fix several crashes and bugs in GestureRecognizers and mouse button states. Misc: PCL can now be used in Windows Store/Phone platforms (#72). Samples: SimpleDynamicTexture was using expected screen size instead of actual screen size, resulting in incorrect picking in fullscreen mode (#75). Shaders: Geometry shaders are forced to transmit SV_Position stream to pixel shaders. Shaders: Compositions (especially arrays) couldn't be used in child classes of the one containing their declaration. Function and member calls weren't correctly resolved. Studio: Fix preview and thumbnail of materials with normal map. Studio: Fix binding errors in the property grid (#29). Studio: Fix undesired hue changes and loss of precision in extremal values in the color picker. Studio: Fix \"Show in explorer\" on assets. UI: UIImage borders were not properly rendered when image had Orientation.Rotated90.Breaking changes 🔗 Graphics: Remove Rotated180 and Rotated90C from ImageOrientation enumeration for code simplicity and efficiency purpose. Graphics: Change ImageFragment.Region type from Rectangle to RectangleF and corresponding batch draw function API (SpriteBatch/UIBatch). Graphics: CopyRegion now contains additional parameters for subresource indices and destination offset. Graphics: RasterizerState and DepthStencilState constructors are now private to match other Graphics classes. static New() should be used instead (#83). Physics: Physics engine initialization has changed since now Physics is a optional module. (please check updated samples) Physics: Added Convex Hull simple wrap shape and complex decomposition as well.Known Issues 🔗 Physics: Complex convex hull decomposition can be a very long process and there is visual feedback for it. Physics: Convex hull shape debug shapes in game studio are not rendering very well, although the asset will be OK."
  },{
    
    "title":"Xenko is Going Open Source",
    "excerpt": " We are thrilled to announce that Xenko is going open source on GitHub. This is an important step toward the empowerment of game developers. We hope that this will...",
    "author": "Silicon Studio Corporation",
    "date": "October 17, 2014",
    "category": "",
    "tags": "blog, search, Announcement",
    "url":"https://www.stride3d.net/blog/new-version-open-sourcing/",
    "content":"We are thrilled to announce that Xenko is going open source on GitHub. This is an important step toward the empowerment of game developers. We hope that this will make you more confident in using Xenko. You will have also an unique opportunity to contribute to the project and see by yourself how Xenko engine is working.License Binary Release version Source version Contributions New Platforms New Samples Roadmap Release notes 1.0.0-beta01 New Features Enhancements Issues fixed Breaking changes Known Issues License 🔗Xenko is now delivered with two licences types:Binary Release versionSource versionBinary Release version 🔗Xenko binary release (as distributed on our website, with unmodified signed assemblies) is under the &quot;Xenko 1.x version&quot; License Agreement.It allows you to create games and distribute them freely and royalty-free, as long as you use the signed binary runtime.Source version 🔗Most of Xenko source code is released under the GPL v3 License (unless otherwise stated).A few specific parts (stated explicitely in the source header) are released under MIT, CPLor Apache 2.0 (usually matching license of original contribution).Some libraries (i.e. SiliconStudio.Core) will probably be converted to MIT later.It means that if you use Xenko built from sources (either unmodified or modified), you must publish source of your game,as well as any changes to Xenko that you might have done (as per GPLv3 license).Even for Binary Release version users, it allows to easily browse the sources and understand what's happening inside Xenko.If you want specific license terms (i.e. use a modified and/or self-compiled version of Xenko for your project),feel free to contact us at contact@stride3d.netContributions 🔗We gladly accept external contributions. Feel free to submit us pull requests and we will consider them for inclusion.Contributors will need to sign electronically a Contributor License Agreement, available here (based on Harmony).It allows us to use your changes in the commercial version, and relicense code easily (in case we decide to go MIT at some point for example).Otherwise you are free to fork, as long as you maintain GPL v3 License.New Platforms 🔗We are also pushing a new release 1.0.0-beta01. This release is most notably adding support for two new platforms:Windows RT/StoreWindows PhoneIt means that you can now target easily several major platforms: WindowsWindows PhoneWindows StoreiPhoneiPadAndroid PhoneAndroid Tablet You will be able to upgrade the platforms on your existing project by simply using the contextual menu Update Package\\Update Platforms on a package in Xenko Studio.New Samples 🔗We are also delivering 3 new samples:SimpleTerrain that demonstrates how to generate an entity model/mesh at runtime by displaying a heightmap terrainSimpleDynamicTexture that demonstrates how to dynamically upload CPU textures to the GPURenderSceneToTexture that shows how to render your models in a render target from another camera point of view and display in a textureRoadmap 🔗Towards the coming months, we are expecting to deliver lots of new features!This is a short list of the things we have in the pipe:A full scene editorAn improved animation systemReal-time dynamic scripting from Xenko Studio and Visual Studio while the game is running (on Windows, at development time)Several advanced new rendering techniques and post effects.Support for more platforms (OSX, Linux...)As we have done so far, we will try to provide a sustained delivery of new versions, with lots of small fixes and enhancements along the bigger features, as soon as they are ready (even in an alpha stage).At some point, we will open a user voice to collect your votes. Don't hesitate to post your thoughts on our answers hub!Release notes 1.0.0-beta01 🔗Release date: 2014/10/17New Features 🔗Assets: Materials can be compiled into a shader without being attached to a mesh. Use the key MaterialAsset.GenerateShader in your pdxfxlib file to allow this feature.Engine: Add support for Windows Store and Windows Phone projects.Misc: Assemblies are now all signed.Studio: Create Windows Store and Phone Projects.Studio: Deploy Windows Phone project directly from Game Studio.Studio: Add and remove platforms of existing game. Force to regenerate platform specific projects.Studio: Choose what platforms to create when starting from a sample.UI: Add support for MouseOver on Windows (mainly MouseOverState property/event in UIElement)Enhancements 🔗Samples: Load material and lighting configuration for the stand in ForwardLighting and DeferredLighting.Shaders: Incorrect shaders are no longer cached preventing NullReferenceException errors at compilation time.Studio: Generated solutions are created with VS2013 as default.Studio: The 'sprite' editor can now be used on UIImages too.UI: Improve default design of Button and EditText.UI: Make the EditText's caret blink and dissociate caret/selection colors.UI: Add support for mouse selection in EditText on Windows.UI: Create default design for ImageToggle.UI: UIImages are now regrouped into UIImageGroup the same way as SpriteGroup. The runtime-time and assets classes share the same hierarchy.Issues fixed 🔗Assets: Orientation of meshes from the assimp importer is now correct (#22).Assets: Mesh and materials are correctly associated during assimp import.Materials: Material always contains a diffuse part even if their color is black.Samples: Exhaustive shaders permutations for DeferredLighting.Shaders: The default shader is correct even when there is no parameter to generate it (no diffuse, no specular...).Shaders: Fix specular in deferred shading.Shaders: Correctly rename class in AmbientMapShading.pdxsl.Shaders: Fix issues related to geometry shader creation.Studio: New LightingAsset asset can be created in GameStudio.Studio: Unsupported assets are ignored when trying to be imported (#42).Studio: Fix issue with asset thumbnails sometimes not being updated.Studio: Some properties of the Material assets displayed with wrong/missing controls.UI: Fix problem in Canvas MeasureOverride method when measured with infinite values.Breaking changes 🔗Assets: SpriteGroup asset field 'Sprites' has been renamed 'Images' (.pdxsprite files can recovered by renaming the field inside the file).Assets: UIImage assets does not exist any more and have been replaced UIImageGroup assets. The old .pdxuiimg files cannot be easily recovered. The new .pdximage files can be easily created using the GameStudio 'sprite' editor.UI: EditText's EditInactiveImage and EditActiveImage properties have been renamed InactiveImage and ActiveImage.UI: Simplify ToggleButton. It now behaves like a Button with persistent states.Known Issues 🔗iOS: On slow phones, app might be too slow to start with Visual Studio attached (it gets killed by iOS). We will rearrange our initialization sequence.iOS: Rebuild might sometime not use latest version.Samples: Due to the way we now create platform-specific projects, samples specific icons on non-Windows platforms are currently gone. Later, a project setting page in Game Studio should make this setting available again.Samples: Since there is no accelerometer Input API yet, Accelerometer sample is currently removed.Windows Store/Phone: UI EditText and Game Resume/Destroy cycles are not implemented.Windows Store/Phone: SharpFont.dll is still compiled against .NET 4.5 (might not pass certifications)."
  },{
    
    "title":"Xenko 1.0 Alpha Released",
    "excerpt": " A new version is available for download. Run the Xenko Studio to download and install the latest version. ",
    "author": "Silicon Studio Corporation",
    "date": "September 06, 2014",
    "category": "",
    "tags": "blog, search, Release",
    "url":"https://www.stride3d.net/blog/new-version-1-0-alpha/",
    "content":"A new version is available for download. Run the Xenko Studio to download and install the latest version.In Progress Version 1.0.0-alpha07 Issues fixed Version 1.0.0-alpha06 New Features Enhancements Issues fixed In Progress 🔗General: Integration of Spine General: Preparations for open-source releaseIssue: Installed in c:\\ProgramData (#2)Issue: InvalidOperationException: No screen modes found (#7)UI: Improve layout of GameMenu sample.UI: Improve grid children measure process (fix some layout bugs).Version 1.0.0-alpha07 🔗Release date: 2014/09/04Issues fixed 🔗Studio: Exiting the Xenko Studio was generating errors.Version 1.0.0-alpha06 🔗Release date: 2014/09/04New Features 🔗Integrated release notes in the welcome menuWelcome to the new workspace!Integrate release notes in the new workspaceEngine: Reload automatically shaders at runtime when they are modified on the disk (Windows only)Shaders: New DiscardTransparentThreshold shader. Set the threshold below the one a pixel will be discarded.Shaders: New shaders dealing with normal and tangent skinning.Materials: Add UseTransparentMask parameter key in material to disable alpha blending and use the alpha channel as a mask of the texture. Use AlphaDiscardThreshold parameter key to set the desired threshold below the one a pixel will be discarded.Assets: Support for TGA and PSD files for textures.UI: Add horizontally align text in EditText using property TextAlignment.UI: Add mouse wheel delta value since last frame using property IInputManager.MouseWheelDelta.UI: Add image stretch type StretchType.FillOnStretch and modify StretchType.Fill behavior (previous StretchType.Fill mode is now implemented by StretchType.FillOnStretch).Enhancements 🔗General: Visual Studio Express 2013 can now open Xenko Projects (with some limitations) (#4)Engine: Change default Windows output type to Windows Application (#8): By default, a console is only opened when there is a message, assemblies are created in debug and the debugger is not attached.Engine: Add anisotropic texture filtering on mobile platforms that support it.Sample: AnimatedModel. Add lighting to the model. Use default Xenko pre defined shaders.Sample: ForwardLighting. Add transparent meshes.Sample: Set the same orientation for all samples on Android.Studio: Modal windows are not displayed in the taskbar anymoreStudio: Improvement in the sprite editor: possibility to drop image files in the interface, improved region selection rectangle.Studio: Performance improvement in the editor, particularly in the sprite editorUI: Allow 0-sized strip definition in Grid.UI: Allow mixing of relative/absolute element positioning in Canvas.UI: Allow user to modify values of the UIRenderingContext.Issues fixed 🔗Build: Android project fails to build (#3)Studio: GameStudio was using 100% of one CPU core (#1)Studio: Splash Screen always on top (#6)Studio: Fix GameStudio crash when importing assets using the add files button (#9)Studio: Build log is now displaying build feedbackStudio: Fixed the Hue selection in the color pickerEngine: Reduce effect change detection footprint (for example when changing the lighting configuration of the scene).Engine: Reuse rendering states.Shaders: Fix incorrect normal and tangent skinning in shaders.Shaders: Fix converter Hlsl to Glsl.Input: Fixed InputManager crash when window size is reach 0.Physics: Character Controller was not working properly on iOS."
  },{
    
    "title":"Stride Blog is Online",
    "excerpt": "",
    "author": "Silicon Studio Corporation",
    "date": "September 05, 2014",
    "category": "",
    "tags": "blog, search, Announcement",
    "url":"https://www.stride3d.net/blog/online/",
    "content":"Welcome to our new blog!You will be able to get the latest news from the Stride Team about the development of Stride.The Stride Team."
  }
]